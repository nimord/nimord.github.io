<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChaoS</title>
  <subtitle>似于混沌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qiankun.space/"/>
  <updated>2016-07-29T15:10:16.688Z</updated>
  <id>http://qiankun.space/</id>
  
  <author>
    <name>ZhangChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LFCS 12：如何使用 Linux 的帮助文档和工具</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-12/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-12/</id>
    <published>2016-07-29T14:05:01.000Z</published>
    <updated>2016-07-29T15:10:16.688Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Linux-帮助手册man&quot;&gt;&lt;a href=&quot;#Linux-帮助手册man&quot; class=&quot;headerlink&quot; title=&quot;Linux 帮助手册man&quot;&gt;&lt;/a&gt;Linux 帮助手册man&lt;/h3&gt;&lt;p&gt;man 手册是 manual 手册的缩写，就是其名字所揭示的那样：一个给定工具的帮助手册。它包含了命令所支持的选项列表（以及解释），有些工具甚至还提供一些使用范例。&lt;/p&gt;
&lt;p&gt;我们用 &lt;strong&gt;man 命令&lt;/strong&gt; 跟上你想要了解的工具名称来打开一个帮助手册。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# man diff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将打开&lt;code&gt;diff&lt;/code&gt;的手册页，这个工具将逐行对比文本文件（如你想退出只需要轻轻的点一下 q 键）。&lt;/p&gt;
&lt;p&gt;下面我来比较两个文本文件 &lt;code&gt;file1&lt;/code&gt; 和 &lt;code&gt;file2&lt;/code&gt;。这两个文本文件包含了使用同一个 Linux 发行版相同版本安装的两台机器上的的安装包列表。&lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;diff&lt;/code&gt; 命令它将告诉我们 &lt;code&gt;file1&lt;/code&gt; 和&lt;code&gt;file2&lt;/code&gt; 有什么不同:&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# diff file1 file2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/25/095541p277x5ty7ihufb67.png&quot; alt=&quot;在Linux中比较两个文本文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在Linux中比较两个文本文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 这个符号是说&lt;code&gt;file2&lt;/code&gt;缺失的行。如果是 &lt;code&gt;file1&lt;/code&gt;缺失，我们将用 &lt;code&gt;&amp;gt;&lt;/code&gt; 符号来替代指示。&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;7d6&lt;/strong&gt; 意思是说&lt;code&gt;file1&lt;/code&gt;的第&lt;strong&gt;7&lt;/strong&gt;行要删除了才能和&lt;code&gt;file2&lt;/code&gt;一致（&lt;strong&gt;24d22&lt;/strong&gt; 和 &lt;strong&gt;41d38&lt;/strong&gt; 也是同样的意思） &lt;strong&gt;65,67d61&lt;/strong&gt; 告诉需要删除从第 &lt;strong&gt;65&lt;/strong&gt; 行到 &lt;strong&gt;67&lt;/strong&gt; 行。我们完成了以上步骤，那么这两个文件将完全一致。&lt;/p&gt;
&lt;p&gt;此外，根据 man 手册说明，你还可以通过 &lt;code&gt;-y&lt;/code&gt; 选项来以两路的方式显示文件。你可以发现这对于你找到两个文件间的不同根据方便容易。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# diff -y file1 file2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/25/095542par66q955uu656ui.png&quot; alt=&quot;比较并列出两个文件的不同&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;比较并列出两个文件的不同&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;此外，你也可以用&lt;code&gt;diff&lt;/code&gt;来比较两个二进制文件。如果它们完全一样，&lt;code&gt;diff&lt;/code&gt; 将什么也不会输出。否则，它将会返回如下信息：“&lt;strong&gt;Binary files X and Y differ&lt;/strong&gt;”。&lt;/p&gt;
&lt;h3 id=&quot;–help-选项&quot;&gt;&lt;a href=&quot;#–help-选项&quot; class=&quot;headerlink&quot; title=&quot;–help 选项&quot;&gt;&lt;/a&gt;–help 选项&lt;/h3&gt;&lt;p&gt;&lt;code&gt;--help&lt;/code&gt;选项，大多数命令都支持它（并不是所有）， 它可以理解为一个命令的简短帮助手册。尽管它没有提供工具的详细介绍，但是确实是一个能够快速列出程序的所支持的选项的不错的方法。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# sed --help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将显示 sed （流编辑器）的每个支持的选项。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sed&lt;/code&gt;命令的一个典型用法是替换文件中的字符。用 &lt;code&gt;-i&lt;/code&gt; 选项（意思是 “&lt;strong&gt;原地编辑编辑文件&lt;/strong&gt;”），你可以编辑一个文件而且并不需要打开它。 如果你想要同时备份一个原始文件，用 &lt;code&gt;-i&lt;/code&gt; 选项加后缀来创建一个原始文件的副本。&lt;/p&gt;
&lt;p&gt;例如，替换 &lt;code&gt;lorem.txt&lt;/code&gt; 中的&lt;code&gt;Lorem&lt;/code&gt; 为 &lt;code&gt;Tecmint&lt;/code&gt;（忽略大小写），并且创建一个原文件的备份副本，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# less lorem.txt | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; -i lorem# sed -i.orig &lt;span class=&quot;string&quot;&gt;&#39;s/Lorem/Tecmint/gI&#39;&lt;/span&gt; lorem.txt# less lorem.txt | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; -i lorem# less lorem.txt.orig | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; -i lorem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意&lt;code&gt;lorem.txt&lt;/code&gt;文件中&lt;code&gt;Lorem&lt;/code&gt; 都已经替换为 &lt;code&gt;Tecmint&lt;/code&gt;，并且原文件 &lt;code&gt;lorem.txt&lt;/code&gt; 被保存为&lt;code&gt;lorem.txt.orig&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/25/095542si4s5z2a542g59rr.png&quot; alt=&quot;替换文件中的文本&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;替换文件中的文本&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;usr-share-doc-内的文档&quot;&gt;&lt;a href=&quot;#usr-share-doc-内的文档&quot; class=&quot;headerlink&quot; title=&quot;/usr/share/doc 内的文档&quot;&gt;&lt;/a&gt;/usr/share/doc 内的文档&lt;/h3&gt;&lt;p&gt;这可能是我最喜欢的方法。如果你进入 &lt;code&gt;/usr/share/doc&lt;/code&gt; 目录，并列出该目录，你可以看到许多以安装在你的 Linux 上的工具为名称的文件夹。&lt;/p&gt;
&lt;p&gt;根据 &lt;a href=&quot;https://linux.cn/article-6132-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文件系统层级标准&lt;/a&gt;，这些文件夹包含了许多帮助手册没有的信息，还有一些可以使配置更方便的模板和配置文件。&lt;/p&gt;
&lt;p&gt;例如，让我们来看一下 &lt;code&gt;squid-3.3.8&lt;/code&gt; （不同发行版的版本可能会不同），这还是一个非常受欢迎的 HTTP 代理和 &lt;a href=&quot;http://www.tecmint.com/configure-squid-server-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;squid 缓存服务器&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们用&lt;code&gt;cd&lt;/code&gt;命令进入目录：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cd &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/doc/&lt;/span&gt;squid-&lt;span class=&quot;number&quot;&gt;3.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;列出当前文件夹列表：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/25/095543nddiud7rzi2f3ed2.png&quot; alt=&quot;使用 ls 列出目录&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;使用 ls 列出目录&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你应该特别注意 &lt;code&gt;QUICKSTART&lt;/code&gt; 和 &lt;code&gt;squid.conf.documented&lt;/code&gt;。这些文件分别包含了 Squid 详细文档及其经过详细备注的配置文件。对于别的安装包来说，具体的名字可能不同（有可能是 &lt;strong&gt;QuickRef&lt;/strong&gt; 或者&lt;strong&gt;00QUICKSTART&lt;/strong&gt;），但意思是一样的。&lt;/p&gt;
&lt;p&gt;对于另外一些安装包，比如 Apache web 服务器，在&lt;code&gt;/usr/share/doc&lt;/code&gt;目录提供了配置模板，当你配置独立服务器或者虚拟主机的时候会非常有用。&lt;/p&gt;
&lt;h3 id=&quot;GNU-信息文档&quot;&gt;&lt;a href=&quot;#GNU-信息文档&quot; class=&quot;headerlink&quot; title=&quot;GNU 信息文档&quot;&gt;&lt;/a&gt;GNU 信息文档&lt;/h3&gt;&lt;p&gt;你可以把它看做帮助手册的“开挂版”。它不仅仅提供工具的帮助信息，而且还是超级链接的形式（没错，在命令行中的超级链接），你可以通过箭头按钮从一个章节导航到另外章节，并按下回车按钮来确认。&lt;/p&gt;
&lt;p&gt;一个典型的例子是：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# info coreutils&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 coreutils 包含了每个系统中都有的基本文件、shell 和文本处理工具，你自然可以从 coreutils 的 info 文档中得到它们的详细介绍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/25/095543xzr5k57jx7fx7ke9.png&quot; alt=&quot;Info Coreutils&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Info Coreutils&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;和帮助手册一样，你可以按 q 键退出。&lt;/p&gt;
&lt;p&gt;此外，GNU info 还可以显示标准的帮助手册。 例如：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# info tune2fs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它将显示 &lt;strong&gt;tune2fs&lt;/strong&gt;的帮助手册, 这是一个 ext2/3/4 文件系统管理工具。&lt;/p&gt;
&lt;p&gt;我们现在看到了，让我们来试试怎么用&lt;strong&gt;tune2fs&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;显示 &lt;strong&gt;/dev/mapper/vg00-vol_backups&lt;/strong&gt; 文件系统信息：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# tune2&lt;/span&gt;fs -l /dev/mapper/v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;-vol_backups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改文件系统标签（修改为 Backups）：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# tune2&lt;/span&gt;fs -L Backups /dev/mapper/v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;-vol_backups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置文件系统的自检间隔及挂载计数（用&lt;code&gt;-c&lt;/code&gt; 选项设置挂载计数间隔， 用 &lt;code&gt;-i&lt;/code&gt; 选项设置自检时间间隔，这里 &lt;strong&gt;d 表示天，w 表示周，m 表示月&lt;/strong&gt;)。&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# tune2&lt;/span&gt;fs -c &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt; /dev/mapper/v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;-vol_backups &lt;span class=&quot;attr&quot;&gt;# 每 150&lt;/span&gt; 次挂载检查一次&lt;span class=&quot;attr&quot;&gt;# tune2&lt;/span&gt;fs -i &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;w /dev/mapper/v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;-vol_backups &lt;span class=&quot;attr&quot;&gt;# 每 6&lt;/span&gt; 周检查一次&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上这些内容也可以通过 &lt;code&gt;--help&lt;/code&gt; 选项找到，或者查看帮助手册。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux-帮助手册man&quot;&gt;&lt;a href=&quot;#Linux-帮助手册man&quot; class=&quot;headerlink&quot; title=&quot;Linux 帮助手册man&quot;&gt;&lt;/a&gt;Linux 帮助手册man&lt;/h3&gt;&lt;p&gt;man 手册是 manual 手册的缩写，就是其名字
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 11：如何使用命令 vgcreate、lvcreate 和 lvextend 管理和创建 LVM</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-11/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-11/</id>
    <published>2016-07-29T14:04:56.000Z</published>
    <updated>2016-07-29T15:09:36.443Z</updated>
    
    <content type="html">&lt;p&gt;在安装 Linux 系统的时候要做的最重要的决定之一便是给系统文件、home 目录等分配空间。在这个地方犯了错，再要扩大空间不足的分区，那样既麻烦又有风险。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逻辑卷管理&lt;/strong&gt; （&lt;strong&gt;LVM&lt;/strong&gt;）相较于传统的分区管理有许多优点，已经成为大多数（如果不能说全部的话） Linux 发行版安装时的默认选择。LVM 最大的优点应该是能方便的按照你的意愿调整（减小或增大）逻辑分区的大小。&lt;/p&gt;
&lt;p&gt;LVM 的组成结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把一块或多块硬盘或者一个或多个分区配置成物理卷（PV）。&lt;/li&gt;
&lt;li&gt;一个用一个或多个物理卷创建出的卷组（&lt;strong&gt;VG&lt;/strong&gt;）。可以把一个卷组想象成一个单独的存储单元。&lt;/li&gt;
&lt;li&gt;在一个卷组上可以创建多个逻辑卷。每个逻辑卷相当于一个传统意义上的分区 —— 优点是它的大小可以根据需求重新调整大小，正如之前提到的那样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文，我们将使用三块 &lt;strong&gt;8 GB&lt;/strong&gt; 的磁盘（&lt;strong&gt;/dev/sdb&lt;/strong&gt;、&lt;strong&gt;/dev/sdc&lt;/strong&gt; 和 &lt;strong&gt;/dev/sdd&lt;/strong&gt;）分别创建三个物理卷。你既可以直接在整个设备上创建 PV，也可以先分区在创建。&lt;/p&gt;
&lt;p&gt;在这里我们选择第一种方式，如果你决定使用第二种（可以参考本系列&lt;a href=&quot;https://linux.cn/article-7187-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第四讲：创建分区和文件系统&lt;/a&gt;）确保每个分区的类型都是&lt;code&gt;8e&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;创建物理卷，卷组和逻辑卷&quot;&gt;&lt;a href=&quot;#创建物理卷，卷组和逻辑卷&quot; class=&quot;headerlink&quot; title=&quot;创建物理卷，卷组和逻辑卷&quot;&gt;&lt;/a&gt;创建物理卷，卷组和逻辑卷&lt;/h3&gt;&lt;p&gt;要在 &lt;strong&gt;/dev/sdb&lt;/strong&gt;、&lt;strong&gt;/dev/sdc&lt;/strong&gt; 和 &lt;strong&gt;/dev/sdd&lt;/strong&gt;上创建物理卷，运行：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# pvcreate &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdb &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdc &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以列出新创建的 PV ，通过：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# pvs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并得到每个 PV 的详细信息，通过：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# pvdisplay /dev/sdX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（&lt;strong&gt;X&lt;/strong&gt; 即 b、c 或 d）&lt;/p&gt;
&lt;p&gt;如果没有输入 &lt;code&gt;/dev/sdX&lt;/code&gt; ，那么你将得到所有 PV 的信息。&lt;/p&gt;
&lt;p&gt;使用 /dev/sdb&lt;code&gt;和&lt;/code&gt;/dev/sdc&lt;code&gt;创建卷组 ，命名为&lt;/code&gt;vg00&lt;code&gt;(在需要时是可以通过添加其他设备来扩展空间的，我们等到说明这点的时候再用，所以暂时先保留&lt;/code&gt;/dev/sdd`）：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# vgcreate vg00 &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdb &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就像物理卷那样，你也可以查看卷组的信息，通过：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# vgdisplay vg00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于 &lt;code&gt;vg00&lt;/code&gt; 是由两个 &lt;strong&gt;8 GB&lt;/strong&gt; 的磁盘组成的，所以它将会显示成一个 &lt;strong&gt;16 GB&lt;/strong&gt; 的硬盘：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/20/232801kjdhvx1e5vv9jzx7.png&quot; alt=&quot;LVM 卷组列表&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LVM 卷组列表&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当谈到创建逻辑卷，空间的分配必须考虑到当下和以后的需求。根据每个逻辑卷的用途来命名是一个好的做法。&lt;/p&gt;
&lt;p&gt;举个例子，让我们创建两个 LV，命名为 &lt;code&gt;vol_projects&lt;/code&gt; （&lt;strong&gt;10 GB&lt;/strong&gt;） 和 &lt;code&gt;vol_backups&lt;/code&gt; （剩下的空间）， 在日后分别用于部署项目文件和系统备份。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;-n&lt;/code&gt; 用于为 LV 指定名称，而 &lt;code&gt;-L&lt;/code&gt; 用于设定固定的大小，还有 &lt;code&gt;-l&lt;/code&gt; （小写的 L）在 VG 的预留空间中用于指定百分比大小的空间。&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# lvcreate -n vol_projects -L 10&lt;/span&gt;G v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;# lvcreate -n vol_backups -l 100&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;%&lt;/span&gt;FREE v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和之前一样，你可以查看 LV 的列表和基础信息，通过：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# lvs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或是查看详细信息，通过：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# lvdisplay&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若要查看单个 &lt;strong&gt;LV&lt;/strong&gt; 的信息，使用 &lt;strong&gt;lvdisplay&lt;/strong&gt; 加上 &lt;strong&gt;VG&lt;/strong&gt; 和 &lt;strong&gt;LV&lt;/strong&gt; 作为参数，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# lvdisplay vg00/vol_projects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/20/232802q49pf2bz9tbg1f24.png&quot; alt=&quot;逻辑卷列表&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;逻辑卷列表&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如上图，我们看到 LV 已经被创建成存储设备了（参考 LV Path 那一行）。在使用每个逻辑卷之前，需要先在上面创建文件系统。&lt;/p&gt;
&lt;p&gt;这里我们拿 ext4 来做举例，因为对于每个 LV 的大小， ext4 既可以增大又可以减小（相对的 xfs 就只允许增大）：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# mkfs.ext4&lt;/span&gt; /dev/v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;/vol_projects&lt;span class=&quot;attr&quot;&gt;# mkfs.ext4&lt;/span&gt; /dev/v&lt;span class=&quot;name&quot;&gt;g00&lt;/span&gt;/vol_backups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将在下一节向大家说明，如何调整逻辑卷的大小并在需要的时候添加额外的外部存储空间。&lt;/p&gt;
&lt;h3 id=&quot;调整逻辑卷大小和扩充卷组&quot;&gt;&lt;a href=&quot;#调整逻辑卷大小和扩充卷组&quot; class=&quot;headerlink&quot; title=&quot;调整逻辑卷大小和扩充卷组&quot;&gt;&lt;/a&gt;调整逻辑卷大小和扩充卷组&lt;/h3&gt;&lt;p&gt;现在设想以下场景。&lt;code&gt;vol_backups&lt;/code&gt; 中的空间即将用完，而 &lt;code&gt;vol_projects&lt;/code&gt; 中还有富余的空间。由于 LVM 的特性，我们可以轻易的减小后者的大小（比方说 &lt;strong&gt;2.5 GB&lt;/strong&gt;），并将其分配给前者，与此同时调整每个文件系统的大小。&lt;/p&gt;
&lt;p&gt;幸运的是这很简单，只需：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# lvreduce -&lt;span class=&quot;keyword&quot;&gt;L&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;G -&lt;span class=&quot;keyword&quot;&gt;r&lt;/span&gt; /dev/vg00/vol_projects# lvextend -&lt;span class=&quot;keyword&quot;&gt;l&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;%FREE&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;r&lt;/span&gt; /dev/vg00/vol_backups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/20/232802asehabhyw1wqsbes.png&quot; alt=&quot;减小逻辑卷和卷组&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;减小逻辑卷和卷组&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在调整逻辑卷的时候，其中包含的减号 &lt;code&gt;(-)&lt;/code&gt; 或加号 &lt;code&gt;(+)&lt;/code&gt; 是十分重要的。否则 LV 将会被设置成指定的大小，而非调整指定大小。&lt;/p&gt;
&lt;p&gt;有些时候，你可能会遭遇那种无法仅靠调整逻辑卷的大小就可以解决的问题，那时你就需要购置额外的存储设备了，你可能需要再加一块硬盘。这里我们将通过添加之前配置时预留的 PV （&lt;code&gt;/dev/sdd&lt;/code&gt;），用以模拟这种情况。&lt;/p&gt;
&lt;p&gt;想把 &lt;code&gt;/dev/sdd&lt;/code&gt; 加到 &lt;code&gt;vg00&lt;/code&gt;，执行：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# vgextend vg00 /dev/sdd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在运行上条命令的前后执行 vgdisplay &lt;code&gt;vg00&lt;/code&gt; ，你就会看出 VG 的大小增加了。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# vgdisplay vg00&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/20/232803icaaea6dzccpwsbs.png&quot; alt=&quot;查看卷组磁盘大小&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看卷组磁盘大小&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;现在，你可以使用新加的空间，按照你的需求调整现有 LV 的大小，或者创建一个新的 LV。&lt;/p&gt;
&lt;h3 id=&quot;在启动和需求时挂载逻辑卷&quot;&gt;&lt;a href=&quot;#在启动和需求时挂载逻辑卷&quot; class=&quot;headerlink&quot; title=&quot;在启动和需求时挂载逻辑卷&quot;&gt;&lt;/a&gt;在启动和需求时挂载逻辑卷&lt;/h3&gt;&lt;p&gt;当然，如果我们不打算实际的使用逻辑卷，那么创建它们就变得毫无意义了。为了更好的识别逻辑卷，我们需要找出它的 &lt;code&gt;UUID&lt;/code&gt;（用于识别一个格式化存储设备的唯一且不变的属性）。&lt;/p&gt;
&lt;p&gt;要做到这点，可使用 blkid 加每个设备的路径来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# blkid &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;vg00&lt;span class=&quot;regexp&quot;&gt;/vol_projects# blkid /&lt;/span&gt;dev&lt;span class=&quot;regexp&quot;&gt;/vg00/&lt;/span&gt;vol_backups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/20/232803d9fil25unsl5ufzz.png&quot; alt=&quot;寻找逻辑卷的 UUID&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;寻找逻辑卷的 UUID&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;为每个 LV 创建挂载点：&lt;/p&gt;
&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; /home/projects# &lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; /home/backups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并在 &lt;code&gt;/etc/fstab&lt;/code&gt; 插入相应的条目（确保使用之前获得的UUID）：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UUID=b85df913-580f-461c-844f-546d8cde4646 /home/projects    ext4 defaults &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0UUID&lt;/span&gt;=e1929239-&lt;span class=&quot;number&quot;&gt;5087&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;44b1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;9396&lt;/span&gt;-53e09db6eb9e /home/backups ext4    defaults &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存并挂载 LV：&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mount -a# mount | grep home&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/20/232804te0tozs3t451t0an.png&quot; alt=&quot;挂载逻辑卷&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;挂载逻辑卷&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在涉及到 LV 的实际使用时，你还需要按照曾在本系列&lt;a href=&quot;https://linux.cn/article-7418-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第八讲：管理用户和用户组&lt;/a&gt;中讲解的那样，为其设置合适的 &lt;code&gt;ugo+rwx&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在安装 Linux 系统的时候要做的最重要的决定之一便是给系统文件、home 目录等分配空间。在这个地方犯了错，再要扩大空间不足的分区，那样既麻烦又有风险。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逻辑卷管理&lt;/strong&gt; （&lt;strong&gt;LVM&lt;/strong&gt;）相较于传统的
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 10：学习简单的 Shell 脚本编程和文件系统故障排除</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-10/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-10/</id>
    <published>2016-07-29T14:04:51.000Z</published>
    <updated>2016-07-29T15:08:41.966Z</updated>
    
    <content type="html">&lt;h3 id=&quot;理解终端-（Terminals）和-Shell&quot;&gt;&lt;a href=&quot;#理解终端-（Terminals）和-Shell&quot; class=&quot;headerlink&quot; title=&quot;理解终端 （Terminals）和 Shell&quot;&gt;&lt;/a&gt;理解终端 （Terminals）和 Shell&lt;/h3&gt;&lt;p&gt;首先要声明一些概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shell 是一个程序，它将命令传递给操作系统来执行。&lt;/li&gt;
&lt;li&gt;Terminal 也是一个程序，允许最终用户使用它与 Shell 来交互。比如，下边的图片是 GNOME Terminal。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Gnome Terminal&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;启动 Shell 之后，会呈现一个命令提示符 (也称为命令行) 提示我们 Shell 已经做好了准备，接受标准输入设备输入的命令，这个标准输入设备通常是键盘。&lt;/p&gt;
&lt;p&gt;你可以参考该系列文章的 &lt;a href=&quot;https://linux.cn/article-7161-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第一讲 如何在 Linux 上使用 GNU sed 等命令来创建、编辑和操作文件&lt;/a&gt; 来温习一些常用的命令。&lt;/p&gt;
&lt;p&gt;Linux 为提供了许多可以选用的 Shell，下面列出一些常用的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bash Shell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bash 代表 Bourne Again Shell，它是 GNU 项目默认的 Shell。它借鉴了 Korn shell (ksh) 和 C shell (csh) 中有用的特性，并同时对性能进行了提升。它同时也是 LFCS 认证中所涵盖的各发行版中默认 Shell，也是本系列教程将使用的 Shell。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sh Shell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bourne SHell 是一个比较古老的 shell，多年来一直都是很多类 Unix 系统的默认 shell。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ksh Shell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Korn SHell (ksh shell) 也是一个 Unix shell，是贝尔实验室 （Bell Labs）的 David Korn 在 19 世纪 80 年代初的时候开发的。它兼容 Bourne shell ，并同时包含了 C shell 中的多数特性。&lt;/p&gt;
&lt;p&gt;一个 shell 脚本仅仅只是一个可执行的文本文件，里边包含一条条可执行命令。&lt;/p&gt;
&lt;h3 id=&quot;简单的-Shell-脚本编程&quot;&gt;&lt;a href=&quot;#简单的-Shell-脚本编程&quot; class=&quot;headerlink&quot; title=&quot;简单的 Shell 脚本编程&quot;&gt;&lt;/a&gt;简单的 Shell 脚本编程&lt;/h3&gt;&lt;p&gt;如前所述，一个 shell 脚本就是一个纯文本文件，因此，可以使用自己喜欢的文本编辑器来创建和编辑。你可以考虑使用 vi/vim (参考本系列 &lt;a href=&quot;https://linux.cn/article-7165-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第二讲 如何安装和使用纯文本编辑器 vi/vim&lt;/a&gt;)，它的语法高亮让我的编辑工作非常方便。&lt;/p&gt;
&lt;p&gt;输入如下命令来创建一个名为 myscript.sh 的脚本文件：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# vim myscript.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;shell 脚本的第一行 (著名的&lt;a href=&quot;https://linux.cn/article-3664-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;释伴行&lt;/a&gt;（shebang line）) 必须如下：&lt;/p&gt;
&lt;figure class=&quot;highlight d&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash（）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这条语句“告诉”操作系统需要用哪个解释器来运行这个脚本文件之后命令。&lt;/p&gt;
&lt;p&gt;现在可以添加需要执行的命令了。通过注释，我们可以声明每一条命令或者整个脚本的具体含义。注意，shell 会忽略掉以井号 (#) 开始的注释语句。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 这是关于 LFCS 认证系列的第十部分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 今天是 $(date +%Y-%m-%d)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写并保存脚本之后，通过以下命令来使脚本文件成为可执行文件：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod 755 myscript.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在执行脚本之前，我们需要说一下环境变量 ($PATH)，运行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们就会看到环境变量 ($PATH) 的具体内容：这是当输入命令时系统所搜索可执行程序的目录，每一项之间使用冒号 (&lt;img src=&quot;https://dn-linuxcn.qbox.me/static/image/smiley/default/smile.gif&quot; alt=&quot;img&quot;&gt; 隔开。称它为环境变量，是因为它本是就是 shell 环境的一部分 —— 这是当 shell 每次启动时 shell 及其子进程可以获取的一系列信息。&lt;/p&gt;
&lt;p&gt;当我们输入一个命令并按下回车时，shell 会搜索 $PATH 变量中列出的目录并执行第一个知道的实例。请看如下例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201607/07/113132kzy876lll96yp4bl.png&quot; alt=&quot;Linux Environment Variables&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;环境变量&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;假如存在两个同名的可执行程序，一个在 /usr/local/bin，另一个在 /usr/bin，则会执行环境变量中最先列出的那个，并忽略另外一个。&lt;/p&gt;
&lt;p&gt;如果我们自己编写的脚本没有放在 $PATH 变量列出目录中的任何一个，则需要输入 ./filename 来执行它。而如果存储在 $PATH 变量中的任意一个目录，我们就可以像运行其他命令一样来运行之前编写的脚本了。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# ./myscript.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# cp myscript.sh ../bin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# cd ../bin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# pwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# myscript.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;执行脚本&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;if-条件语句&quot;&gt;&lt;a href=&quot;#if-条件语句&quot; class=&quot;headerlink&quot; title=&quot;if 条件语句&quot;&gt;&lt;/a&gt;if 条件语句&lt;/h4&gt;&lt;p&gt;无论何时，当你需要在脚本中根据某个命令的运行结果来采取相应动作时，你应该使用 if 结构来定义条件。基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; CONDITION; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    COMMANDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OTHER-COMMANDS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，CONDITION 可以是如下情形的任意一项 (仅列出常用的)，并且达到以下条件时返回 true：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[ -a file ]&lt;/code&gt; → 指定文件存在。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -d file ]&lt;/code&gt; → 指定文件存在，并且是一个目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -f file ]&lt;/code&gt; → 指定文件存在，并且是一个普通文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -u file ]&lt;/code&gt; → 指定文件存在，并设置了 SUID 权限位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -g file ]&lt;/code&gt; → 指定文件存在，并设置了 SGID 权限位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -k file ]&lt;/code&gt; → 指定文件存在，并设置了“黏连 (Sticky)”位。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -r file ]&lt;/code&gt; → 指定文件存在，并且文件可读。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -s file ]&lt;/code&gt; → 指定文件存在，并且文件不为空。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -w file ]&lt;/code&gt; → 指定文件存在，并且文件可写入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ -x file ]&lt;/code&gt; → 指定文件存在，并且可执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ string1 = string2 ]&lt;/code&gt; → 字符串相同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ string1 != string2 ]&lt;/code&gt; → 字符串不相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[ int1 op int2 ] 为前述列表中的一部分 (例如： -eq –&amp;gt; int1 与 int2 相同时返回 true) ，其中比较项也可以是一个列表子项， 其中 op 为以下比较操作符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-eq&lt;/code&gt; → int1 等于 int2 时返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ne&lt;/code&gt; → int1 不等于 int2 时返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-lt&lt;/code&gt; → int1 小于 int2 时返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-le&lt;/code&gt; → int1 小于或等于 int2 时返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-gt&lt;/code&gt; → int1 大于 int2 时返回 true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ge&lt;/code&gt; → int1 大于或等于 int2 时返回 true。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;for-循环语句&quot;&gt;&lt;a href=&quot;#for-循环语句&quot; class=&quot;headerlink&quot; title=&quot;for 循环语句&quot;&gt;&lt;/a&gt;for 循环语句&lt;/h4&gt;&lt;p&gt;循环语句可以在某个条件下重复执行某个命令。基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; SEQUENCE; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        COMMANDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，item 为每次执行 COMMANDS 时，在 SEQUENCE 中匹配到的值。&lt;/p&gt;
&lt;h4 id=&quot;While-循环语句&quot;&gt;&lt;a href=&quot;#While-循环语句&quot; class=&quot;headerlink&quot; title=&quot;While 循环语句&quot;&gt;&lt;/a&gt;While 循环语句&lt;/h4&gt;&lt;p&gt;该循环结构会一直执行重复的命令，直到控制命令（EVALUATION_COMMAND）执行的退出状态值等于 0 时 (即执行成功) 停止。基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; EVALUATION_COMMAND; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        EXECUTE_COMMANDS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，EVALUATION_COMMAND 可以是任何能够返回成功 (0) 或失败 (0 以外的值) 的退出状态值的命令，EXECUTE_COMMANDS 则可以是任何的程序、脚本或者 shell 结构体，包括其他的嵌套循环。&lt;/p&gt;
&lt;h4 id=&quot;综合使用&quot;&gt;&lt;a href=&quot;#综合使用&quot; class=&quot;headerlink&quot; title=&quot;综合使用&quot;&gt;&lt;/a&gt;综合使用&lt;/h4&gt;&lt;p&gt;我们会通过以下例子来演示 if 条件语句和 for 循环语句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在基于 systemd 的发行版中探测某个服务是否在运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先建立一个文件，列出我们想要想要查看的服务名。&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cat myservices.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;sshd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mariadb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;httpd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;crond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;firewalld&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;使用脚本监控 Linux 服务&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们编写的脚本看起来应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This script iterates over a list of services and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# is used to determine whether they are running or not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; service &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(cat myservices.txt); &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        systemctl status &lt;span class=&quot;variable&quot;&gt;$service&lt;/span&gt; | grep --quiet &lt;span class=&quot;string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ $? &lt;span class=&quot;_&quot;&gt;-eq&lt;/span&gt; 0 ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$service&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;is [ACTIVE]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$service&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;is [INACTIVE or NOT INSTALLED]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Linux 服务监控脚本&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们来解释一下这个脚本的工作流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1). for 循环每次读取 myservices.txt 文件中的一项记录，每一项纪录表示一个服务的通用变量名。各项记录组成如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# cat myservices.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2). 以上命令由圆括号括着，并在前面添加美元符，表示它需要从 myservices.txt 的记录列表中取值并作为变量传递给 for 循环。&lt;/p&gt;
&lt;p&gt;3). 对于记录列表中的每一项纪录 (即每一项纪录的服务变量)，都会执行以下动作：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# systemctl status $service | grep --quiet &lt;span class=&quot;string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时，需要在每个通用变量名 (即每一项纪录的服务变量) 的前面添加美元符，以表明它是作为变量来传递的。其输出则通过管道符传给 grep。&lt;/p&gt;
&lt;p&gt;其中，-quiet 选项用于阻止 grep 命令将发现的 “running” 的行回显到屏幕。当 grep 捕获到 “running” 时，则会返回一个退出状态码 “0” (在 if 结构体表示为 $?)，由此确认某个服务正在运行中。&lt;/p&gt;
&lt;p&gt;如果退出状态码是非零值 (即 systemctl status $service 命令中的回显中没有出现 “running”)，则表明某个服务未运行。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;服务监控脚本&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们可以增加一步，在开始循环之前，先确认 myservices.txt 是否存在。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This script iterates over a list of services and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# is used to determine whether they are running or not.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; myservices.txt ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; service &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(cat myservices.txt); &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                systemctl status &lt;span class=&quot;variable&quot;&gt;$service&lt;/span&gt; | grep --quiet &lt;span class=&quot;string&quot;&gt;&quot;running&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ $? &lt;span class=&quot;_&quot;&gt;-eq&lt;/span&gt; 0 ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$service&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;is [ACTIVE]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$service&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;is [INACTIVE or NOT INSTALLED]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;myservices.txt is missing&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Ping 一系列网络或者 Internet 主机名以获取应答数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可能想把自己维护的主机写入一个文本文件，并使用脚本探测它们是否能够 ping 得通 (脚本中的 myhosts 可以随意替换为你想要的名称)。&lt;/p&gt;
&lt;p&gt;shell 的内置 read 命令将告诉 while 循环一行行的读取 myhosts，并将读取的每行内容传给 host 变量，随后 host 变量传递给 ping 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This script is used to demonstrate the use of a while loop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; host; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ping -c 2 &lt;span class=&quot;variable&quot;&gt;$host&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &amp;lt; myhosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;使用脚本 Ping 服务器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;扩展阅读:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/learning-shell-scripting-language-a-guide-from-newbies-to-system-administrator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn Shell Scripting: A Guide from Newbies to System Administrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/basic-shell-programming-part-ii/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5 Shell Scripts to Learn Shell Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件系统排错&quot;&gt;&lt;a href=&quot;#文件系统排错&quot; class=&quot;headerlink&quot; title=&quot;文件系统排错&quot;&gt;&lt;/a&gt;文件系统排错&lt;/h3&gt;&lt;p&gt;尽管 Linux 是一个很稳定的操作系统，但仍然会因为某些原因出现崩溃时 (比如因为断电等)，正好你有一个 (或者更多个) 文件系统未能正确卸载，Linux 重启的时候就会自动检测其中可能发生的错误。&lt;/p&gt;
&lt;p&gt;此外，每次系统正常启动的时候，都会在文件系统挂载之前校验它们的完整度。而这些全部都依赖于 fsck 工具 (文件系统校验（file system check）)。&lt;/p&gt;
&lt;p&gt;如果对 fsck 进行设定，它除了校验文件系统的完整性之外，还可以尝试修复错误。fsck 能否成功修复错误，取决于文件系统的损伤程度；如果可以修复，被损坏部分的文件会恢复到位于每个文件系统根目录的 lost+found。&lt;/p&gt;
&lt;p&gt;最后但同样重要的是，我们必须注意，如果拔掉系统正在写入数据的 USB 设备同样会发生错误，甚至可能发生硬件损坏。&lt;/p&gt;
&lt;p&gt;fsck 的基本用如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# fsck [options] filesystem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;检查文件系统错误并尝试自动修复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想要使用 fsck 检查文件系统，我们需要首先卸载文件系统。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# mount | grep sdg1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# umount /mnt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# fsck -y /dev/sdg1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;检查文件系统错误&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;除了 -y 选项，我们也可以使用 -a 选项来自动修复文件系统错误，而不必做出交互式应答，并在文件系统看起来 “干净” 卸载的情况下强制校验。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# fsck -af /dev/sdg1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果只是要找出什么地方发生了错误 (不用在检测到错误的时候修复)，我们可以使用 -n 选项，这样只会将文件系统错误输出到标准输出设备上。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# fsck -n /dev/sdg1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据 fsck 输出的错误信息，我们可以知道是否可以自己修复或者需要将问题提交给工程师团队来做详细的硬件校验。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理解终端-（Terminals）和-Shell&quot;&gt;&lt;a href=&quot;#理解终端-（Terminals）和-Shell&quot; class=&quot;headerlink&quot; title=&quot;理解终端 （Terminals）和 Shell&quot;&gt;&lt;/a&gt;理解终端 （Terminals）和
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 09：使用 Yum/RPM/Apt/Dpkg/Aptitude 进行 Linux 软件包管理</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-09/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-09/</id>
    <published>2016-07-29T14:04:45.000Z</published>
    <updated>2016-07-29T15:15:22.372Z</updated>
    
    <content type="html">&lt;h3 id=&quot;软件包管理&quot;&gt;&lt;a href=&quot;#软件包管理&quot; class=&quot;headerlink&quot; title=&quot;软件包管理&quot;&gt;&lt;/a&gt;软件包管理&lt;/h3&gt;&lt;p&gt;简单的说，软件包管理是系统中安装和维护软件的一种方法，这里说的维护包含更新和卸载。&lt;/p&gt;
&lt;p&gt;在Linux早期，程序只以源代码的方式发行，还带有所需的用户使用手册和必备的配置文件，甚至更多。现如今，大多数发行商一般使用预装程序或者被称为软件包的程序集合。用户可以使用这些预装程序或者软件包安装到该发行版中。然而，Linux最伟大的一点是我们仍然能够获得程序的源代码用来学习、改进和编译。&lt;/p&gt;
&lt;h4 id=&quot;软件包管理系统是如何工作的&quot;&gt;&lt;a href=&quot;#软件包管理系统是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;软件包管理系统是如何工作的&quot;&gt;&lt;/a&gt;软件包管理系统是如何工作的&lt;/h4&gt;&lt;p&gt;如果某一个软件包需要一定的资源，如共享库，或者需要另一个软件包，这就称之为依赖性。所有现在的包管理系统提供了一些解决依赖性的方法，以确保当安装一个软件包时，相关的依赖包也安装好了。&lt;/p&gt;
&lt;h4 id=&quot;打包系统&quot;&gt;&lt;a href=&quot;#打包系统&quot; class=&quot;headerlink&quot; title=&quot;打包系统&quot;&gt;&lt;/a&gt;打包系统&lt;/h4&gt;&lt;p&gt;几乎所有安装在现代Linux系统上的软件都会能互联网上找到。它要么由发行商通过中央仓库（中央仓库能包含几千个软件包，每个软件包都已经为发行版构建、测试并且维护好了）提供，要么能够直接得到可以下载和手动安装的源代码。&lt;/p&gt;
&lt;p&gt;由于不同的发行版使用不同的打包系统（Debian的&lt;em&gt;.deb文件/CentOS的&lt;/em&gt;.rpm文件/openSUSE的专门为openSUSE构建的*.rpm文件），因此为一个发行版开发的软件包会与其他发行版不兼容。然而，大多数发行版都属于LFCS认证所涉及的三个发行版家族之一。&lt;/p&gt;
&lt;h4 id=&quot;高级和低级打包工具&quot;&gt;&lt;a href=&quot;#高级和低级打包工具&quot; class=&quot;headerlink&quot; title=&quot;高级和低级打包工具&quot;&gt;&lt;/a&gt;高级和低级打包工具&lt;/h4&gt;&lt;p&gt;为了有效地进行软件包管理的任务，你需要知道，有两种类型的实用工具：低级工具（能在后端实际安装、升级、卸载软件包文件），以及高级工具（负责确保能很好的执行依赖性解决和元数据检索的任务——元数据也称为数据的数据）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发行版&lt;/th&gt;
&lt;th&gt;低级工具&lt;/th&gt;
&lt;th&gt;高级工具&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Debian版及其衍生版&lt;/td&gt;
&lt;td&gt;dpkg&lt;/td&gt;
&lt;td&gt;apt-get / aptitude&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CentOS版&lt;/td&gt;
&lt;td&gt;rpm&lt;/td&gt;
&lt;td&gt;yum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openSUSE版&lt;/td&gt;
&lt;td&gt;rpm&lt;/td&gt;
&lt;td&gt;zypper&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;让我们来看下低级工具和高级工具的描述。&lt;/p&gt;
&lt;p&gt;dpkg的是基于Debian的系统的一个低级包管理器。它可以安装，删除，提供有关资料，以及建立*.deb包，但它不能自动下载并安装它们相应的依赖包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读更多： &lt;a href=&quot;http://www.tecmint.com/dpkg-command-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;15个dpkg命令实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;apt-get是Debian及其衍生版的高级包管理器，并提供命令行方式来从多个来源检索和安装软件包，其中包括解决依赖性。和dpkg不同的是，apt-get不是直接基于.deb文件工作，而是基于软件包的正确名称。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读更多： &lt;a href=&quot;http://www.tecmint.com/useful-basic-commands-of-apt-get-and-apt-cache-for-package-management/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;25个apt-get命令实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aptitude是基于Debian的系统的另一个高级包管理器，它可用于快速简便的执行管理任务（安装，升级和删除软件包，还可以自动处理解决依赖性）。它在atp-get的基础上提供了更多功能，例如提供对软件包的几个版本的访问。&lt;/p&gt;
&lt;p&gt;rpm是Linux标准基础（LSB）兼容发行版所使用的一种软件包管理器，用来对软件包进行低级处理。就像dpkg一样，rpm可以查询、安装、检验、升级和卸载软件包，它多数用于基于Fedora的系统，比如RHEL和CentOS。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读更多： &lt;a href=&quot;http://www.tecmint.com/20-practical-examples-of-rpm-commands-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20个rpm命令实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相对于基于RPM的系统，yum增加了系统自动更新的功能和带依赖性管理的软件包管理功能。作为一个高级工具，和apt-get或者aptitude相似，yum需要配合仓库工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读更多： &lt;a href=&quot;http://www.tecmint.com/20-linux-yum-yellowdog-updater-modified-commands-for-package-mangement/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20个yum命令实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;低级工具的常见用法&quot;&gt;&lt;a href=&quot;#低级工具的常见用法&quot; class=&quot;headerlink&quot; title=&quot;低级工具的常见用法&quot;&gt;&lt;/a&gt;低级工具的常见用法&lt;/h3&gt;&lt;p&gt;使用低级工具处理最常见的任务如下。&lt;/p&gt;
&lt;h4 id=&quot;1-从已编译（-deb或-rpm）的文件安装一个软件包&quot;&gt;&lt;a href=&quot;#1-从已编译（-deb或-rpm）的文件安装一个软件包&quot; class=&quot;headerlink&quot; title=&quot;1. 从已编译（.deb或.rpm）的文件安装一个软件包&quot;&gt;&lt;/a&gt;1. 从已编译（&lt;em&gt;.deb或&lt;/em&gt;.rpm）的文件安装一个软件包&lt;/h4&gt;&lt;p&gt;这种安装方法的缺点是没有提供解决依赖性的方案。当你在发行版本库中无法获得某个软件包并且又不能通过高级工具下载安装时，你很可能会从一个已编译文件安装该软件包。因为低级工具不会解决依赖性问题，所以当安装一个没有解决依赖性的软件包时会出现出错并且退出。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;dpkg&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.deb&lt;/span&gt;      &lt;span class=&quot;selector-attr&quot;&gt;[Debian版和衍生版]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.rpm&lt;/span&gt;       &lt;span class=&quot;selector-attr&quot;&gt;[CentOS版 / openSUSE版]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不要试图在CentOS中安装一个为openSUSE构建的.rpm文件，反之亦然！&lt;/p&gt;
&lt;h4 id=&quot;2-从已编译文件中更新一个软件包&quot;&gt;&lt;a href=&quot;#2-从已编译文件中更新一个软件包&quot; class=&quot;headerlink&quot; title=&quot;2. 从已编译文件中更新一个软件包&quot;&gt;&lt;/a&gt;2. 从已编译文件中更新一个软件包&lt;/h4&gt;&lt;p&gt;同样，当某个安装的软件包不在中央仓库中时，你只能手动升级该软件包。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;dpkg&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.deb&lt;/span&gt;      &lt;span class=&quot;selector-attr&quot;&gt;[Debian版和衍生版]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;rpm&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-U&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.rpm&lt;/span&gt;       &lt;span class=&quot;selector-attr&quot;&gt;[CentOS版 / openSUSE版]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-列举安装的软件包&quot;&gt;&lt;a href=&quot;#3-列举安装的软件包&quot; class=&quot;headerlink&quot; title=&quot;3. 列举安装的软件包&quot;&gt;&lt;/a&gt;3. 列举安装的软件包&lt;/h4&gt;&lt;p&gt;当你第一次接触一个已经在工作中的系统时，很可能你会想知道安装了哪些软件包。&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dpkg -l       &lt;span class=&quot;string&quot;&gt;[Debian版和衍生版]&lt;/span&gt;# rpm -qa       &lt;span class=&quot;string&quot;&gt;[CentOS版 / openSUSE版]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想知道一个特定的软件包安装在哪儿，你可以使用管道命令从以上命令的输出中去搜索，这在这个系列的&lt;a href=&quot;https://linux.cn/article-7161-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第一讲 操作Linux文件&lt;/a&gt; 中有介绍。例如我们需要验证mysql-common这个软件包是否安装在Ubuntu系统中：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# dpkg -l | grep mysql-common&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/12/223756gbrc5wckzr9s25q2.png&quot; alt=&quot;检查安装的软件包&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查安装的软件包&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;另外一种方式来判断一个软件包是否已安装。&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dpkg --status package_name        &lt;span class=&quot;string&quot;&gt;[Debian版和衍生版]&lt;/span&gt;# rpm -q package_name           &lt;span class=&quot;string&quot;&gt;[CentOS版 / openSUSE版]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如，让我们找出sysdig软件包是否安装在我们的系统。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# rpm -qa | grep sysdig&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/12/223757bpi0oknbiiub0bri.png&quot; alt=&quot;检查sysdig软件包&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查sysdig软件包&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-查询一个文件是由哪个软件包安装的&quot;&gt;&lt;a href=&quot;#4-查询一个文件是由哪个软件包安装的&quot; class=&quot;headerlink&quot; title=&quot;4. 查询一个文件是由哪个软件包安装的&quot;&gt;&lt;/a&gt;4. 查询一个文件是由哪个软件包安装的&lt;/h4&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dpkg --search &lt;span class=&quot;built_in&quot;&gt;file_name&lt;/span&gt;# rpm -qf &lt;span class=&quot;built_in&quot;&gt;file_name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如，pw_dict.hwm文件是由那个软件包安装的？&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# rpm -qf &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;share&lt;span class=&quot;regexp&quot;&gt;/cracklib/&lt;/span&gt;pw_dict.hwm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/12/223757syilccyc5to25crc.png&quot; alt=&quot;Linux中查询文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Linux中查询文件&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;高级工具的常见用法&quot;&gt;&lt;a href=&quot;#高级工具的常见用法&quot; class=&quot;headerlink&quot; title=&quot;高级工具的常见用法&quot;&gt;&lt;/a&gt;高级工具的常见用法&lt;/h3&gt;&lt;p&gt;使用高级工具处理最常见的任务如下。&lt;/p&gt;
&lt;h4 id=&quot;1-搜索软件包&quot;&gt;&lt;a href=&quot;#1-搜索软件包&quot; class=&quot;headerlink&quot; title=&quot;1. 搜索软件包&quot;&gt;&lt;/a&gt;1. 搜索软件包&lt;/h4&gt;&lt;p&gt;aptitude的更新操作将会更新可用的软件包列表，而aptitude的搜索操作会根据软件包名进行实际搜索。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# aptitude &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; &amp;amp;&amp;amp; aptitude &lt;span class=&quot;keyword&quot;&gt;search&lt;/span&gt; package_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在search all选项中，yum不仅可以通过软件包名还可以通过软件包的描述搜索。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# yum &lt;span class=&quot;built_in&quot;&gt;search&lt;/span&gt; package_name# yum &lt;span class=&quot;built_in&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt; package_name# yum whatprovides “*/package_name”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假定我们需要一个名为sysdig文件，想知道我们需要安装哪个软件包才行，那么运行。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# yum whatprovides “*/sysdig”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/12/223800o9soqn1phqsqp1th.png&quot; alt=&quot;检查软件包描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查软件包描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;whatprovides告诉yum搜索一个含有能够匹配上述正则表达式的文件的软件包。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# zypper refresh &amp;amp;&amp;amp; zypper search package_name      [在openSUSE上]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-从仓库安装一个软件包&quot;&gt;&lt;a href=&quot;#2-从仓库安装一个软件包&quot; class=&quot;headerlink&quot; title=&quot;2. 从仓库安装一个软件包&quot;&gt;&lt;/a&gt;2. 从仓库安装一个软件包&lt;/h4&gt;&lt;p&gt;当安装一个软件包时，在软件包管理器解决了所有依赖性问题后，可能会提醒你确认安装。需要注意的是运行更新（ update）或刷新（refresh）（根据所使用的软件包管理器）不是绝对必要，但是考虑到安全性和依赖性的原因，保持安装的软件包是最新的是系统管理员的一个好经验。&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# aptitude update &amp;amp;&amp;amp; aptitude install package_name      &lt;span class=&quot;string&quot;&gt;[Debian版和衍生版]&lt;/span&gt;# yum update &amp;amp;&amp;amp; yum install package_name            &lt;span class=&quot;string&quot;&gt;[CentOS版]&lt;/span&gt;# zypper refresh &amp;amp;&amp;amp; zypper install package_name         &lt;span class=&quot;string&quot;&gt;[openSUSE版]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-卸载软件包&quot;&gt;&lt;a href=&quot;#3-卸载软件包&quot; class=&quot;headerlink&quot; title=&quot;3. 卸载软件包&quot;&gt;&lt;/a&gt;3. 卸载软件包&lt;/h4&gt;&lt;p&gt;remove选项将会卸载软件包，但把配置文件保留完好，然而purge选项将从系统中完全删去该程序以及相关内容。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;aptitude&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;purge&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;package_name#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;package_name###&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;注意要卸载的openSUSE包前面的减号&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;zypper&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;package_name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在默认情况下，大部分（如果不是全部的话）的软件包管理器会提示你，在你实际卸载之前你是否确定要继续卸载。所以，请仔细阅读屏幕上的信息，以避免陷入不必要的麻烦！&lt;/p&gt;
&lt;h4 id=&quot;4-显示软件包的信息&quot;&gt;&lt;a href=&quot;#4-显示软件包的信息&quot; class=&quot;headerlink&quot; title=&quot;4. 显示软件包的信息&quot;&gt;&lt;/a&gt;4. 显示软件包的信息&lt;/h4&gt;&lt;p&gt;下面的命令将会显示birthday这个软件包的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# aptitude show &lt;span class=&quot;keyword&quot;&gt;birthday# &lt;/span&gt;yum &lt;span class=&quot;meta&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;birthday# &lt;/span&gt;zypper &lt;span class=&quot;meta&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;birthday&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/12/223802i8wzqhe4lzwlj1la.png&quot; alt=&quot;检查包信息&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查包信息&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件包管理&quot;&gt;&lt;a href=&quot;#软件包管理&quot; class=&quot;headerlink&quot; title=&quot;软件包管理&quot;&gt;&lt;/a&gt;软件包管理&lt;/h3&gt;&lt;p&gt;简单的说，软件包管理是系统中安装和维护软件的一种方法，这里说的维护包含更新和卸载。&lt;/p&gt;
&lt;p&gt;在Linux早期，
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 08：管理用户和用户组、文件权限和属性以及启用账户 sudo 访问权限</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-08/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-08/</id>
    <published>2016-07-29T14:04:40.000Z</published>
    <updated>2016-07-29T15:06:25.812Z</updated>
    
    <content type="html">&lt;p&gt;由于 Linux 是一个多用户的操作系统（允许多个用户通过不同主机或者终端访问一个独立系统），因此你需要知道如何才能有效地管理用户：如何添加、编辑、禁用和删除用户账户，并赋予他们足以完成自身任务的必要权限。&lt;/p&gt;
&lt;p&gt;（LCTT 译注：本篇原文章节顺序有误，根据理解做了调整。）&lt;/p&gt;
&lt;h3 id=&quot;添加用户账户&quot;&gt;&lt;a href=&quot;#添加用户账户&quot; class=&quot;headerlink&quot; title=&quot;添加用户账户&quot;&gt;&lt;/a&gt;添加用户账户&lt;/h3&gt;&lt;p&gt;添加新用户账户，你需要以 root 运行以下两条命令中的任意一条：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# adduser &lt;span class=&quot;string&quot;&gt;[new_account]&lt;/span&gt;# useradd &lt;span class=&quot;string&quot;&gt;[new_account]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当新用户账户添加到系统时，会自动执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自动创建用户家目录（默认是 /home/username）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动拷贝下列隐藏文件到新建用户的家目录，用来设置新用户会话的环境变量。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.bash_logout&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bash_profile&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bashrc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动创建邮件缓存目录 /var/spool/mail/username。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动创建与用户名相同的用户组。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;理解-etc-passwd-中的内容&quot;&gt;&lt;a href=&quot;#理解-etc-passwd-中的内容&quot; class=&quot;headerlink&quot; title=&quot;理解 /etc/passwd 中的内容&quot;&gt;&lt;/a&gt;理解 /etc/passwd 中的内容&lt;/h4&gt;&lt;p&gt;/etc/passwd 文件中存储了所有用户账户的信息，每个用户在里边都有一条对应的记录，其格式（每个字段用冒号隔开）如下：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;[username]&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;[x]&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;[UID]&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;[GID]&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;[Comment]&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;[Home directory]&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;[Default shell]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;字段 [username] 和 [Comment] 是不言自明的。&lt;/li&gt;
&lt;li&gt;第二个字段中 x 表明通过用户名 username 登录系统是有密码保护的， 密码保存在 /etc/shadow 文件中。&lt;/li&gt;
&lt;li&gt;[UID] 和 [GID] 字段用整数表示，代表该用户的用户标识符和对应所在组的组标志符。&lt;/li&gt;
&lt;li&gt;字段 [Home directory] 为 username 用户家目录的绝对路径。&lt;/li&gt;
&lt;li&gt;字段 [Default shell] 指定用户登录系统时默认使用的 shell。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;理解-etc-group-中的内容&quot;&gt;&lt;a href=&quot;#理解-etc-group-中的内容&quot; class=&quot;headerlink&quot; title=&quot;理解 /etc/group 中的内容&quot;&gt;&lt;/a&gt;理解 /etc/group 中的内容&lt;/h4&gt;&lt;p&gt;/etc/group 文件存储所有用户组的信息。每行记录的格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;]:[&lt;span class=&quot;keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;password&lt;/span&gt;]:[GID]:[&lt;span class=&quot;keyword&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;members&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;[Group name] 为用户组名称。&lt;/li&gt;
&lt;li&gt;字段 [Group password] 为 x 的话，则说明不使用用户组密码。&lt;/li&gt;
&lt;li&gt;[GID] 与 /etc/passwd 中保存的 GID 相同。&lt;/li&gt;
&lt;li&gt;[Group members] 用户组中的用户使用逗号隔开。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105800t2ooygdsttwnyk4w.png&quot; alt=&quot;添加用户账户&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;添加用户账户&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;修改用户信息&quot;&gt;&lt;a href=&quot;#修改用户信息&quot; class=&quot;headerlink&quot; title=&quot;修改用户信息&quot;&gt;&lt;/a&gt;修改用户信息&lt;/h4&gt;&lt;p&gt;添加用户账户之后，你可以使用 usermod 命令来修改用户信息中的部分字段，该命令基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# usermod &lt;span class=&quot;string&quot;&gt;[options]&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[username]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;设置账户的过期时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 –expiredate 标记后边接 年-月-日 格式的日期，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# usermod --expiredate 2014-10-30 tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;将用户添加到其他组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 -aG 或者 –append –groups 选项，后边跟着用户组，如果有多个用户组，每个用户组之间使用逗号隔开。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;usermod&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;改变用户家目录的默认位置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 -d 或者 –home 选项，后边跟着新的家目录的绝对路径。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# usermod --home /tmp tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;改变用户的默认 shell&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 –shell 选项，后边跟着新 shell 的路径。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# usermod --&lt;span class=&quot;keyword&quot;&gt;shell&lt;/span&gt; /bin/&lt;span class=&quot;keyword&quot;&gt;sh&lt;/span&gt; tecmint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面，我们一次运行上述命令：&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;usermod&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;expiredate&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/tmp&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/bin/sh&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105804k9wmu58zpxwbvsvb.png&quot; alt=&quot;usermod 命令例示&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;usermod 命令例示&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;扩展阅读&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/add-users-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;15 useradd Command Examples in Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/usermod-command-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;15 usermod Command Examples in Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;锁定和解锁账户&quot;&gt;&lt;a href=&quot;#锁定和解锁账户&quot; class=&quot;headerlink&quot; title=&quot;锁定和解锁账户&quot;&gt;&lt;/a&gt;锁定和解锁账户&lt;/h4&gt;&lt;p&gt;对于已有用户账户，我们还可以：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过锁定密码来禁用账户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 -L （大写 l）或者 –lock 选项来锁定用户密码。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# usermod --lock tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;解锁用户密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 –u 或者 –unlock 选项来解锁我们之前锁定的账户。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# usermod --unlock tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105808v110t32x0pg935xx.png&quot; alt=&quot;锁定用户账户&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;锁定用户账户&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除用户账户&quot;&gt;&lt;a href=&quot;#删除用户账户&quot; class=&quot;headerlink&quot; title=&quot;删除用户账户&quot;&gt;&lt;/a&gt;删除用户账户&lt;/h4&gt;&lt;p&gt;你可以通过 userdel –remove 命令来删除用户账户。这样会删除用户拥有的家目录和家目录下的所有文件，以及邮件缓存目录。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# userdel --remove [username]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;用户组管理&quot;&gt;&lt;a href=&quot;#用户组管理&quot; class=&quot;headerlink&quot; title=&quot;用户组管理&quot;&gt;&lt;/a&gt;用户组管理&lt;/h4&gt;&lt;p&gt;每次添加新用户，系统会为该用户创建同名的用户组，此时用户组里边只有新建的用户，其他用户可以随后添加进去。建立用户组的目的之一，就是为了通过对指定资源设置权限来完成对这些资源和文件进行访问控制。&lt;/p&gt;
&lt;p&gt;比如，你有下列用户：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user1 (主组 user1)&lt;/li&gt;
&lt;li&gt;user2 (主组 user2)&lt;/li&gt;
&lt;li&gt;user3 (主组 user3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们都需要对你系统里边某个位置的 common.txt 文件，或者 user1 用户刚刚创建的共享进行读写。你可能会运行下列命令：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# chmod &lt;span class=&quot;number&quot;&gt;660&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;common&lt;/span&gt;.txt或# chmod u&lt;span class=&quot;symbol&quot;&gt;=rw&lt;/span&gt;,g&lt;span class=&quot;symbol&quot;&gt;=rw&lt;/span&gt;,o= &lt;span class=&quot;meta&quot;&gt;common&lt;/span&gt;.txt [注意最后那个 = 号和文件名之间的空格]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而，这样仅仅给文件所属的用户和用户组（本例为 user1）成员的提供了读写权限。你还需要将 user2 和 user3 添加到 user1 组，打这样做也将 user1 用户和用户组的其他文件的权限开放给了 user2 和 user3。&lt;/p&gt;
&lt;p&gt;这时候，用户组就派上用场了，下面将演示怎么做。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示用户所属的用户组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# groups tecmint# id tecmint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为需要对指定文件进行读写的多个用户建立用户组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行下列几条命令来完成：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;groupadd&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; # 添加新用户组# &lt;span class=&quot;selector-tag&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;selector-pseudo&quot;&gt;:common_group&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.txt&lt;/span&gt; # 将 &lt;span class=&quot;selector-tag&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.txt&lt;/span&gt; 的用户组修改为 &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;usermod&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-aG&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;user1&lt;/span&gt; # 添加用户 &lt;span class=&quot;selector-tag&quot;&gt;user1&lt;/span&gt; 到 &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; 用户组# &lt;span class=&quot;selector-tag&quot;&gt;usermod&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-aG&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;user2&lt;/span&gt; # 添加用户 &lt;span class=&quot;selector-tag&quot;&gt;user2&lt;/span&gt; 到 &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; 用户组# &lt;span class=&quot;selector-tag&quot;&gt;usermod&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-aG&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;user3&lt;/span&gt; # 添加用户 &lt;span class=&quot;selector-tag&quot;&gt;user3&lt;/span&gt; 到 &lt;span class=&quot;selector-tag&quot;&gt;common_group&lt;/span&gt; 用户组&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;删除用户组&quot;&gt;&lt;a href=&quot;#删除用户组&quot; class=&quot;headerlink&quot; title=&quot;删除用户组&quot;&gt;&lt;/a&gt;删除用户组&lt;/h4&gt;&lt;p&gt;通过以下命令删除用户组：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# groupdel [group_name]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;属于这个 group_name 用户组的文件是不会被删除的，而仅仅是删除了用户组。&lt;/p&gt;
&lt;h3 id=&quot;Linux-文件权限&quot;&gt;&lt;a href=&quot;#Linux-文件权限&quot; class=&quot;headerlink&quot; title=&quot;Linux 文件权限&quot;&gt;&lt;/a&gt;Linux 文件权限&lt;/h3&gt;&lt;p&gt;除了我们在 &lt;a href=&quot;https://linux.cn/article-7171-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LFCS 系列第三讲：归档/压缩文件及目录、设置文件属性和搜索文件&lt;/a&gt; 中说到的基本的读取、写入和执行权限外，文件还有一些不常用却很重要的的权限设置，有时候把它当做“特殊权限”。&lt;/p&gt;
&lt;p&gt;就像之前我们讨论的基本权限，这里同样使用八进制数字或者一个字母（象征性符号）表示该权限类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解 Setuid 位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当为可执行文件设置 setuid 位之后，用户运行程序时会继承该程序属主的有效特权。由于这样做会引起安全风险，因此设置 setuid 权限的文件及程序必须尽量少。你会发现，当系统中有用户需要访问属于 root 用户的文件是所运行的程序就带有了 setuid 权限。&lt;/p&gt;
&lt;p&gt;也就是说，用户不仅仅可以运行这个可执行文件，而且能以 root 权限来运行。比如，让我们来看看 /bin/passwd 的权限，这个可执行文件用于改变账户的密码，修改 /etc/shadow 文件。超级用户可以改变任意账户的密码，但是其他用户只能改变自己账户的密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105809nvorvmbg6moohx9k.png&quot; alt=&quot;passwd 命令例示&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;passwd 命令例示&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;因此，所有用户都有权限运行 /bin/passwd，但只有 root 用户可以指定改变指定用户账户的密码。其他用户只能改变其自身的密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105810xz7n0rzjpi0i397e.png&quot; alt=&quot;修改用户密码&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;修改用户密码&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod o+u [filename]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以八进制形式来设置 setuid 位，在当前基本权限（或者想要设置的权限）前加上数字 4 就行了。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod 4755 [filename]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;理解 Setgid 位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置 setgid 位之后，真实用户的有效 GID 变为属组的 GID。因此，任何用户都能以属组用户的权限来访问文件。另外，当目录置了 setgid 位之后，新建的文件将继承其所属目录的 GID，并且新建的子目录会继承父目录的 setgid 位。通过这个方法，你能够以一个指定的用户组身份来访问该目录里边的文件，而不必管文件属主的主属组。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod g+s [filename]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以八进制形式来设置 setgid 位，在当前基本权限（或者想要设置的权限）前加上数字 2 就行了。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod 2755 [filename]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;给目录设置 Setgid 位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105812pcxgamj3xmj9t4mv.png&quot; alt=&quot;给命令设置 setgid 位&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;给命令设置 setgid 位&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;理解黏连Sticky位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文件设置了黏连位是没有意义，Linux 会忽略该位。如果设置到目录上，会防止其内的文件被删除或改名，除非你是该目录或文件的属主、或者是 root 用户。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod o+t [directory]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以八进制形式来设置黏连位，在当前基本权限（或者想要设置的权限）前加上数字 1 就行了。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod 1755 [directory]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若没有黏连位，任何有权限读写目录的用户都可删除和重命名其中的文件。因此，黏连位通常出现在像 /tmp 之类的目录，这些目录是所有人都具有写权限的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105816z5vxtxdkl5al5iix.png&quot; alt=&quot;给目录设置黏连位&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;给目录设置黏连位&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;Linux-特殊文件属性&quot;&gt;&lt;a href=&quot;#Linux-特殊文件属性&quot; class=&quot;headerlink&quot; title=&quot;Linux 特殊文件属性&quot;&gt;&lt;/a&gt;Linux 特殊文件属性&lt;/h3&gt;&lt;p&gt;文件还有其他一些属性，用来做进一步的操作限制。比如，阻止对文件的重命名、移动、删除甚至是修改。可以通过使用 &lt;a href=&quot;http://www.tecmint.com/chattr-command-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chattr 命令&lt;/a&gt; 来设置，并可以使用 lsattr 工具来查看这些属性。设置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chattr +i file1# chattr +a file2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行这些命令之后，file1 成为不可变状态（即不可移动、重命名、修改或删除），而 file2 进入“仅追加”模式（仅在追加内容模式中打开）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105819pgnnciuyn4knu0g4.png&quot; alt=&quot;通过 Chattr 命令来包含文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;通过 Chattr 命令来包含文件&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;访问-root-账户并启用-sudo&quot;&gt;&lt;a href=&quot;#访问-root-账户并启用-sudo&quot; class=&quot;headerlink&quot; title=&quot;访问 root 账户并启用 sudo&quot;&gt;&lt;/a&gt;访问 root 账户并启用 sudo&lt;/h3&gt;&lt;p&gt;访问 root 账户的方法之一，就是通过输入：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;su&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后输入 root 账户密码。&lt;/p&gt;
&lt;p&gt;倘若授权成功，你将以 root 身份登录，工作目录则是登录前所在的位置。如果是想要一登录就自动进入 root 用户的家目录，请运行：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;su -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后输入 root 账户密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105820xh7rhf72ar3z320e.png&quot; alt=&quot;用户通过 su 切换&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;用户通过 su 切换&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;执行上个步骤需要普通用户知道 root 账户的密码，这样会引起非常严重的安全问题。于是，系统管理员通常会配置 sudo 命令来让普通用户在严格控制的环境中以其他用户身份（通常是 root）来执行命令。所以，可以在严格控制用户的情况下，又允许他运行一条或多条特权命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展阅读：&lt;a href=&quot;http://www.tecmint.com/su-vs-sudo-and-how-to-configure-sudo-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Difference Between su and sudo User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;普通用户通过他自己的用户密码来完成 sudo 授权。输入命令之后会出现输入密码（并不是超级用户密码）的提示，授权成功（只要赋予了用户运行该命令的权限）的话，指定的命令就会运行。&lt;/p&gt;
&lt;p&gt;系统管理员必须编辑 /etc/sudoers 文件，才能为 sudo 赋予相应权限。通常建议使用 visudo 命令来编辑这个文件，而不是使用文本编辑器来打开它。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# visudo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样会使用 vim（你可以按照 &lt;a href=&quot;https://linux.cn/article-7165-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LFCS 系列第二讲：如何安装和使用纯文本编辑器 vi/vim&lt;/a&gt; 里边说的来编辑文件）来打开 /etc/sudoers 文件。&lt;/p&gt;
&lt;p&gt;以下是需要设置的相关的行：&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Defaults&lt;/span&gt;    secure_path=&lt;span class=&quot;string&quot;&gt;&quot;/usr/sbin:/usr/bin:/sbin&quot;&lt;/span&gt;root        &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;=(&lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;) ALLtecmint     &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;=/bin/yum updategacanepa    &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;=NOPASSWD:/bin/updatedb%admin      &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;=(&lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;) &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;来更加深入了解这些项：&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Defaults&lt;/span&gt;    secure_path=&lt;span class=&quot;string&quot;&gt;&quot;/usr/sbin:/usr/bin:/sbin:/usr/local/bin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一行指定 sudo 将要使用的目录，这样可以阻止使用某些用户指定的目录，那样的话可能会危及系统。&lt;/p&gt;
&lt;p&gt;下一行是用来指定权限的：&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;root&lt;/span&gt;        &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;=(&lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;) &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;第一个 ALL 关键词表明这条规则适用于所有主机。&lt;/li&gt;
&lt;li&gt;第二个 ALL 关键词表明第一个字段中所指定的用户能以任何用户身份的权限来运行相应命令。&lt;/li&gt;
&lt;li&gt;第三个 ALL 关键词表明可以运行任何命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;tecmint&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;ALL&lt;/span&gt;=/bin/yum update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 = 号后边没有指定用户，sudo 则默认为 root 用户。本例中，tecmint 用户能以 root 身份运行 yum update 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gacanepa    ALL=&lt;span class=&quot;string&quot;&gt;NOPASSWD:&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/bin/&lt;/span&gt;updatedb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NOPASSWD 关键词表明 gacanepa 用户不需要密码，可以直接运行 /bin/updatedb 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%admin      &lt;span class=&quot;built_in&quot;&gt;ALL&lt;/span&gt;=(&lt;span class=&quot;built_in&quot;&gt;ALL&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;% 符号表示该行应用于 admin 用户组。其他部分的含义与对于用户的含义是一样的。本例表示 admin 用户组的成员可以通过任何主机连接来运行任何命令。&lt;/p&gt;
&lt;p&gt;通过 sudo -l 命令可以查看，你的账户拥有什么样的权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201606/02/105825kbmytbiydibd74ze.png&quot; alt=&quot;Sudo 访问规则&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sudo 访问规则&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于 Linux 是一个多用户的操作系统（允许多个用户通过不同主机或者终端访问一个独立系统），因此你需要知道如何才能有效地管理用户：如何添加、编辑、禁用和删除用户账户，并赋予他们足以完成自身任务的必要权限。&lt;/p&gt;
&lt;p&gt;（LCTT 译注：本篇原文章节顺序有误，根据理解做了
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 07：通过 SysVinit、Systemd 和 Upstart 管理系统自启动进程和服务</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-07/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-07/</id>
    <published>2016-07-29T14:04:35.000Z</published>
    <updated>2016-07-29T15:05:44.453Z</updated>
    
    <content type="html">&lt;h3 id=&quot;管理-Linux-自启动进程&quot;&gt;&lt;a href=&quot;#管理-Linux-自启动进程&quot; class=&quot;headerlink&quot; title=&quot;管理 Linux 自启动进程&quot;&gt;&lt;/a&gt;管理 Linux 自启动进程&lt;/h3&gt;&lt;p&gt;Linux 系统的启动程序包括多个阶段，每个阶段由一个不同的图示块表示。下面的图示简要总结了启动过程以及所有包括的主要组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220704vq89jz89hi79mqm1.png&quot; alt=&quot;Linux 启动过程&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Linux 启动过程&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当你按下你机器上的电源键时，存储在主板 EEPROM 芯片中的固件初始化 POST(通电自检) 检查系统硬件资源的状态。POST 结束后，固件会搜索并加载位于第一块可用磁盘上的 MBR 或 EFI 分区的第一阶段引导程序，并把控制权交给引导程序。&lt;/p&gt;
&lt;h4 id=&quot;MBR-方式&quot;&gt;&lt;a href=&quot;#MBR-方式&quot; class=&quot;headerlink&quot; title=&quot;MBR 方式&quot;&gt;&lt;/a&gt;MBR 方式&lt;/h4&gt;&lt;p&gt;MBR 是位于 BIOS 设置中标记为可启动磁盘上的第一个扇区，大小是 512 个字节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前面 446 个字节：包括可执行代码和错误信息文本的引导程序&lt;/li&gt;
&lt;li&gt;接下来的 64 个字节：四个分区（主分区或扩展分区）中每个分区一条记录的分区表。其中，每条记录标示了每个一个分区的状态（是否活跃）、大小以及开始和结束扇区。&lt;/li&gt;
&lt;li&gt;最后 2 个字节： MBR 有效性检查的魔法数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的命令对 MBR 进行备份（在本例中，/dev/sda 是第一块硬盘）。结果文件 mbr.bkp 在分区表被破坏、例如系统不可引导时能排上用场。&lt;/p&gt;
&lt;p&gt;当然，为了后面需要的时候能使用它，我们需要把它保存到别的地方（例如一个 USB 设备）。该文件能帮助我们重新恢复 MBR，这只在我们操作过程中没有改变硬盘驱动布局时才有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备份 MBR&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dd &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt;=/dev/sda of&lt;span class=&quot;symbol&quot;&gt;=mbr&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;bkp &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bs=512 &lt;/span&gt;count&lt;span class=&quot;number&quot;&gt;=1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220706dqzkk0hg99p90zhg.png&quot; alt=&quot;在 Linux 中备份 MBR&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在 Linux 中备份 MBR&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;恢复 MBR&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dd &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;=mbr&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;bkp &lt;/span&gt;of=/dev/sda &lt;span class=&quot;keyword&quot;&gt;bs=512 &lt;/span&gt;count&lt;span class=&quot;number&quot;&gt;=1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220708qh26the8c820e270.png&quot; alt=&quot;在 Linux 中恢复 MBR&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在 Linux 中恢复 MBR&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;EFI-UEFI-方式&quot;&gt;&lt;a href=&quot;#EFI-UEFI-方式&quot; class=&quot;headerlink&quot; title=&quot;EFI/UEFI 方式&quot;&gt;&lt;/a&gt;EFI/UEFI 方式&lt;/h4&gt;&lt;p&gt;对于使用 EFI/UEFI 方式的系统， UEFI 固件读取它的设置来决定从哪里启动哪个 UEFI 应用。（例如， EFI 分区位于哪块磁盘或分区。&lt;/p&gt;
&lt;p&gt;接下来，加载并运行第二阶段引导程序(又名引导管理器)。GRUB[GRand Unified Boot] 是 Linux 中最常使用的引导管理器。今天大部分使用的系统中都能找到它两个中的其中一个版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GRUB 有效配置文件： /boot/grub/menu.lst（旧发行版， EFI/UEFI 固件不支持）。&lt;/li&gt;
&lt;li&gt;GRUB2 配置文件： 通常是 /etc/default/grub。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管 LFCS 考试目标没有明确要求了解 GRUB 内部知识，但如果你足够大胆并且不怕把你的系统搞乱（为了以防万一，你可以先在虚拟机上进行尝试）你可以运行：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# update-grub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了使更改生效，你需要以 root 用户修改 GRUB 的配置。&lt;/p&gt;
&lt;p&gt;首先， GRUB 加载默认的内核以及 initrd 或 initramfs 镜像。补充一句，initrd 或者 initramfs 帮助完成硬件检测、内核模块加载、以及发现挂载根目录文件系统需要的设备。&lt;/p&gt;
&lt;p&gt;一旦真正的根目录文件系统启动，为了显示用户界面，内核就会执行系统和服务管理器（init 或 systemd，进程号 PID 一般为 1）开始普通用户态的引导程序。&lt;/p&gt;
&lt;p&gt;init 和 systemd 都是管理其它守护进程的守护进程（后台进程），它们总是最先启动（系统引导时），最后结束（系统关闭时）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220710s7dekedg5y5odeys.png&quot; alt=&quot;Systemd 和 Init&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Systemd 和 Init&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;自启动服务-SysVinit&quot;&gt;&lt;a href=&quot;#自启动服务-SysVinit&quot; class=&quot;headerlink&quot; title=&quot;自启动服务(SysVinit)&quot;&gt;&lt;/a&gt;自启动服务(SysVinit)&lt;/h3&gt;&lt;p&gt;Linux 中运行等级通过控制运行哪些服务来以不同方式使用系统。换句话说，运行等级控制着当前执行状态下可以完成什么任务（以及什么不能完成）。&lt;/p&gt;
&lt;p&gt;传统上，这个启动过程是基于起源于 System V Unix 的形式，通过执行脚本启动或者停止服务从而使机器进入指定的运行等级(换句话说，是一个不同的系统运行模式)。&lt;/p&gt;
&lt;p&gt;在每个运行等级中，独立服务可以设置为运行、或者在运行时关闭。一些主流发行版的最新版本中，已经移除了标准的 System V，而用一个称为 systemd（表示系统守护进程）的新服务和系统管理器代替，但为了兼容性，通常也支持 sysv 命令。这意味着你可以在基于 systemd 的发行版中运行大部分有名的 sysv 初始化工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推荐阅读： &lt;a href=&quot;http://www.tecmint.com/systemd-replaces-init-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 为什么用 ‘systemd’ 代替 ‘init’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了启动系统进程，init 还会查看 /etc/inittab 来决定进入哪个运行等级。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Runlevel&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;停止系统。运行等级 0 是一个用于快速关闭系统的特殊过渡状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;别名为 s 或 S，这个运行等级有时候也称为维护模式。在这个运行等级启动的服务由于发行版不同而不同。通常用于正常系统操作损坏时低级别的系统维护。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;多用户。在 Debian 系统及其衍生版中，这是默认的运行等级，还包括了一个图形化登录（如果有的话）。在基于红帽的系统中，这是没有网络的多用户模式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;在基于红帽的系统中，这是默认的多用户模式，运行除了图形化环境以外的所有东西。基于 Debian 的系统中通常不会使用这个运行等级以及等级 4 和 5。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;通常默认情况下不使用，可用于自定制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;基于红帽的系统中，支持 GUI 登录的完全多用户模式。这个运行等级和等级 3 类似，但是有可用的 GUI 登录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;重启系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;要在运行等级之间切换，我们只需要使用 init 命令更改运行等级：init N（其中 N 是上面列出的一个运行等级）。 请注意这并不是运行中的系统切换运行等级的推荐方式，因为它不会给已经登录的用户发送警告（因而导致他们丢失工作以及进程异常终结）。&lt;/p&gt;
&lt;p&gt;相反，应该用 shutdown 命令重启系统（它首先发送警告信息给所有已经登录的用户，并锁住任何新的登录；然后再给 init 发送信号切换运行等级）但是，首先要在 /etc/inittab 文件中设置好默认的运行等级（系统引导到的等级）。&lt;/p&gt;
&lt;p&gt;因为这个原因，按照下面的步骤切当地切换运行等级。以 root 用户在 /etc/inittab 中查找下面的行。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:2&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:initdefault&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并用你喜欢的文本编辑器，例如 vim（本系列的 &lt;a href=&quot;https://linux.cn/article-7165-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LFCS 系列第二讲：如何安装和使用纯文本编辑器 vi/vim&lt;/a&gt;），更改数字 2 为想要的运行等级。&lt;/p&gt;
&lt;p&gt;然后，以 root 用户执行&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# shutdown -r now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一个命令会重启系统，并使它在下一次引导时进入指定的运行等级，并会执行保存在 /etc/rc[runlevel].d 目录中的脚本以决定应该启动什么服务、不应该启动什么服务。例如，在下面的系统中运行等级 2。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220717k99keazaefmaa9sr.jpg&quot; alt=&quot;在 Linux 中更改运行等级&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在 Linux 中更改运行等级&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用-chkconfig-管理服务&quot;&gt;&lt;a href=&quot;#使用-chkconfig-管理服务&quot; class=&quot;headerlink&quot; title=&quot;使用 chkconfig 管理服务&quot;&gt;&lt;/a&gt;使用 chkconfig 管理服务&lt;/h4&gt;&lt;p&gt;为了在启动时启动或者停用系统服务，我们可以在 CentOS / openSUSE 中使用 &lt;a href=&quot;http://www.tecmint.com/chkconfig-command-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chkconfig 命令&lt;/a&gt;，在 Debian 及其衍生版中使用 sysv-rc-conf 命令。这个工具还能告诉我们对于一个指定的运行等级预先配置的状态是什么。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推荐阅读： &lt;a href=&quot;http://www.tecmint.com/remove-unwanted-services-from-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何在 Linux 中停止和停用不想要的服务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;列出某个服务的运行等级配置。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;postfix#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mysqld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220718e0ziipbi0p08vwoi.png&quot; alt=&quot;列出运行等级配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;列出运行等级配置&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;从上图中我们可以看出，当系统进入运行等级 2 到 5 的时候就会启动 postfix，而默认情况下运行等级 2 到 4 时会运行 mysqld。现在假设我们并不希望如此。&lt;/p&gt;
&lt;p&gt;例如，我们希望运行等级为 5 时也启动 mysqld，运行等级为 4 或 5 时关闭 postfix。下面分别针对两种情况进行设置（以 root 用户执行以下命令）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为特定运行等级启用服务&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level(s)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;on#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mysqld&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为特定运行等级停用服务&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level(s)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;off#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;chkconfig&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;off&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220720yi9b3yfi8mkq8sy8.png&quot; alt=&quot;启用/停用服务&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;启用/停用服务&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们在基于 Debian 的系统中使用 sysv-rc-conf 完成类似任务。&lt;/p&gt;
&lt;h4 id=&quot;使用-sysv-rc-conf-管理服务&quot;&gt;&lt;a href=&quot;#使用-sysv-rc-conf-管理服务&quot; class=&quot;headerlink&quot; title=&quot;使用 sysv-rc-conf 管理服务&quot;&gt;&lt;/a&gt;使用 sysv-rc-conf 管理服务&lt;/h4&gt;&lt;p&gt;配置服务自动启动时进入指定运行等级，同时禁止启动时进入其它运行等级。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我们可以用下面的命令查看启动 mdadm 时的运行等级。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;l&lt;/span&gt; /etc/rc[0-6].&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; | grep -&lt;span class=&quot;keyword&quot;&gt;E&lt;/span&gt; &#39;rc[0-6]|mdadm&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220723kkwn3antwgwgihph.png&quot; alt=&quot;查看运行中服务的运行等级&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看运行中服务的运行等级&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们使用 sysv-rc-conf 设置防止 mdadm 在运行等级2 之外的其它等级启动。只需根据需要（你可以使用上下左右按键）选中或取消选中（通过空格键）。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# sysv-rc-conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220727xenennd8x0nom838.png&quot; alt=&quot;Sysv 运行等级配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sysv 运行等级配置&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;然后输入 q 退出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启系统并从步骤 1 开始再操作一遍。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;l&lt;/span&gt; /etc/rc[0-6].&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; | grep -&lt;span class=&quot;keyword&quot;&gt;E&lt;/span&gt; &#39;rc[0-6]|mdadm&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220731voz9eughblhu3hhz.png&quot; alt=&quot;验证服务运行等级&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;验证服务运行等级&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;从上图中我们可以看出 mdadm 配置为只在运行等级 2 上启动。&lt;/p&gt;
&lt;h3 id=&quot;那关于-systemd-呢？&quot;&gt;&lt;a href=&quot;#那关于-systemd-呢？&quot; class=&quot;headerlink&quot; title=&quot;那关于 systemd 呢？&quot;&gt;&lt;/a&gt;那关于 systemd 呢？&lt;/h3&gt;&lt;p&gt;systemd 是另外一个被多种主流 Linux 发行版采用的服务和系统管理器。它的目标是允许系统启动时多个任务尽可能并行（而 sysvinit 并非如此，sysvinit 一般比较慢，因为它每次只启动一个进程，而且会检查彼此之间是否有依赖，在启动其它服务之前还要等待守护进程启动），充当运行中系统动态资源管理的角色。&lt;/p&gt;
&lt;p&gt;因此，服务只在需要的时候启动，而不是系统启动时毫无缘由地启动（为了防止消耗系统资源）。&lt;/p&gt;
&lt;p&gt;要查看你系统中运行的原生 systemd 服务和 Sysv 服务，可以用以下的命令。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# systemctl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220738ljodjop7t3d39924.png&quot; alt=&quot;查看运行中的进程&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看运行中的进程&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;LOAD 一列显示了单元（UNIT 列，显示服务或者由 systemd 维护的其它进程）是否正确加载，ACTIVE 和 SUB 列则显示了该单元当前的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示服务当前状态的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当 ACTIVE 列显示某个单元状态并非活跃时，我们可以使用以下命令查看具体原因。&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# systemctl &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;unit&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如，上图中 media-samba.mount 处于失败状态。我们可以运行：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# systemctl status media-samba.mount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220741u2qzr2dgp1y012pp.png&quot; alt=&quot;查看服务状态&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;查看服务状态&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到 media-samba.mount 失败的原因是 host dev1 上的挂载进程无法找到 //192.168.0.10/gacanepa 上的共享网络。&lt;/p&gt;
&lt;h3 id=&quot;启动或停止服务&quot;&gt;&lt;a href=&quot;#启动或停止服务&quot; class=&quot;headerlink&quot; title=&quot;启动或停止服务&quot;&gt;&lt;/a&gt;启动或停止服务&lt;/h3&gt;&lt;p&gt;一旦 //192.168.0.10/gacanepa 上的共享网络可用，我们可以再来尝试启动、停止以及重启 media-samba.mount 单元。执行每次操作之后，我们都执行 systemctl stats media-samba.mout 来查看它的状态。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;media-samba&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.mount&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;media-samba&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.mount&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;media-samba&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.mount&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;media-samba&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.mount&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;media-samba&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.mount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220752nolmn6lblbz2l96o.jpg&quot; alt=&quot;启动停止服务&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;启动停止服务&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启用或停用某服务随系统启动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 systemd 你可以在系统启动时启用或停用某服务&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# systemctl enable &lt;span class=&quot;string&quot;&gt;[service]&lt;/span&gt;        # 启用服务# systemctl disable &lt;span class=&quot;string&quot;&gt;[service]&lt;/span&gt;       # 阻止服务随系统启动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启用或停用某服务随系统启动包括在 /etc/systemd/system/multi-user.target.wants 目录添加或者删除符号链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201605/19/220803gv0y99jy0w8j05lw.jpg&quot; alt=&quot;启用或停用服务&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;启用或停用服务&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你也可以用下面的命令查看某个服务的当前状态（启用或者停用）。&lt;/p&gt;
&lt;figure class=&quot;highlight inform7&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# systemctl &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;-enabled &lt;span class=&quot;comment&quot;&gt;[service]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# systemctl &lt;span class=&quot;built_in&quot;&gt;is&lt;/span&gt;-enabled &lt;span class=&quot;built_in&quot;&gt;postfix&lt;/span&gt;.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，你可以用下面的命令重启或者关闭系统。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# systemctl reboot# systemctl shutdown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Upstart&quot;&gt;&lt;a href=&quot;#Upstart&quot; class=&quot;headerlink&quot; title=&quot;Upstart&quot;&gt;&lt;/a&gt;Upstart&lt;/h3&gt;&lt;p&gt;基于事件的 Upstart 是 /sbin/init 守护进程的替代品，它仅为在需要那些服务的时候启动服务而生，（或者当它们在运行时管理它们），以及处理发生的实践，因此 Upstart 优于基于依赖的 sysvinit 系统。&lt;/p&gt;
&lt;p&gt;一开始它是为 Ubuntu 发行版开发的，但在红帽企业版 Linux 6.0 中得到使用。尽管希望它能在所有 Linux 发行版中替代 sysvinit，但它已经被 systemd 超越。2014 年 2 月 14 日，Mark Shuttleworth（Canonical Ltd. 创建者）发布声明之后的 Ubuntu 发行版采用 systemd 作为默认初始化守护进程。&lt;/p&gt;
&lt;p&gt;由于 Sysv 启动脚本已经流行很长时间了，很多软件包中都包括了 Sysv 启动脚本。为了兼容这些软件， Upstart 提供了兼容模式：它可以运行保存在常用位置（/etc/rc.d/rc?.d, /etc/init.d/rc?.d, /etc/rc?.d或其它类似的位置）的Sysv 启动脚本。因此，如果我们安装了一个还没有 Upstart 配置脚本的软件，仍然可以用原来的方式启动它。&lt;/p&gt;
&lt;p&gt;另外，如果我们还安装了类似 &lt;a href=&quot;http://www.tecmint.com/chkconfig-command-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chkconfig&lt;/a&gt; 的工具，你还可以和在基于 sysvinit 的系统中一样用它们管理基于 Sysv 的服务。&lt;/p&gt;
&lt;p&gt;Upstart 脚本除了支持 Sysv 启动脚本，还支持基于多种方式启动或者停用服务；例如， Upstart 可以在一个特定硬件设备连接上的时候启动一个服务。&lt;/p&gt;
&lt;p&gt;使用 Upstart以及它原生脚本的系统替换了 /etc/inittab 文件和 /etc/init 目录下和运行等级相关的以 .conf 作为后缀的 Sysv 启动脚本目录。&lt;/p&gt;
&lt;p&gt;这些 *.conf 脚本（也称为任务定义）通常包括以下几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程描述&lt;/li&gt;
&lt;li&gt;进程的运行等级或者应该触发它们的事件&lt;/li&gt;
&lt;li&gt;应该停止进程的运行等级或者触发停止进程的事件&lt;/li&gt;
&lt;li&gt;选项&lt;/li&gt;
&lt;li&gt;启动进程的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# My test service - Upstart script demo description &lt;span class=&quot;string&quot;&gt;&quot;Here goes the description of &#39;My test service&#39;&quot;&lt;/span&gt; author &lt;span class=&quot;string&quot;&gt;&quot;Dave Null &amp;lt;dave.null@example.com&amp;gt;&quot;&lt;/span&gt;# Stanzas## Stanzas define &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; how a &lt;span class=&quot;keyword&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; started &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; stopped# See a list &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; stanzas here: http://upstart.ubuntu.com/wiki/Stanzas#respawn# &lt;span class=&quot;keyword&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; start the servicestart &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; runlevel [&lt;span class=&quot;number&quot;&gt;2345&lt;/span&gt;]# &lt;span class=&quot;keyword&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; stop the servicestop &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; runlevel [&lt;span class=&quot;number&quot;&gt;016&lt;/span&gt;]# Automatically restart &lt;span class=&quot;keyword&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; crashrespawn# Specify working directorychdir /home/dave/myfiles# Specify the &lt;span class=&quot;keyword&quot;&gt;process&lt;/span&gt;/command (add arguments &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; needed) &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; runexec bash backup.sh arg1 arg2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要使更改生效，你要让 upstart 重新加载它的配置文件。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# initctl reload-configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后用下面的命令启动你的任务。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo &lt;span class=&quot;literal&quot;&gt;start&lt;/span&gt; yourjobname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 yourjobname 是之前 yourjobname.conf 脚本中添加的任务名称。&lt;/p&gt;
&lt;p&gt;关于 Upstart 更完整和详细的介绍可以参考该项目网站的 “&lt;a href=&quot;http://upstart.ubuntu.com/cookbook/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cookbook&lt;/a&gt;” 栏目。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;管理-Linux-自启动进程&quot;&gt;&lt;a href=&quot;#管理-Linux-自启动进程&quot; class=&quot;headerlink&quot; title=&quot;管理 Linux 自启动进程&quot;&gt;&lt;/a&gt;管理 Linux 自启动进程&lt;/h3&gt;&lt;p&gt;Linux 系统的启动程序包括多个阶段，每个
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 06：组装分区为RAID设备——创建和管理系统备份</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-06/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-06/</id>
    <published>2016-07-29T14:04:30.000Z</published>
    <updated>2016-07-29T14:58:08.007Z</updated>
    
    <content type="html">&lt;h3 id=&quot;了解RAID&quot;&gt;&lt;a href=&quot;#了解RAID&quot; class=&quot;headerlink&quot; title=&quot;了解RAID&quot;&gt;&lt;/a&gt;了解RAID&lt;/h3&gt;&lt;p&gt;这种被称为独立磁盘冗余阵列（Redundant Array of Independent Disks）(RAID)的技术是将多个硬盘组合成一个单独逻辑单元的存储解决方案，它提供了数据冗余功能并且改善硬盘的读写操作性能。&lt;/p&gt;
&lt;p&gt;然而，实际的容错和磁盘 I/O 性能硬盘取决于如何将多个硬盘组装成磁盘阵列。根据可用的设备和容错/性能的需求，RAID 被分为不同的级别，你可以参考 RAID 系列文章以获得每个 RAID 级别更详细的解释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://linux.cn/article-6085-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 Linux 下使用 RAID（一）：介绍 RAID 的级别和概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们选择用于创建、组装、管理、监视软件 RAID 的工具，叫做 mdadm (multiple disk admin 的简写）。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;Debian&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;及衍生版&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;aptitude&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;aptitude&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;Hat&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;和基于&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;CentOS&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;的系统&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;openSUSE&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;上&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;zypper&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;zypper&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;将分区组装成-RAID-设备&quot;&gt;&lt;a href=&quot;#将分区组装成-RAID-设备&quot; class=&quot;headerlink&quot; title=&quot;将分区组装成 RAID 设备&quot;&gt;&lt;/a&gt;将分区组装成 RAID 设备&lt;/h4&gt;&lt;p&gt;组装已有分区作为 RAID 设备的过程由以下步骤组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 使用 mdadm 创建阵列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果先前其中一个分区已经格式化，或者作为了另一个 RAID 阵列的一部分，你会被提示以确认创建一个新的阵列。假设你已经采取了必要的预防措施以避免丢失重要数据，那么可以安全地输入 Y 并且按下回车。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/md0&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level=stripe&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;raid&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdb1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdc1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222344q1889bbk5n869592.png&quot; alt=&quot;创建 RAID 阵列&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;创建 RAID 阵列&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 检查阵列的创建状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在创建了 RAID 阵列之后，你可以检查使用以下命令检查阵列的状态。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cat &lt;span class=&quot;regexp&quot;&gt;/proc/m&lt;/span&gt;dstator# mdadm --detail &lt;span class=&quot;regexp&quot;&gt;/dev/m&lt;/span&gt;d0    [More detailed summary]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222348pxren45x9z57pzbu.png&quot; alt=&quot;检查 RAID 阵列的状态&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查 RAID 阵列的状态&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 格式化 RAID 设备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如本系列&lt;a href=&quot;https://linux.cn/article-7187-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第四讲&lt;/a&gt;所介绍的，按照你的需求/要求采用某种文件系统格式化你的设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 监控 RAID 阵列服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让监控服务时刻监视你的 RAID 阵列。把&lt;code&gt;# mdadm --detail --scan&lt;/code&gt;命令输出结果添加到 &lt;code&gt;/etc/mdadm/mdadm.conf&lt;/code&gt;(Debian及其衍生版)或者&lt;code&gt;/etc/mdadm.conf&lt;/code&gt;(Cent0S/openSUSE)，如下。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;scan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222354jdhnm2wyasnzhmv3.png&quot; alt=&quot;监控 RAID 阵列&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;监控 RAID 阵列&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mdadm --assemble --scan     [Assemble the array]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了确保服务能够开机启动，需要以 root 权限运行以下命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debian 及其衍生版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Debian 及其衍生版能够通过下面步骤使服务默认开机启动：&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;-rc.&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; mdadm defaults&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;/etc/default/mdadm&lt;/code&gt; 文件中添加下面这一行&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;AUTOSTART&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;CentOS 和 openSUSE(systemd-based)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# systemctl start mdmonitor# systemctl enable mdmonitor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;CentOS 和 openSUSE(SysVinit-based)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# service mdmonitor start# chkconfig mdmonitor on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;5. 检查RAID磁盘故障&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在支持冗余的的 RAID 级别中，在需要时会替换故障的驱动器。当磁盘阵列中的设备出现故障时，仅当存在我们第一次创建阵列时预留的备用设备时，磁盘阵列会将自动启动重建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222400usjj5mzsxvwvql2n.png&quot; alt=&quot;检查 RAID 故障磁盘&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查 RAID 故障磁盘&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;否则，我们需要手动将一个额外的物理驱动器插入到我们的系统，并且运行。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mdadm &lt;span class=&quot;regexp&quot;&gt;/dev/m&lt;/span&gt;d0 --add &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdX1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;/dev/md0 是出现了问题的阵列，而 /dev/sdx1 是新添加的设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 拆解一个工作阵列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你需要使用工作阵列的设备创建一个新的阵列，你可能不得不去拆解已有工作阵列——(可选步骤)&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mdadm --stop /dev/md0                 #  Stop the array# mdadm --remove /dev/md0             # Remove the RAID device# mdadm --zero-superblock /dev/sdX1     # Overwrite the existing md superblock with zeroes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;7. 设置邮件通知&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以配置一个用于发送通知的有效邮件地址或者系统账号(确保在 mdadm.conf 文件中有下面这一行)。——(可选步骤)&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MAILADDR&lt;/span&gt; root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这种情况下，来自 RAID 后台监控程序所有的通知将会发送到你的本地 root 账号的邮件箱中。其中一个类似的通知如下。&lt;/p&gt;
&lt;p&gt;说明：此次通知事件和第5步中的例子相关。此处一个设备被标志为错误，并且一个空闲的设备自动地被 mdadm 加入到阵列。我们用完了所有“健康的”空闲设备，因此我们得到了通知。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222403ao1rbkmzdh5iplm9.png&quot; alt=&quot;RAID 监控通知&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;RAID 监控通知&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;了解-RAID-级别&quot;&gt;&lt;a href=&quot;#了解-RAID-级别&quot; class=&quot;headerlink&quot; title=&quot;了解 RAID 级别&quot;&gt;&lt;/a&gt;了解 RAID 级别&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;RAID 0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阵列总大小是最小分区大小的 n 倍，n 是阵列中独立磁盘的个数(你至少需要两个驱动器/磁盘)。运行下面命令，使用 /dev/sdb1 和 /dev/sdc1 分区组装一个 RAID 0 阵列。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/md0&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level=stripe&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;raid&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdb1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdc1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常见用途：用于支持性能比容错更重要的实时应用程序的设置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAID 1 (又名镜像)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阵列总大小等于最小分区大小(你至少需要两个驱动器/磁盘)。运行下面命令，使用 /dev/sdb1 和 /dev/sdc1 分区组装一个 RAID 1 阵列。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/md0&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level=1&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;raid&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdb1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdc1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常见用途：操作系统的安装或者重要的子文件夹，例如 /home&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAID 5 (又名奇偶校验码盘)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阵列总大小将是最小分区大小的 (n-1) 倍。所减少的大小用于奇偶校验(冗余)计算(你至少需要3个驱动器/磁盘)。&lt;/p&gt;
&lt;p&gt;说明：你可以指定一个空闲设备 (/dev/sde1) 替换问题出现时的故障部分(分区)。运行下面命令，使用 /dev/sdb1, /dev/sdc1, /dev/sdd1，/dev/sde1 组装一个 RAID 5 阵列，其中 /dev/sde1 作为空闲分区。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/md0&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level=5&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;raid&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=3&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdb1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdc1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdd1&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sde1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常见用途：Web 和文件服务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAID 6 (又名双重奇偶校验码盘)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阵列总大小为(n&lt;em&gt;s)-2&lt;/em&gt;s，其中n为阵列中独立磁盘的个数，s为最小磁盘大小。&lt;/p&gt;
&lt;p&gt;说明：你可以指定一个空闲分区(在这个例子为 /dev/sdf1)替换问题出现时的故障部分(分区)。&lt;/p&gt;
&lt;p&gt;运行下面命令，使用 /dev/sdb1, /dev/sdc1, /dev/sdd1, /dev/sde1 和 /dev/sdf1 组装 RAID 6 阵列，其中 /dev/sdf1 作为空闲分区。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mdadm --create --verbose &lt;span class=&quot;regexp&quot;&gt;/dev/m&lt;/span&gt;d0 --level=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; --raid-devices=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdb1 &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdc1 &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdd1 &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sde --spare-devices=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sdf1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常见用途：大容量、高可用性要求的文件服务器和备份服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAID 1+0 (又名镜像条带)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为 RAID 1+0 是 RAID 0 和 RAID 1 的组合，所以阵列总大小是基于两者的公式计算的。首先，计算每一个镜像的大小，然后再计算条带的大小。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;mdadm&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/md0&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;level=10&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;raid&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sd&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;devices=1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/dev/sdf1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常见用途：需要快速 IO 操作的数据库和应用服务器&lt;/p&gt;
&lt;h4 id=&quot;创建和管理系统备份&quot;&gt;&lt;a href=&quot;#创建和管理系统备份&quot; class=&quot;headerlink&quot; title=&quot;创建和管理系统备份&quot;&gt;&lt;/a&gt;创建和管理系统备份&lt;/h4&gt;&lt;p&gt;记住， RAID 其所有的价值不是在于备份的替换者！在黑板上写上1000次，如果你需要的话，但无论何时一定要记住它。在我们开始前，我们必须注意的是，没有一个放之四海皆准的针对所有系统备份的解决方案，但这里有一些东西，是你在规划一个备份策略时需要考虑的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的系统将用于什么？(桌面或者服务器？如果系统是应用于后者，那么最重要的服务是什么？哪个配置是痛点？)&lt;/li&gt;
&lt;li&gt;你每隔多久备份你的系统？&lt;/li&gt;
&lt;li&gt;你需要备份的数据是什么(比如文件/文件夹/数据库转储)？你还可以考虑是否需要备份大型文件(比如音频和视频文件)。&lt;/li&gt;
&lt;li&gt;这些备份将会存储在哪里(物理位置和媒体)？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;备份你的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法1：使用 dd 命令备份整个磁盘。你可以在任意时间点通过创建一个准确的镜像来备份一整个硬盘或者是分区。注意当设备是离线时，这种方法效果最好，也就是说它没有被挂载并且没有任何进程的 I/O 操作访问它。&lt;/p&gt;
&lt;p&gt;这种备份方法的缺点是镜像将具有和磁盘或分区一样的大小，即使实际数据占用的是一个很小的比例。比如，如果你想要为只使用了10%的20GB的分区创建镜像，那么镜像文件将仍旧是20GB。换句话来讲，它不仅包含了备份的实际数据，而且也包含了整个分区。如果你想完整备份你的设备，那么你可以考虑使用这个方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从现有的设备创建一个镜像文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dd &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;=&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sda of=&lt;span class=&quot;regexp&quot;&gt;/system_images/&lt;/span&gt;sda.img或者--------------------- 可选地，你可以压缩镜像文件 -------------------# dd &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;=&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sda | gzip -c &amp;gt; &lt;span class=&quot;regexp&quot;&gt;/system_images/&lt;/span&gt;sda.img.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;从镜像文件恢复备份&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# dd &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;=&lt;span class=&quot;regexp&quot;&gt;/system_images/&lt;/span&gt;sda.img of=&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sda或者--------------------- 根据你创建镜像文件时的选择(译者注:比如压缩) ----------------# gzip -dc &lt;span class=&quot;regexp&quot;&gt;/system_images/&lt;/span&gt;sda.img.gz | dd of=&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;sda&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法2：使用 tar 命令备份确定的文件/文件夹——已经在本系列&lt;a href=&quot;https://linux.cn/article-7171-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第三讲&lt;/a&gt;中讲了。如果你想要备份指定的文件/文件夹(配置文件，用户主目录等等)，你可以使用这种方法。&lt;/p&gt;
&lt;p&gt;方法3：使用 rsync 命令同步文件。rsync 是一种多功能远程（和本地）文件复制工具。如果你想要从网络设备备份或同步文件，rsync 是一种选择。&lt;/p&gt;
&lt;p&gt;无论是你是正在同步两个本地文件夹还是本地 &amp;lt; — &amp;gt; 挂载在本地文件系统的远程文件夹，其基本语法是一样的。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# rsync -av source_directory destination_directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，-a 递归遍历子目录(如果它们存在的话)，维持符号链接、时间戳、权限以及原本的属主/属组，-v 显示详细过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222405x8a94kkqyffay9sp.png&quot; alt=&quot;rsync 同步文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rsync 同步文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;除此之外，如果你想增加在网络上传输数据的安全性，你可以通过 ssh 协议使用 rsync。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过 ssh 同步本地到远程文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rsync -avzhe ssh backups root&lt;span class=&quot;doctag&quot;&gt;@remote&lt;/span&gt;_host:/remote_directory/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个示例，本地主机上的 backups 文件夹将与远程主机上的 /root/remote_directory 的内容同步。&lt;/p&gt;
&lt;p&gt;在这里，-h 选项以易读的格式显示文件的大小，-e 标志用于表示一个 ssh 连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/15/222410w0r0bcclcgtgc3cf.png&quot; alt=&quot;rsync 同步远程文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rsync 同步远程文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过ssh同步远程到本地文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，交换前面示例中的 source 和 destination 文件夹。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rsync -avzhe ssh root&lt;span class=&quot;doctag&quot;&gt;@remote&lt;/span&gt;_host:/remote_directory/ backups&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意这些只是 rsync 用法的三个示例而已(你可能遇到的最常见的情形)。对于更多有关 rsync 命令的示例和用法 ，你可以查看下面的文章。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/rsync-local-remote-file-synchronization-commands/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 Linux 下同步文件的10个 rsync命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;了解RAID&quot;&gt;&lt;a href=&quot;#了解RAID&quot; class=&quot;headerlink&quot; title=&quot;了解RAID&quot;&gt;&lt;/a&gt;了解RAID&lt;/h3&gt;&lt;p&gt;这种被称为独立磁盘冗余阵列（Redundant Array of Independent Disks）(RA
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 05：如何在 Linux 中挂载/卸载本地文件系统和网络文件系统（Samba 和 NFS）</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-05/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-05/</id>
    <published>2016-07-29T14:04:25.000Z</published>
    <updated>2016-07-29T14:57:17.084Z</updated>
    
    <content type="html">&lt;h3 id=&quot;挂载文件系统&quot;&gt;&lt;a href=&quot;#挂载文件系统&quot; class=&quot;headerlink&quot; title=&quot;挂载文件系统&quot;&gt;&lt;/a&gt;挂载文件系统&lt;/h3&gt;&lt;p&gt;在个硬盘分好区之后，Linux 需要通过某些方式对硬盘分区上的数据进行访问。Linux 并不会像 DOS 或者 Windows 那样给每个硬盘分区分配一个字母来作为盘符，而是将硬盘分区挂载到统一的目录树上的挂载点。&lt;/p&gt;
&lt;p&gt;挂载点是一个目录，挂载是一种访问分区上文件系统的方法，挂载文件系统实际上是将一个确切的文件系统（比如一个分区）和目录树中指定的目录联系起来的过程。&lt;/p&gt;
&lt;p&gt;换句话说，管理存储设备的第一步就是把设备关联到文件系统树。要完成这一步，通常可以这样：用 mount 命令来进行临时挂载（用完的时候，使用 umount 命令来卸载），或者通过编辑 /etc/fstab 文件之后重启系统来永久性挂载，这样每次开机都会进行挂载。&lt;/p&gt;
&lt;p&gt;不带任何选项的 mount 命令，可以显示当前已挂载的文件系统。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# mount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083734afzlpfl896fopcqr.png&quot; alt=&quot;检查已挂载的文件系统&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查已挂载的文件系统&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;另外，mount 命令通常用来挂载文件系统。其基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mount -t &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; device &lt;span class=&quot;built_in&quot;&gt;dir&lt;/span&gt; -o options&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会指引内核将在设备上找到的文件系统（如已格式化为指定类型的文件系统）挂载到指定目录。像这样的形式，mount 命令不会再到 /etc/fstab 文件中进行确认。&lt;/p&gt;
&lt;p&gt;除非像下面，挂载指定的目录或者设备：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mount /dir -o &lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt;或# mount device -o &lt;span class=&quot;keyword&quot;&gt;options&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mount 命令会尝试寻找挂载点，如果找不到就会查找设备（上述两种情况下，mount 命令会在 /etc/fstab 查找相应的设备或挂载点），最后尝试完成挂载操作（这个通常可以成功执行，除非你的挂载点或者设备正在使用中，或者你调用 mount 命令的时候没有 root 权限）。&lt;/p&gt;
&lt;p&gt;你可以看到，mount 命令的每行输出都是如下格式：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;device&lt;/span&gt; on directory &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; (options)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/dev/mapper/debian-home on /home &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ext4 (rw,relatime,user_xattr,barrier=1,data=ordered)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;读作：&lt;/p&gt;
&lt;p&gt;设备 dev/mapper/debian-home 挂载在 /home 下，它被格式化为 ext4，并且有以下挂载选项： rw，relatime，user_xattr，barrier=1，data=ordered。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mount 命令选项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面列出 mount 命令的常用选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async：允许在将要挂载的文件系统上进行异步 I/O 操作&lt;/li&gt;
&lt;li&gt;auto：标示该文件系统通过 mount -a 命令挂载，与 noauto 相反。&lt;/li&gt;
&lt;li&gt;defaults：该选项相当于 &lt;code&gt;async,auto,dev,exec,nouser,rw,suid&lt;/code&gt; 的组合。注意，多个选项必须由逗号隔开并且中间没有空格。倘若你不小心在两个选项中间输入了一个空格，mount 命令会把后边的字符解释为另一个参数。&lt;/li&gt;
&lt;li&gt;loop：将镜像文件（如 .iso 文件）挂载为 loop 设备。该选项可以用来模拟显示光盘中的文件内容。&lt;/li&gt;
&lt;li&gt;noexec：阻止该文件系统中可执行文件的执行。与 exec 选项相反。&lt;/li&gt;
&lt;li&gt;nouser：阻止任何用户（除 root 用户外） 挂载或卸载文件系统。与 user 选项相反。&lt;/li&gt;
&lt;li&gt;remount：重新挂载文件系统。&lt;/li&gt;
&lt;li&gt;ro：只读模式挂载。&lt;/li&gt;
&lt;li&gt;rw：读写模式挂载。&lt;/li&gt;
&lt;li&gt;relatime：只要访问时间早于修改时间，就更新文件的的访问时间。&lt;/li&gt;
&lt;li&gt;user_xattr：允许用户设置和移除可扩展文件系统属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以 ro 和 noexec 模式挂载设备&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# mount -t ext4 /dev/sdg1 /mnt -o ro,noexec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在本例中，我们可以看到，在挂载点 /mnt 中尝试写入文件或者运行可执行文件都会显示相应的错误信息。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# touch &lt;span class=&quot;regexp&quot;&gt;/mnt/my&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;# &lt;span class=&quot;regexp&quot;&gt;/mnt/&lt;/span&gt;bin&lt;span class=&quot;regexp&quot;&gt;/echo “Hi there”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083734uzm5q55ewemrsm5q.png&quot; alt=&quot;可读写模式挂载设备&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;可读写模式挂载设备&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以默认模式挂载设备&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下场景，我们在重新挂载设备的挂载点中，像上例一样尝试你写入文件和运行可执行文件。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# mount -t ext4 /dev/sdg1 /mnt -o defaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083735vrwasmt1pwrkvr1t.png&quot; alt=&quot;挂载设备&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;挂载设备&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，我们发现写入文件和命令都完美执行了。&lt;/p&gt;
&lt;h3 id=&quot;卸载设备&quot;&gt;&lt;a href=&quot;#卸载设备&quot; class=&quot;headerlink&quot; title=&quot;卸载设备&quot;&gt;&lt;/a&gt;卸载设备&lt;/h3&gt;&lt;p&gt;使用 umount 命令卸载设备，意味着将所有的“在使用”数据全部写入到文件系统，然后可以安全移除文件系统。请注意，倘若你移除一个没有事先正确卸载的设备，就会有造成设备损坏和数据丢失的风险。&lt;/p&gt;
&lt;p&gt;也就是说，你必须“离开”设备的块设备描述符或者挂载点，才能卸载设备。换言之，你的当前工作目录不能是需要卸载设备的挂载点。否则，系统将返回设备繁忙的提示信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083735la66phyyjhopkojp.png&quot; alt=&quot;卸载设备&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;卸载设备&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;离开需卸载设备的挂载点最简单的方法就是，运行不带任何选项的 cd 命令，这样会回到当前用户的家目录。&lt;/p&gt;
&lt;h3 id=&quot;挂载常见的网络文件系统&quot;&gt;&lt;a href=&quot;#挂载常见的网络文件系统&quot; class=&quot;headerlink&quot; title=&quot;挂载常见的网络文件系统&quot;&gt;&lt;/a&gt;挂载常见的网络文件系统&lt;/h3&gt;&lt;p&gt;最常用的两种网络文件系统是 SMB（服务器消息块Server Message Block）和 NFS（网络文件系统Network File System）。如果你只向类 Unix 客户端提供共享，用 NFS 就可以了，如果是向 Windows 和其他类 Unix 客户端提供共享服务，就需要用到 Samba 了。&lt;/p&gt;
&lt;p&gt;扩展阅读&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/setup-samba-server-using-tdbsam-backend-on-rhel-centos-6-3-5-8-and-fedora-17-12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setup Samba Server in RHEL/CentOS and Fedora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/how-to-setup-nfs-server-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up NFS (Network File System) on RHEL/CentOS/Fedora and Debian/Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的例子中，假设 Samba 和 NFS 已经在地址为 192.168.0.10 的服务器上架设好了（请注意，架设 NFS 服务器也是 LFCS 考试中需要考核的能力，我们会在后边中提到）。&lt;/p&gt;
&lt;h4 id=&quot;在-Linux-中挂载-Samba-共享&quot;&gt;&lt;a href=&quot;#在-Linux-中挂载-Samba-共享&quot; class=&quot;headerlink&quot; title=&quot;在 Linux 中挂载 Samba 共享&quot;&gt;&lt;/a&gt;在 Linux 中挂载 Samba 共享&lt;/h4&gt;&lt;p&gt;第一步：在 Red Hat 以 Debian 系发行版中安装 samba-client、samba-common 和 cifs-utils 软件包，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# yum update &amp;amp;&amp;amp; yum install samba-client samba-&lt;span class=&quot;meta&quot;&gt;common&lt;/span&gt; cifs-utils# aptitude update &amp;amp;&amp;amp; aptitude install samba-client samba-&lt;span class=&quot;meta&quot;&gt;common&lt;/span&gt; cifs-utils&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后运行下列命令，查看服务器上可用的 Samba 共享。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;smbclient&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-L&lt;/span&gt; 192&lt;span class=&quot;selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并输入远程机器上 root 账户的密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083735n0tuv0bpr8snpt8b.png&quot; alt=&quot;挂载 Samba 共享&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;挂载 Samba 共享&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上图中，已经对可以挂载到我们本地系统上的共享进行高亮显示。你只需要与一个远程服务器上的合法用户名及密码就可以访问共享了。&lt;/p&gt;
&lt;p&gt;第二步：当挂载有密码保护的网络文件系统时候，将你的访问凭证写入到 /etc/fstab 文件中并非明智的选择。你需要将这些信息写入到具有 600 权限的隐藏文件中，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mkdir &lt;span class=&quot;regexp&quot;&gt;/media/&lt;/span&gt;samba# echo “username=samba_username” &amp;gt; &lt;span class=&quot;regexp&quot;&gt;/media/&lt;/span&gt;samba&lt;span class=&quot;regexp&quot;&gt;/.smbcredentials# echo “password=samba_password” &amp;gt;&amp;gt; /m&lt;/span&gt;edia&lt;span class=&quot;regexp&quot;&gt;/samba/&lt;/span&gt;.smbcredentials# chmod &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/media/&lt;/span&gt;samba&lt;span class=&quot;regexp&quot;&gt;/.smbcredentials&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第三步：然后将下面的内容添加到 /etc/fstab 文件中。&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;comment&quot;&gt;//192.168.0.10/gacanepa /media/samba cifs credentials=/media/samba/.smbcredentials,defaults 0 0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第四步：现在可以挂载你的 Samba 共享了。手动挂载（mount //192.168.0.10/gacanepa）或者重启系统并应用 /etc/fstab 中相应行来用就挂载都可以。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083736v77ptst9rhocsc7t.png&quot; alt=&quot;挂载有密码保护的 Samba 共享&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;挂载有密码保护的 Samba 共享&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;在-Linux-系统中挂载-NFS-共享&quot;&gt;&lt;a href=&quot;#在-Linux-系统中挂载-NFS-共享&quot; class=&quot;headerlink&quot; title=&quot;在 Linux 系统中挂载 NFS 共享&quot;&gt;&lt;/a&gt;在 Linux 系统中挂载 NFS 共享&lt;/h4&gt;&lt;p&gt;第一步：在 Red Hat 以 Debian 系发行版中安装 nfs-common 和 portmap 软件包。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# yum update &amp;amp;&amp;amp; yum install &lt;span class=&quot;built_in&quot;&gt;nfs&lt;/span&gt;-utils &lt;span class=&quot;built_in&quot;&gt;nfs&lt;/span&gt;-utils-lib# aptitude update &amp;amp;&amp;amp; aptitude install &lt;span class=&quot;built_in&quot;&gt;nfs&lt;/span&gt;-common&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二步：为 NFS 共享创建挂载点。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# mkdir /media/nfs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第三步：将下面的内容添加到 /etc/fstab 文件中。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/NFS-SHARE&lt;/span&gt; /media/nfs nfs defaults &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第四步：现在可以挂载你的 Samba 共享了。手动挂载（mount 192.168.0.10:/NFS-SHARE）或者重启系统并应用 /etc/fstab 中相应行来用就挂载都可以。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/11/083737p4rbohatc5b6cfib.png&quot; alt=&quot;挂载 NFS 共享&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;挂载 NFS 共享&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;永久性挂载文件系统&quot;&gt;&lt;a href=&quot;#永久性挂载文件系统&quot; class=&quot;headerlink&quot; title=&quot;永久性挂载文件系统&quot;&gt;&lt;/a&gt;永久性挂载文件系统&lt;/h3&gt;&lt;p&gt;像前面两个例子那样，/etc/fstab 控制着Linux如何访问硬盘分区及可移动设备。/etc/fstab 由六个字段的内容组成，各个字段之间通过一个空格符或者制表符来分开。井号（#）开始的行只是会被忽略的注释。&lt;/p&gt;
&lt;p&gt;每一行都按照这个格式来写入：&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;&amp;lt;file system&amp;gt;&lt;/span&gt; &lt;span class=&quot;section&quot;&gt;&amp;lt;mount point&amp;gt;&lt;/span&gt; &lt;span class=&quot;section&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt; &lt;span class=&quot;section&quot;&gt;&amp;lt;options&amp;gt;&lt;/span&gt; &lt;span class=&quot;section&quot;&gt;&amp;lt;dump&amp;gt;&lt;/span&gt; &lt;span class=&quot;section&quot;&gt;&amp;lt;pass&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;file system=&quot;&quot;&gt;: 第一个字段指定挂载的设备。大多数发行版本都通过分区的标卷（label）或者 UUID 来指定。这样做可以避免分区号改变时带来的错误。&lt;/file&gt;&lt;/li&gt;
&lt;li&gt;&lt;mount point=&quot;&quot;&gt;: 第二个字段指定挂载点。&lt;/mount&gt;&lt;/li&gt;
&lt;li&gt;&lt;type&gt; ：文件系统的类型代码与 mount 命令挂载文件系统时使用的类型代码是一样的。通过 auto 类型代码可以让内核自动检测文件系统，这对于可移动设备来说非常方便。注意，该选项可能不是对所有文件系统可用。&lt;/type&gt;&lt;/li&gt;
&lt;li&gt;&lt;options&gt;: 一个（或多个）挂载选项。&lt;/options&gt;&lt;/li&gt;
&lt;li&gt;&lt;dump&gt;: 你可能把这个字段设置为 0（否则设置为 1），使得系统启动时禁用 dump 工具（dump 程序曾经是一个常用的备份工具，但现在越来越少用了）对文件系统进行备份。&lt;/dump&gt;&lt;/li&gt;
&lt;li&gt;&lt;pass&gt;: 这个字段指定启动系统是是否通过 fsck 来检查文件系统的完整性。0 表示 fsck 不对文件系统进行检查。数字越大，优先级越低。因此，根分区（/）最可能使用数字 1，其他所有需要检查的分区则是以数字 2.&lt;/pass&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mount 命令例示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、在系统启动时，通过 TECMINT 标卷来挂载文件系统，并具备 rw 和 noexec 属性，你应该将以下语句添加到 /etc/fstab 文件中。&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;LABEL&lt;/span&gt;=TECMINT /mnt ext4 rw,noexec &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、若你想在系统启动时挂载 DVD 光驱中的内容，添加以下语句。&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;/dev/&lt;/span&gt;sr0 &lt;span class=&quot;meta-keyword&quot;&gt;/media/&lt;/span&gt;cdrom0 iso9660 ro,user,noauto &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 /dev/sr0 为你的 DVD 光驱。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;挂载文件系统&quot;&gt;&lt;a href=&quot;#挂载文件系统&quot; class=&quot;headerlink&quot; title=&quot;挂载文件系统&quot;&gt;&lt;/a&gt;挂载文件系统&lt;/h3&gt;&lt;p&gt;在个硬盘分好区之后，Linux 需要通过某些方式对硬盘分区上的数据进行访问。Linux 并不会像 DOS 或
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 04：对存储设备分区、格式化文件系统和配置交换分区</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-04/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-04/</id>
    <published>2016-07-29T14:04:21.000Z</published>
    <updated>2016-07-29T14:56:12.968Z</updated>
    
    <content type="html">&lt;h3 id=&quot;对存储设备分区&quot;&gt;&lt;a href=&quot;#对存储设备分区&quot; class=&quot;headerlink&quot; title=&quot;对存储设备分区&quot;&gt;&lt;/a&gt;对存储设备分区&lt;/h3&gt;&lt;p&gt;分区是一种将单独的硬盘分成一个或多个区的手段。一个分区只是硬盘的一部分，我们可以认为这部分是独立的磁盘，里边包含一个单一类型的文件系统。分区表则是将硬盘上这些分区与分区标识符联系起来的索引。&lt;/p&gt;
&lt;p&gt;在 Linux 上，IBM PC 兼容系统里边用于管理传统 MBR（用到2009年）分区的工具是 fdisk。对于 GPT（2010年至今）分区，我们使用 gdisk。这两个工具都可以通过程序名后面加上设备名称（如 /dev/sdb）进行调用。&lt;/p&gt;
&lt;h4 id=&quot;使用-fdisk-管理-MBR-分区&quot;&gt;&lt;a href=&quot;#使用-fdisk-管理-MBR-分区&quot; class=&quot;headerlink&quot; title=&quot;使用 fdisk 管理 MBR 分区&quot;&gt;&lt;/a&gt;使用 fdisk 管理 MBR 分区&lt;/h4&gt;&lt;p&gt;我们先来介绍 fdisk：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# fdisk /dev/sdb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后出现提示说进行下一步操作。若不确定如何操作，按下 “m” 键显示帮助。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052349vh0iosthplod5jiq.png&quot; alt=&quot;fdisk 帮助菜单&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;fdisk 帮助菜单&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上图中，使用频率最高的选项已高亮显示。你可以随时按下 “p” 显示分区表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052351wdx8ogb2kdhg5zkx.png&quot; alt=&quot;显示分区表&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;显示分区表&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Id 列显示由 fdisk 分配给每个分区的分区类型（分区 id）。一个分区类型代表一种文件系统的标识符，简单来说，包括该分区上数据的访问方法。&lt;/p&gt;
&lt;p&gt;请注意，每个分区类型的全面讲解将超出了本教程的范围——本系列教材主要专注于 LFCS 测试，以考试为主。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面列出一些 fdisk 常用选项：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按下 “l”（小写 L）选项来显示所有可以由 fdisk 管理的分区类型。&lt;/p&gt;
&lt;p&gt;按下 “d” 可以删除现有的分区。若硬盘上有多个分区，fdisk 将询问你要删除那个分区。&lt;/p&gt;
&lt;p&gt;键入对应的数字，并按下 “w” 保存更改（将更改写入分区表）。&lt;/p&gt;
&lt;p&gt;在下图的命令中，我们将删除 /dev/sdb2，然后显示（p）分区表来验证更改。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052353nphfjfjf6j1hvnzl.png&quot; alt=&quot;fdisk 命令选项&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;fdisk 命令选项&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;按下 “n” 后接着按下 “p” 会创建新一个主分区。最后，你可以使用所有的默认值（这将占用所有的可用空间），或者像下面一样自定义分区大小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052355f0a3jjppj9uxbaua.png&quot; alt=&quot;创建新分区&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;创建新分区&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;若 fdisk 分配的分区 Id 并不是我们想用的，可以按下 “t” 来更改。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052357pdqrotrrtrj10ov2.png&quot; alt=&quot;更改分区类型&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;更改分区类型&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;全部设置好分区后，按下 “w” 将更改保存到硬盘分区表上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052358fjghg3it1oig4ih0.png&quot; alt=&quot;保存分区更改&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;保存分区更改&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用-gdisk-管理-GPT-分区&quot;&gt;&lt;a href=&quot;#使用-gdisk-管理-GPT-分区&quot; class=&quot;headerlink&quot; title=&quot;使用 gdisk 管理 GPT 分区&quot;&gt;&lt;/a&gt;使用 gdisk 管理 GPT 分区&lt;/h4&gt;&lt;p&gt;下面的例子中，我们使用 /dev/sdb。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# gdisk /dev/sdb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;必须注意的是，gdisk 可以用于创建 MBR 和 GPT 两种分区表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052359wttf81v84mzjj1u8.png&quot; alt=&quot;创建 GPT 分区&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;创建 GPT 分区&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用 GPT 分区方案，我们可以在同一个硬盘上创建最多 128 个分区，单个分区最大以 PB 为单位，而 MBR 分区方案最大的只能 2TB。&lt;/p&gt;
&lt;p&gt;注意，fdisk 与 gdisk 中大多数命令都是一样的。因此，我们不会详细介绍这些命令选项，而是给出一张使用过程中的截图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052401jndri4wwzkfi9w1w.png&quot; alt=&quot;gdisk 命令选项&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gdisk 命令选项&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;格式化文件系统&quot;&gt;&lt;a href=&quot;#格式化文件系统&quot; class=&quot;headerlink&quot; title=&quot;格式化文件系统&quot;&gt;&lt;/a&gt;格式化文件系统&lt;/h3&gt;&lt;p&gt;一旦创建完需要的分区，我们就必须为分区创建文件系统。查询你所用系统支持的文件系统，请运行：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# ls /sbin/mk*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052403mudh1vuw1cx0qdsw.png&quot; alt=&quot;检查文件系统类型&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;检查文件系统类型&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;选择文件系统取决于你的需求。你应该考虑到每个文件系统的优缺点以及其特点。选择文件系统需要看的两个重要属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志支持，允许从系统崩溃事件中快速恢复数据。&lt;/li&gt;
&lt;li&gt;安全增强式 Linux（SELinux）支持，按照项目 wiki 所说，“安全增强式 Linux 允许用户和管理员更好的控制访问控制权限”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在接下来的例子中，我们通过 mkfs 在 /dev/sdb1 上创建 ext4 文件系统（支持日志和 SELinux），标卷为 Tecmint。mkfs 基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mkfs -t &lt;span class=&quot;string&quot;&gt;[filesystem]&lt;/span&gt; -L &lt;span class=&quot;string&quot;&gt;[label]&lt;/span&gt; device或者# mkfs.&lt;span class=&quot;string&quot;&gt;[filesystem]&lt;/span&gt; -L &lt;span class=&quot;string&quot;&gt;[label]&lt;/span&gt; device&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052406lvtvyrztb7kymx9v.png&quot; alt=&quot;创建 ext4 文件系统&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;创建 ext4 文件系统&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建并启用交换分区&quot;&gt;&lt;a href=&quot;#创建并启用交换分区&quot; class=&quot;headerlink&quot; title=&quot;创建并启用交换分区&quot;&gt;&lt;/a&gt;创建并启用交换分区&lt;/h3&gt;&lt;p&gt;要让 Linux 系统访问虚拟内存，则必须有一个交换分区，当内存（RAM）用完的时候，将硬盘中指定分区（即 Swap 分区）当做内存来使用。因此，当有足够的系统内存（RAM）来满足系统的所有的需求时，我们并不需要划分交换分区。尽管如此，是否使用交换分区取决于管理员。&lt;/p&gt;
&lt;p&gt;下面列出选择交换分区大小的经验法则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;物理内存不高于 2GB 时，取两倍物理内存大小即可；物理内存在 2GB 以上时，取一倍物理内存大小即可；并且所取大小应该大于 32MB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果：&lt;/p&gt;
&lt;p&gt;M为物理内存大小，S 为交换分区大小，单位 GB，那么：&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;若 &lt;span class=&quot;keyword&quot;&gt;M&lt;/span&gt; &amp;lt; 2    S = &lt;span class=&quot;keyword&quot;&gt;M&lt;/span&gt; *2否则    S = &lt;span class=&quot;keyword&quot;&gt;M&lt;/span&gt; + 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记住，这只是基本的经验。对于作为系统管理员的你，才是决定是否使用交换分区及其大小的关键。&lt;/p&gt;
&lt;p&gt;要配置交换分区，首先要划分一个常规分区，大小像我们之前演示的那样来选取。然后添加以下条目到 /etc/fstab 文件中（其中的 X 要更改为对应的 b 或 c）。&lt;/p&gt;
&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/dev/sdX1 &lt;span class=&quot;keyword&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;swap&lt;/span&gt; sw &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，格式化并启用交换分区：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# mkswap /dev/sdX1&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;# swapon -v /dev/sdX1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显示交换分区的快照：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# cat /proc/swaps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关闭交换分区：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# swapoff /dev/sdX1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面的例子，我们会使用 fdisk 将 /dev/sdc1（512MB，系统和内存为 256MB）来设置交换分区，下面是我们之前详细提过的步骤。注意，这种情况下我们使用的是指定大小分区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052408cc688zfk1zz6opp6.png&quot; alt=&quot;创建交换分区&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;创建交换分区&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201604/04/052410nqiabadsn3376kwz.png&quot; alt=&quot;启用交换分区&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;启用交换分区&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对存储设备分区&quot;&gt;&lt;a href=&quot;#对存储设备分区&quot; class=&quot;headerlink&quot; title=&quot;对存储设备分区&quot;&gt;&lt;/a&gt;对存储设备分区&lt;/h3&gt;&lt;p&gt;分区是一种将单独的硬盘分成一个或多个区的手段。一个分区只是硬盘的一部分，我们可以认为这部分是独立的磁
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 03：归档/压缩文件及目录、设置文件属性和搜索文件</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-03/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-03/</id>
    <published>2016-07-29T14:04:14.000Z</published>
    <updated>2016-07-29T14:54:04.858Z</updated>
    
    <content type="html">&lt;h3 id=&quot;归档和压缩的相关工具&quot;&gt;&lt;a href=&quot;#归档和压缩的相关工具&quot; class=&quot;headerlink&quot; title=&quot;归档和压缩的相关工具&quot;&gt;&lt;/a&gt;归档和压缩的相关工具&lt;/h3&gt;&lt;p&gt;文件归档工具将一堆文件整合到一个单独的归档文件之后，我们可以将归档文件备份到不同类型的介质或者通过网络传输和发送 Email 来备份。在 Linux 中使用频率最高的归档实用工具是 tar。当归档工具和压缩工具一起使用的时候，可以减少同一文件和信息在硬盘中的存储空间。&lt;/p&gt;
&lt;h4 id=&quot;tar-使用工具&quot;&gt;&lt;a href=&quot;#tar-使用工具&quot; class=&quot;headerlink&quot; title=&quot;tar 使用工具&quot;&gt;&lt;/a&gt;tar 使用工具&lt;/h4&gt;&lt;p&gt;tar 将一组文件打包到一个单独的归档文件（通常叫做 tar 文件或者 tarball）。tar 这个名称最初代表磁带存档程序tape archiver，但现在我们可以用它来归档任意类型的可读写介质上边的数据，而不是只能归档磁带数据。tar 通常与 gzip、bzip2 或者 xz 等压缩工具一起使用，生成一个压缩的 tarball。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tar &lt;span class=&quot;string&quot;&gt;[选项]&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[路径名 ...]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 … 代表指定哪些文件进行归档操作的表达式&lt;/p&gt;
&lt;h4 id=&quot;tar-的常用命令&quot;&gt;&lt;a href=&quot;#tar-的常用命令&quot; class=&quot;headerlink&quot; title=&quot;tar 的常用命令&quot;&gt;&lt;/a&gt;tar 的常用命令&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;长选项&lt;/th&gt;
&lt;th&gt;简写&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-create&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;创建 tar 归档文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-concatenate&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;将一存档与已有的存档合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-append&lt;/td&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;把要存档的文件追加到归档文件的末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-update&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;更新新文件到归档文件中去&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-diff 或 -compare&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;比较存档与当前文件的不同之处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-file archive&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;使用档案文件或归档设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-list&lt;/td&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;列出 tarball 中的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-extract 或 -get&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;从归档文件中释放文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;常用的操作修饰符&quot;&gt;&lt;a href=&quot;#常用的操作修饰符&quot; class=&quot;headerlink&quot; title=&quot;常用的操作修饰符&quot;&gt;&lt;/a&gt;常用的操作修饰符&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;长选项&lt;/th&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-directory dir&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;执行归档操作前，先转到指定目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-same-permissions&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;保持原始的文件权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-verbose&lt;/td&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;列出所有的读取或提取的文件。但这个标识符与 -list 一起使用的时候，还会显示出文件大小、属主和时间戳的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-verify&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;写入存档后进行校验&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-exclude file&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不把指定文件包含在内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-exclude=pattern&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;以PATTERN模式排除文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gzip 或 -gunzip&lt;/td&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;通过gzip压缩归档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-bzip2&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;通过bzip2压缩归档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-xz&lt;/td&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;通过xz压缩归档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Gzip 是最古老的压缩工具，压缩率最小，bzip2 的压缩率稍微高一点。另外，xz 是最新的压缩工具，压缩率最好。xz 具有最佳压缩率的代价是：完成压缩操作花费最多时间，压缩过程中占有较多系统资源。&lt;/p&gt;
&lt;p&gt;通常，通过这些工具压缩的 tar 文件相应的具有 .gz、.bz2 或 .xz的扩展名。在下列的例子中，我们使用 file1、file2、file3、file4 和 file5 进行演示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过 gzip、bzip2 和 xz 压缩归档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;归档当前工作目录的所有文件，并以 gzip、bzip2 和 xz 压缩刚刚的归档文件（请注意，用正则表达式来指定哪些文件应该归档——这是为了防止将归档工具包前一步生成的文件打包进来）。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;czf&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[0-9]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;cjf&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bz2&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[0-9]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;cJf&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfile&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.xz&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[0-9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060134vs1uuyu23ag1yavk.png&quot; alt=&quot;压缩多个文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;压缩多个文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列举 tarball 中的内容和更新/追加文件到归档文件中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;列举 tarball 中的内容，并显示相同信息为一个详细目录清单。注意，不能直接向压缩的归档文件更新/追加文件（若你需要向压缩的 tarball 中更新/追加文件，需要先解压 tar 文件后再进行操作，然后重新压缩）。&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# tar tvf [tarball]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060135zzi6hlbo6ylmo0eh.png&quot; alt=&quot;列举归档文件中的内容&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;列举归档文件中的内容&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;运行一下任意一条命令：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[#1]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;bzip2&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bz2&lt;/span&gt;  &lt;span class=&quot;selector-attr&quot;&gt;[#2]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;xz&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.xz&lt;/span&gt;      &lt;span class=&quot;selector-attr&quot;&gt;[#3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后：&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(删除tarball中的file4)#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;file4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(更新tarball中的file4)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;      &lt;span class=&quot;selector-attr&quot;&gt;[ 如果你运行 #1 命令 ]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;bzip2&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;     &lt;span class=&quot;selector-attr&quot;&gt;[ 如果你运行 #2 命令 ]&lt;/span&gt;# &lt;span class=&quot;selector-tag&quot;&gt;xz&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;myfiles&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;        &lt;span class=&quot;selector-attr&quot;&gt;[ 如果你运行 #3 命令 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# tar tvf [tarball] #再次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将 file4 修改后的日期和时间与之前显示的对应信息进行比较&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;排除文件类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设你现在需要备份用户的家目录。一个有经验的系统管理员会选择忽略所有视频和音频文件再备份（也可能是公司规定）。&lt;/p&gt;
&lt;p&gt;可能你最先想到的方法是在备份的时候，忽略扩展名为 .mp3 和 .mp4（或者其他格式）的文件。但如果你有些自作聪明的用户将扩展名改为 .txt 或者 .bkp，那你的方法就不灵了。为了发现并排除音频或者视频文件，你需要先检查文件类型。以下 shell 脚本可以代你完成类型检查：&lt;/p&gt;
&lt;figure class=&quot;highlight smalltalk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash# 把需要进行备份的目录传递给 &lt;span class=&quot;string&quot;&gt;$1&lt;/span&gt; 参数.&lt;span class=&quot;type&quot;&gt;DIR&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;$1&lt;/span&gt;# 排除文件类型中包含了 mpeg 字符串的文件，然后创建 tarball 并进行压缩。# -若文件类型中包含 mpeg 字符串， &lt;span class=&quot;string&quot;&gt;$?&lt;/span&gt;（最后执行的命令的退出状态）返回 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;，然后文件名被定向到排除选项。否则返回 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;。# -若 &lt;span class=&quot;string&quot;&gt;$?&lt;/span&gt; 等于 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;，该文件从需要备份文件的列表排除。tar &lt;span class=&quot;type&quot;&gt;X&lt;/span&gt; &amp;lt;(for i in &lt;span class=&quot;string&quot;&gt;$D&lt;/span&gt;IR/*; do file &lt;span class=&quot;string&quot;&gt;$i&lt;/span&gt; | grep -i mpeg; if [ &lt;span class=&quot;string&quot;&gt;$?&lt;/span&gt; -eq &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ]; then echo &lt;span class=&quot;string&quot;&gt;$i&lt;/span&gt;; fi;done) -cjf backupfile.tar.bz2 &lt;span class=&quot;string&quot;&gt;$D&lt;/span&gt;IR/*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060136fle3keeeed4e4fem.png&quot; alt=&quot;排除文件进行备份&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;排除文件进行备份&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 tar 保持文件的原有权限进行恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过以下命令，你可以保留文件的权限将备份文件恢复到原始用户的家目录（本例是 user_restore）。&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;xjf&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;backupfile&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;tar&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;bz2&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;user_restore&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;same&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;permissions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060137gu536aywqqzua4o3.png&quot; alt=&quot;从归档文件中恢复&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;从归档文件中恢复&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展阅读：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/18-tar-command-examples-in-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;18 tar Command Examples in Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tecmint.com/dtrx-an-intelligent-archive-extraction-tar-zip-cpio-rpm-deb-rar-tool-for-linux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dtrx – An Intelligent Archive Tool for Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;通过-find-命令搜索文件&quot;&gt;&lt;a href=&quot;#通过-find-命令搜索文件&quot; class=&quot;headerlink&quot; title=&quot;通过 find 命令搜索文件&quot;&gt;&lt;/a&gt;通过 find 命令搜索文件&lt;/h3&gt;&lt;p&gt;find 命令用于递归搜索目录树中包含指定字符的文件和目录，然后在屏幕显示出于指定字符相匹配的文件和目录，或者在匹配项进行其他操作。&lt;/p&gt;
&lt;p&gt;通常，我们通过文件名、文件的属主、属组、类型权限、日期及大小来搜索。&lt;/p&gt;
&lt;h4 id=&quot;基本语法：&quot;&gt;&lt;a href=&quot;#基本语法：&quot; class=&quot;headerlink&quot; title=&quot;基本语法：&quot;&gt;&lt;/a&gt;基本语法：&lt;/h4&gt;&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# find &lt;span class=&quot;string&quot;&gt;[需搜索的目录]&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[表达式]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;通过文件大小递归搜索文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下命令会搜索当前目录（.）及其下两层子目录（-maxdepth 3，包含当前目录及往下两层的子目录）中大于 2 MB（-size +2M）的所有文件（-f）。&lt;/p&gt;
&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; . -maxdepth &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; f -size +&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;M&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060137g7kn5dyn47n2774i.png&quot; alt=&quot;Find Files by Size in Linux&quot;&gt; &lt;em&gt; 通过文件大小搜索文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find Files by Size in Linux&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;搜索符合一定规则的文件并将其删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有时候，777 权限的文件通常为外部攻击者打开便利之门。不管是以何种方式，让所有人都可以对文件进行任意操作都是不安全的。对此，我们采取一个相对激进的方法——删除这些文件（’{}’ + 用来“聚集”搜索的结果）。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/home/u&lt;/span&gt;ser -perm &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt; -exec rm &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125;&#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060138y7dxlpzxm3mgqgmm.png&quot; alt=&quot;搜索 777 权限的文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;搜索 777 权限的文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按访问时间和修改时间搜索文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搜索 /etc 目录下访问时间（-atime）或修改时间（-mtime）大于（+180）或小于（-180） 6 个月或者刚好（180） 6 个月的配置文件。&lt;/p&gt;
&lt;p&gt;按照下面例子对命令进行修改：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; /etc -iname &lt;span class=&quot;string&quot;&gt;&quot;*.conf&quot;&lt;/span&gt; -mtime -&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060139c70syyslkdqyyl9y.png&quot; alt=&quot;按修改时间搜索文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;按修改时间搜索文件&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展阅读： &lt;a href=&quot;http://www.tecmint.com/35-practical-examples-of-linux-find-command/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;35 Practical Examples of Linux ‘find’ Command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件权限及基本属性&quot;&gt;&lt;a href=&quot;#文件权限及基本属性&quot; class=&quot;headerlink&quot; title=&quot;文件权限及基本属性&quot;&gt;&lt;/a&gt;文件权限及基本属性&lt;/h3&gt;&lt;p&gt;ls -l 命令输出的前 10 位字符是文件的属性，其中第一个字符用来表明文件的类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;– : 普通文件&lt;/li&gt;
&lt;li&gt;-d : 目录&lt;/li&gt;
&lt;li&gt;-l : 符号链接&lt;/li&gt;
&lt;li&gt;-c : 字符设备 (它将数据作为字节流处理，如terminal)&lt;/li&gt;
&lt;li&gt;-b : 块设备 (在块设备中处理数据，如存储设备)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来表示文件属性的 9 位字符叫做文件的读写模式，代表文件属主、同组用户和其他用户（通常指的是“外部世界”）对应的读（r）、写（w）和执行（x）权限。&lt;/p&gt;
&lt;p&gt;文件的写权限允许对应的用户对文件进行打开和读写，对于同时设置了执行权限的目录，对应用户可以列举出该目录的内容。另外，文件的执行权限允许将文件当做是一个可执行程序来运行，而目录的执行权限则是允许用户进入和退出该目录。&lt;/p&gt;
&lt;p&gt;文件的权限通过 chown 命令来更改，其基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod [new_mode] file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;new_mode 可以是 3 位八进制数值或者对应权限的表达式。&lt;/p&gt;
&lt;p&gt;八进制数值可以从二进制数值进行等值转换，通过下列方法来计算文件属主、同组用户和其他用户权限对应的二进制数值：&lt;/p&gt;
&lt;p&gt;一个确定权限的二进制数值表现为 2 的幂（r=2^2，w=2^1，x=2^0），当权限省缺时，二进制数值为 0。如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060139dd60ep3ndk447xdf.png&quot; alt=&quot;文件权限&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;文件权限&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用八进制数值设置上图的文件权限，请输入：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod 744 myfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 u、g 和 o 分别代表用户、同组用户和其他用户，然后你也可以使用权限表达式来单独对用户设置文件的权限模式。也可以通过 a 代表所有用户，然后设置文件权限。通过 + 号或者 - 号相应的赋予或移除文件权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为所有用户撤销一个 shell 脚本的执行权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正如之前解释的那样，我们可以通过 - 号为需要移除权限的属主、同组用户、其他用户或者所有用户去掉指定的文件权限。下面命令中的短横线（-）可以理解为：移除（-）所有用户（a）的 backup.sh 文件执行权限（x）。&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# chmod a-x backup.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面演示为文件属主、同组用户赋予读、写和执行权限，并赋予其他用户读权限。&lt;/p&gt;
&lt;p&gt;当我们使用 3 位八进制数值为文件设置权限的时候，第一位数字代表属主权限，第二位数字代表同组用户权限，第三位数字代表其他用户的权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属主：(r=2^2 + w=2^1 + x=2^0 = 7)&lt;/li&gt;
&lt;li&gt;同组用户：(r=2^2 + w=2^1 + x=2^0 = 7)&lt;/li&gt;
&lt;li&gt;其他用户：(r=2^2 + w=0 + x=0 = 4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chmod 774 myfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随着练习时间的推移，你会知道何种情况下使用哪种方式来更改文件的权限模式的效果最好。&lt;/p&gt;
&lt;p&gt;使用 ls -l 详细列举目录详细同样会显示出文件的属主和属组（这个很基本，而且影响到系统文件的访问控制）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/30/060140latew4zef3xt3ar6.png&quot; alt=&quot;列举 Linux 文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;列举 Linux 文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;通过 chown 命令可以对文件的归属权进行更改，可以同时或者分开更改属主和属组。其基本语法为：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# chown user:&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至少要指定用户或者用户组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举几个例子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将文件的属主更改为指定用户：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chown gacanepa sent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时将文件的属主和属组更改为指定的用户和组：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# chown gacanepa:gacanepa TestFile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只将文件的属组更改为指定组。注意组名前的冒号（:）。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;selector-tag&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;selector-pseudo&quot;&gt;:gacanepa&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;email_body&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;归档和压缩的相关工具&quot;&gt;&lt;a href=&quot;#归档和压缩的相关工具&quot; class=&quot;headerlink&quot; title=&quot;归档和压缩的相关工具&quot;&gt;&lt;/a&gt;归档和压缩的相关工具&lt;/h3&gt;&lt;p&gt;文件归档工具将一堆文件整合到一个单独的归档文件之后，我们可以将归档文件备份到
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 02：如何安装和使用纯文本编辑器 vi/vim</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-02/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-02/</id>
    <published>2016-07-29T14:03:49.000Z</published>
    <updated>2016-07-29T14:21:31.690Z</updated>
    
    <content type="html">&lt;h3 id=&quot;使用-vi-vim-执行基本的文件编辑操作&quot;&gt;&lt;a href=&quot;#使用-vi-vim-执行基本的文件编辑操作&quot; class=&quot;headerlink&quot; title=&quot;使用 vi/vim 执行基本的文件编辑操作&quot;&gt;&lt;/a&gt;使用 vi/vim 执行基本的文件编辑操作&lt;/h3&gt;&lt;p&gt;vi 是为 Unix 而生的第一个全屏文本编辑器。它的设计小巧简单，对于仅仅使用过诸如 NotePad++ 或 gedit 等图形界面的文本编辑器的用户来说，使用起来可能存在一些困难。&lt;/p&gt;
&lt;p&gt;为了使用 vi，我们必须首先理解这个强大的程序操作中的三种模式，方便我们后边学习这个强大的文本处理软件的相关操作。&lt;/p&gt;
&lt;p&gt;请注意，大多数的现代 Linux 发行版都集成了 vi 的变种——— vim（改进版 VIVi IMproved），相比于 vi，它有更多新功能。所以，我们会在本教程中交替使用 vi 和 vim。&lt;/p&gt;
&lt;p&gt;如果你的发行版还没有安装 vim，你可以通过以下方法来安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 及其衍生版：apt-get update &amp;amp;&amp;amp; apt-get install vim&lt;/li&gt;
&lt;li&gt;以 Red-Hat 为基础的发行版：yum update &amp;amp;&amp;amp; yum install vim&lt;/li&gt;
&lt;li&gt;openSUSE ：zypper update &amp;amp;&amp;amp; zypper install vim&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;我为什么要学习-vi&quot;&gt;&lt;a href=&quot;#我为什么要学习-vi&quot; class=&quot;headerlink&quot; title=&quot;我为什么要学习 vi&quot;&gt;&lt;/a&gt;我为什么要学习 vi&lt;/h3&gt;&lt;p&gt;至少有以下两个理由：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为它是 POSIX 标准的一部分，所以不管你使用什么发行版 vi 总是可用的。&lt;/li&gt;
&lt;li&gt;vi 基本不消耗多少系统资源，并且允许我们仅仅通过键盘来完成任何可能的任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，vi 有着非常丰富的内置帮助手册，程序打开后就可以通过 &lt;code&gt;:help&lt;/code&gt; 命令来查看。这个内置帮助手册比 vi/vim 的 man 页面包含了更多信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053547pjeg7wb5qwtzc0rc.png&quot; alt=&quot;vi Man 页面&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vi Man 页面&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;启动-vi&quot;&gt;&lt;a href=&quot;#启动-vi&quot; class=&quot;headerlink&quot; title=&quot;启动 vi&quot;&gt;&lt;/a&gt;启动 vi&lt;/h4&gt;&lt;p&gt;可以通过在命令提示符下输入 vi 来启动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053547utc985cm8c8n52nm.png&quot; alt=&quot;使用 vi 编辑器&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;使用 vi 编辑器&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;然后按下字母 i，你就可以开始输入了。或者通过下面的方法来启动 vi：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# vi filename&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样会打开一个名为 filename 的缓存区buffer（稍后会详细介绍缓存区），在你编辑完成之后就可以存储在磁盘中了。&lt;/p&gt;
&lt;h4 id=&quot;理解-vi-的三个模式&quot;&gt;&lt;a href=&quot;#理解-vi-的三个模式&quot; class=&quot;headerlink&quot; title=&quot;理解 vi 的三个模式&quot;&gt;&lt;/a&gt;理解 vi 的三个模式&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;在命令command模式中，vi 允许用户浏览该文件并输入由一个或多个字母组成的、简短的、大小写敏感的 vi 命令。这些命令的大部分都可以增加一个前缀数字表示执行次数。&lt;br&gt;比如：&lt;code&gt;yy&lt;/code&gt;（或&lt;code&gt;Y&lt;/code&gt;） 复制当前的整行，&lt;code&gt;3yy&lt;/code&gt;（或&lt;code&gt;3Y&lt;/code&gt;） 复制当前整行和下边紧接着的两行（总共3行）。通过 &lt;code&gt;Esc&lt;/code&gt;键可以随时进入命令模式（而不管当前工作在什么模式下）。事实上，在命令模式下，键盘上所有的输入都被解释为命令而非文本，这往往使得初学者困惑不已。&lt;/li&gt;
&lt;li&gt;在末行ex模式中，我们可以处理文件（包括保存当前文件和运行外部程序）。我们必须在命令模式下输入一个冒号（&lt;code&gt;:&lt;/code&gt;），才能进入这个模式，紧接着是要在末行模式下使用的命令。执行之后 vi 自动回到命令模式。&lt;/li&gt;
&lt;li&gt;在文本输入insert模式（通常在命令模式下使用字母 &lt;code&gt;i&lt;/code&gt; 进入这个模式）中，我们可以随意输入文本。大多数的键入将以文本形式输出到屏幕（一个重要的例外是&lt;code&gt;Esc&lt;/code&gt;键，它将退出文本编辑模式并回到命令模式）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053548zzn3t0oq01qtfq1a.png&quot; alt=&quot;vi 文本插入模式&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vi 文本插入模式&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;vi-命令&quot;&gt;&lt;a href=&quot;#vi-命令&quot; class=&quot;headerlink&quot; title=&quot;vi 命令&quot;&gt;&lt;/a&gt;vi 命令&lt;/h4&gt;&lt;p&gt;下面的表格列出常用的 vi 命令。文件编辑的命令可以通过添加叹号的命令强制执行（如，&lt;code&gt;:q!&lt;/code&gt; 命令强制退出编辑器而不保存文件）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;关键命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;h&lt;/code&gt; 或 ←&lt;/td&gt;
&lt;td&gt;光标左移一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;j&lt;/code&gt; 或 ↓&lt;/td&gt;
&lt;td&gt;光标下移一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;k&lt;/code&gt; 或 ↑&lt;/td&gt;
&lt;td&gt;光标上移一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;l&lt;/code&gt; (小写字母 L) 或 →&lt;/td&gt;
&lt;td&gt;光标右移一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标移至屏幕顶行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标移至屏幕末行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标移至文件末行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标右移一个词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标左移一个词&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt; (数字零)&lt;/td&gt;
&lt;td&gt;光标移至行首&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标移至当前行第一个非空格字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;光标移至当前行行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl-B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向后翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl-F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向前翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在光标所在位置插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;I&lt;/code&gt; (大写字母 i)&lt;/td&gt;
&lt;td&gt;在当前行首插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;J&lt;/code&gt; (大写字母 j)&lt;/td&gt;
&lt;td&gt;将下一行与当前行合并（下一行上移到当前行）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在光标所在位置后追加文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;o&lt;/code&gt; (小写字母 O)&lt;/td&gt;
&lt;td&gt;在当前行下边插入空白行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;O&lt;/code&gt; (大写字母 O)&lt;/td&gt;
&lt;td&gt;在当前行上边插入空白行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;替换光标所在位置的一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从光标所在位置开始覆盖插入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除光标所在位置的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;立即删除光标所在位置之前（左边）的一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剪切当前整行文本（为了之后进行粘贴）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剪切光标所在位置到行末的文本（该命令等效于 &lt;code&gt;d$&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;给出一个移动命令 X （如 &lt;code&gt;h&lt;/code&gt;、&lt;code&gt;j&lt;/code&gt;、&lt;code&gt;H&lt;/code&gt;、&lt;code&gt;L&lt;/code&gt; 等），复制适当数量的字符、单词或者从光标开始到一定数量的行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;yy&lt;/code&gt; 或 &lt;code&gt;Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;复制当前整行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;粘贴在光标所在位置之后（下一行）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;粘贴在光标所在位置之前（上一行）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt; (句点)&lt;/td&gt;
&lt;td&gt;重复最后一个命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;撤销最后一个命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;撤销最后一行的最后一个命令，只有光标仍在最后一行才能执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在查找中跳到下一个匹配项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在查找中跳到前一个匹配项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下一个文件，编辑多个指定文件时，该命令加载下一个文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:e file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加载新文件来替代当前文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:r file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将新文件的内容插入到光标所在位置的下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;退出并放弃更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:w file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将当期打开的缓存区保存为file。如果是追加到已存在的文件中，则使用 ：&lt;code&gt;w &amp;gt;&amp;gt; file&lt;/code&gt; 命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:wq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;保存当前文件的内容并退出。等效于 &lt;code&gt;x!&lt;/code&gt; 和 &lt;code&gt;ZZ&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:r! command&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行 command 命令，并将命令的输出插入到光标所在位置的下一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;vi-选项&quot;&gt;&lt;a href=&quot;#vi-选项&quot; class=&quot;headerlink&quot; title=&quot;vi 选项&quot;&gt;&lt;/a&gt;vi 选项&lt;/h4&gt;&lt;p&gt;下列选项可以让你在运行 Vim 的时候很方便（需要写入到 &lt;code&gt;~/.vimrc&lt;/code&gt; 文件）：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt; &amp;gt;&amp;gt; ~/.vimrc# &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &amp;gt;&amp;gt; ~/.vimrc# &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; tabstop=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;gt;&amp;gt; ~/.vimrc# &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; autoindent &amp;gt;&amp;gt; ~/.vimrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053548fbvu7v4ertee4ep4.png&quot; alt=&quot;vi编辑器选项&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vi编辑器选项&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set number 当 vi 打开或新建文件时，显示行号。&lt;/li&gt;
&lt;li&gt;syntax on 打开语法高亮（对应多个文件扩展名），以便源码文件和配置文件更具可读性。&lt;/li&gt;
&lt;li&gt;set tabstop=4 设置制表符间距为 4 个空格（默认为 8）。&lt;/li&gt;
&lt;li&gt;set autoindent 将前一行的缩进应用于下一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;查找和替换&quot;&gt;&lt;a href=&quot;#查找和替换&quot; class=&quot;headerlink&quot; title=&quot;查找和替换&quot;&gt;&lt;/a&gt;查找和替换&lt;/h4&gt;&lt;p&gt;vi 具有通过查找将光标移动到（在单独一行或者整个文件中的）指定位置。它还可自动或者通过用户确认来执行文本替换。&lt;/p&gt;
&lt;p&gt;a) 在行内查找。&lt;code&gt;f&lt;/code&gt; 命令在当前行查找指定字符，并将光标移动到指定字符出现的位置。&lt;/p&gt;
&lt;p&gt;例如，命令 &lt;code&gt;fh&lt;/code&gt; 会在本行中将光标移动到字母&lt;code&gt;h&lt;/code&gt;下一次出现的位置。注意，字母 &lt;code&gt;f&lt;/code&gt; 和你要查找的字符都不会出现在屏幕上，但是当你按下回车的时候，要查找的字符会被高亮显示。&lt;/p&gt;
&lt;p&gt;比如，以下是在命令模式按下 &lt;code&gt;f4&lt;/code&gt; 之后的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053548r3ceopcooec9ojkj.png&quot; alt=&quot;在 vi 中查找字符&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在 vi 中查找字符&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;b) 在整个文件内查找。使用 &lt;code&gt;/&lt;/code&gt; 命令，紧接着需要查找的单词或短语。这个查找可以通过使用 &lt;code&gt;n&lt;/code&gt; 命令或者 &lt;code&gt;N&lt;/code&gt; 重复查找上一个查找的字符串。以下是在命令模式键入 &lt;code&gt;/Jane&lt;/code&gt; 的查找结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053549r7ge0opbzpadbbdo.png&quot; alt=&quot;在 vi 中查找字符&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在 vi 中查找字符&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;c) vi 通过使用命令来完成多行或者整个文件的替换操作（类似于 sed）。我们可以使用以下命令，使得整个文件中的单词 “old” 替换为 “young”。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:%s/old/young/g&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：冒号位于命令的最前面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053549avni9nwn993ondir.png&quot; alt=&quot;vi 的查找和替换&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vi 的查找和替换&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;冒号 (&lt;code&gt;:&lt;/code&gt;) 进入末行模式，在本例中 &lt;code&gt;s&lt;/code&gt; 表示替换，&lt;code&gt;%&lt;/code&gt; 是从第一行到最后一行的表示方式（也可以使用 nm 表示范围，即第 n 行到第 m 行），old 是查找模式，young 是用来替换的文本，&lt;code&gt;g&lt;/code&gt; 表示在每个查找出来的字符串都进行替换。&lt;/p&gt;
&lt;p&gt;另外，在命令最后增加一个 &lt;code&gt;c&lt;/code&gt;，可以在每一个匹配项替换前进行确认。&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:%s/old/young/gc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将旧文本替换为新文本前，vi/vim 会向我们显示以下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053550azrb7tbuuu7brub5.png&quot; alt=&quot;vi 中替换字符串&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;vi 中替换字符串&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;: 执行替换（yes）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: 跳过这个匹配字符的替换并转到下一个（no）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: 在当前匹配字符及后边的相同项全部执行替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; 或 &lt;code&gt;Esc&lt;/code&gt;: 取消替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; (小写 L): 执行本次替换并退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-e&lt;/code&gt;, &lt;code&gt;Ctrl-y&lt;/code&gt;: 下翻页，上翻页，查看相应的文本来进行替换&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;同时编辑多个文件&quot;&gt;&lt;a href=&quot;#同时编辑多个文件&quot; class=&quot;headerlink&quot; title=&quot;同时编辑多个文件&quot;&gt;&lt;/a&gt;同时编辑多个文件&lt;/h4&gt;&lt;p&gt;我们在命令提示符输入 vim file1 file2 file3 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# vim file1 file2 file3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;vim 会首先打开 file1，要跳到 file2 需用 &lt;code&gt;:n&lt;/code&gt; 命令。当需要打开前一个文件时，&lt;code&gt;:N&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;为了从 file1 跳到 file3&lt;/p&gt;
&lt;p&gt;a) &lt;code&gt;:buffers&lt;/code&gt; 命令会显示当前正在编辑的文件列表&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:buffers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/29/053550mluqcbuqataceicf.png&quot; alt=&quot;编辑多个文件&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;编辑多个文件&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;b) &lt;code&gt;:buffer 3&lt;/code&gt; 命令（后边没有 s）会打开第三个文件 file3 进行编辑。&lt;/p&gt;
&lt;p&gt;在上边的图片中，标记符号 &lt;code&gt;#&lt;/code&gt; 表示该文件当前已被打开，但是是在后台，而 &lt;code&gt;%a&lt;/code&gt; 标记的文件是正在被编辑的。另外，文件号（如上边例子的 3）后边的空格表示该文件还没有被打开。&lt;/p&gt;
&lt;h4 id=&quot;vi-的临时缓存区&quot;&gt;&lt;a href=&quot;#vi-的临时缓存区&quot; class=&quot;headerlink&quot; title=&quot;vi 的临时缓存区&quot;&gt;&lt;/a&gt;vi 的临时缓存区&lt;/h4&gt;&lt;p&gt;（LCTT 译注：临时缓存区，也叫做“命名缓存区”，或“寄存器register”）&lt;/p&gt;
&lt;p&gt;为了复制连续的多行（比如，假设为 4 行）到一个名为 a 的临时缓存区（与文件无关），并且还要将这些行粘贴到在当前 vi 会话文件中的其它位置，我们需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按下 &lt;code&gt;Esc&lt;/code&gt; 键以确认 vi 处在命令模式&lt;/li&gt;
&lt;li&gt;将光标放在我们希望复制的第一行文本&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;&amp;quot;a4yy&lt;/code&gt; 复制当前行和接下来的 3 行，进入一个名为 a 的缓存区。我们可以继续编辑我们的文件————我们不需要立即插入刚刚复制的行。&lt;/li&gt;
&lt;li&gt;当到了需要使用刚刚复制的那些行的位置，在 &lt;code&gt;p&lt;/code&gt;(小写)或 &lt;code&gt;P&lt;/code&gt;(大写)命令前使用&lt;code&gt;&amp;quot;a&lt;/code&gt;来将复制行插入到名为 a 的 缓存区：&lt;ul&gt;
&lt;li&gt;输入 &lt;code&gt;&amp;quot;ap&lt;/code&gt;，复制行将插入到光标位置所在行的下一行。&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;&amp;quot;aP&lt;/code&gt;，复制行将插入到光标位置所在行的上一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果愿意，我们可以重复上述步骤，将缓存区 a 中的内容插入到我们文件的多个位置。像本节中这样的一个临时缓存区，会在当前窗口关闭时释放掉。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用-vi-vim-执行基本的文件编辑操作&quot;&gt;&lt;a href=&quot;#使用-vi-vim-执行基本的文件编辑操作&quot; class=&quot;headerlink&quot; title=&quot;使用 vi/vim 执行基本的文件编辑操作&quot;&gt;&lt;/a&gt;使用 vi/vim 执行基本的文件编辑操作&lt;/
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>LFCS 01：如何在 Linux 上使用 GNU sed 等命令来创建、编辑和操作文件</title>
    <link href="http://qiankun.space/2016/07/29/lfcs-01/"/>
    <id>http://qiankun.space/2016/07/29/lfcs-01/</id>
    <published>2016-07-29T13:57:17.000Z</published>
    <updated>2016-07-29T14:01:13.500Z</updated>
    
    <content type="html">&lt;h3 id=&quot;处理-Linux-中的文本流&quot;&gt;&lt;a href=&quot;#处理-Linux-中的文本流&quot; class=&quot;headerlink&quot; title=&quot;处理 Linux 中的文本流&quot;&gt;&lt;/a&gt;处理 Linux 中的文本流&lt;/h3&gt;&lt;p&gt;Linux 将程序中的输入和输出当成字符流或者字符序列。在开始理解重定向和管道之前，我们必须先了解三种最重要的I/O（输入和输出Input and Output）流，事实上，它们都是特殊的文件（根据 UNIX 和 Linux 中的约定，数据流和外围设备（设备文件）也被视为普通文件）。&lt;/p&gt;
&lt;p&gt;在 &amp;gt; (重定向操作符) 和 | (管道操作符)之间的区别是：前者将命令与文件相连接，而后者将命令的输出和另一个命令相连接。&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;# command &amp;gt; file# command1&lt;/span&gt; | comma&lt;span class=&quot;symbol&quot;&gt;nd2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于重定向操作符会静默地创建或覆盖文件，我们必须特别小心谨慎地使用它，并且永远不要把它和管道混淆起来。在 Linux 和 UNIX 系统上管道的优势是：第一个命令的输出不会写入一个文件而是直接被第二个命令读取。&lt;/p&gt;
&lt;p&gt;在下面的操作练习中，我们将会使用这首诗——《A happy child》（作者未知)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055317sx248jjs2c4c7uu7.png&quot; alt=&quot;cat 命令样例&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;cat 命令样例&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用-sed&quot;&gt;&lt;a href=&quot;#使用-sed&quot; class=&quot;headerlink&quot; title=&quot;使用 sed&quot;&gt;&lt;/a&gt;使用 sed&lt;/h4&gt;&lt;p&gt;sed 是流编辑器stream editor的缩写。为那些不懂术语的人额外解释一下，流编辑器是用来在一个输入流（文件或者管道中的输入）执行基本的文本转换的工具。&lt;/p&gt;
&lt;p&gt;sed 最基本的用法是字符替换。我们将通过把每个出现的小写 y 改写为大写 Y 并且将输出重定向到 ahappychild2.txt 开始。g 标志表示 sed 应该替换文件每一行中所有应当替换的实例。如果这个标志省略了，sed 将会只替换每一行中第一次出现的实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# sed &lt;span class=&quot;string&quot;&gt;&#39;s/term/replacement/flag&#39;&lt;/span&gt; file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;我们的样例：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# sed &lt;span class=&quot;string&quot;&gt;&#39;s/y/Y/g&#39;&lt;/span&gt; ahappychild.txt &amp;gt; ahappychild2.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055318u6w915x3w6gg64l5.png&quot; alt=&quot;sed 命令样例&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sed 命令样例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果你要在替换文本中搜索或者替换特殊字符（如 /，\，＆），你需要使用反斜杠对它进行转义。&lt;/p&gt;
&lt;p&gt;例如，我们要用一个符号来替换一个文字，与此同时我们将把一行最开始出现的第一个 I 替换为 You。&lt;/p&gt;
&lt;figure class=&quot;highlight sml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sed &lt;span class=&quot;symbol&quot;&gt;&#39;s&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;/\&amp;amp;/g;s/^&lt;span class=&quot;type&quot;&gt;I&lt;/span&gt;/&lt;span class=&quot;type&quot;&gt;You&lt;/span&gt;/g&#39; ahappychild.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055318ustph1gt8asgs2t8.png&quot; alt=&quot;sed 替换字符串&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sed 替换字符串&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在上面的命令中，众所周知 ^（插入符号）是正则表达式中用来表示一行开头的符号。&lt;/p&gt;
&lt;p&gt;正如你所看到的，我们可以通过使用分号分隔以及用括号包裹来把两个或者更多的替换命令（并在它们中使用正则表达式）连接起来。&lt;/p&gt;
&lt;p&gt;另一种 sed 的用法是显示或者删除文件中选中的一部分。在下面的样例中，将会显示 /var/log/messages 中从6月8日开始的头五行。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sed -&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; &#39;/^Jun  8/ p&#39; /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;/messages | sed -&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; 1,5p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意，在默认的情况下，sed 会打印每一行。我们可以使用 -n 选项来覆盖这一行为并且告诉 sed 只需要打印（用 p来表示）文件（或管道）中匹配的部分（第一个命令中指定以“Jun 8” 开头的行，第二个命令中指定一到五行）。&lt;/p&gt;
&lt;p&gt;最后，可能有用的技巧是当检查脚本或者配置文件的时候可以保留文件本身并且删除注释。下面的单行 sed 命令删除（d）空行或者是开头为&lt;code&gt;#&lt;/code&gt;的行（| 字符对两个正则表达式进行布尔 OR 操作）。&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# sed &lt;span class=&quot;string&quot;&gt;&#39;/^#\|^$/d&#39;&lt;/span&gt; apache2.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055318sz9c1jpnjqnacl1p.png&quot; alt=&quot;sed 匹配字符串&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sed 匹配字符串&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;uniq-命令&quot;&gt;&lt;a href=&quot;#uniq-命令&quot; class=&quot;headerlink&quot; title=&quot;uniq 命令&quot;&gt;&lt;/a&gt;uniq 命令&lt;/h4&gt;&lt;p&gt;uniq 命令允许我们返回或者删除文件中重复的行，默认写到标准输出。我们必须注意到，除非两个重复的行相邻，否则uniq 命令不会删除他们。因此，uniq 经常和一个前置的 sort 命令（一种用来对文本行进行排序的算法）搭配使用。默认情况下，sort 使用第一个字段（用空格分隔）作为关键字段。要指定一个不同的关键字段，我们需要使用 -k 选项。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;du –sch /path/to/directory/* 命令将会以人类可读的格式返回在指定目录下每一个子文件夹和文件的磁盘空间使用情况（也会显示每个目录总体的情况），而且不是按照大小输出，而是按照子文件夹和文件的名称。我们可以使用下面的命令来让它通过大小排序。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# du -sch &lt;span class=&quot;regexp&quot;&gt;/var/&lt;/span&gt;* | &lt;span class=&quot;keyword&quot;&gt;sort&lt;/span&gt; -h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055319qckggebd272dhhe2.jpg&quot; alt=&quot;sort 命令样例&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sort 命令样例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你可以通过使用下面的命令告诉 uniq 比较每一行的前6个字符（-w 6）（这里是指定的日期）来统计日志事件的个数，而且在每一行的开头输出出现的次数（-c）。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;cat&lt;/span&gt; /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;/mail.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; | uniq -c -w 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055319ex1ex1hxjmnywnbm.jpg&quot; alt=&quot;文件中的统计数字&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;文件中的统计数字&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最后，你可以组合使用 sort 和 uniq 命令（通常如此）。看看下面文件中捐助者、捐助日期和金额的列表。假设我们想知道有多少个捐助者。我们可以使用下面的命令来分隔第一字段（字段由冒号分隔），按名称排序并且删除重复的行。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;cat&lt;/span&gt; sortuniq.txt | cut -&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt;: -f1 | &lt;span class=&quot;keyword&quot;&gt;sort&lt;/span&gt; | uniq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055320quba70a7m8vbe4ym.jpg&quot; alt=&quot;寻找文件中不重复的记录&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;寻找文件中不重复的记录&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也可阅读: &lt;a href=&quot;https://linux.cn/article-2336-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;13个“cat”命令样例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;grep-命令&quot;&gt;&lt;a href=&quot;#grep-命令&quot; class=&quot;headerlink&quot; title=&quot;grep 命令&quot;&gt;&lt;/a&gt;grep 命令&lt;/h4&gt;&lt;p&gt;grep 在文件（或命令输出）中搜索指定正则表达式，并且在标准输出中输出匹配的行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显示文件 /etc/passwd 中用户 gacanepa 的信息，忽略大小写。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; -i gacanepa &lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;passwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055320eepm9mp9mm4qwe9e.jpg&quot; alt=&quot;grep 命令样例&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;grep 命令样例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;显示 /etc 文件夹下所有 rc 开头并跟随任意数字的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;l&lt;/span&gt; /etc | grep rc[0-9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055321o4y33j3zzk3k4jpk.jpg&quot; alt=&quot;使用 grep 列出内容&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;使用 grep 列出内容&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也可阅读: &lt;a href=&quot;https://linux.cn/article-2250-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12个“grep”命令样例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;tr-命令使用技巧&quot;&gt;&lt;a href=&quot;#tr-命令使用技巧&quot; class=&quot;headerlink&quot; title=&quot;tr 命令使用技巧&quot;&gt;&lt;/a&gt;tr 命令使用技巧&lt;/h4&gt;&lt;p&gt;tr 命令可以用来从标准输入中转换（改变）或者删除字符，并将结果写入到标准输出中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把 sortuniq.txt 文件中所有的小写改为大写。&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cat sortuniq.txt | tr &lt;span class=&quot;string&quot;&gt;[:lower:]&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[:upper:]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055321tjh2huac2yxxhx29.jpg&quot; alt=&quot;排序文件中的字符串&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;排序文件中的字符串&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;压缩&lt;code&gt;ls –l&lt;/code&gt;输出中的分隔符为一个空格。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;l&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;tr&lt;/span&gt; -s &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055321hz2w9e42egucz2iu.jpg&quot; alt=&quot;压缩分隔符&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;压缩分隔符&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;cut-命令使用方法&quot;&gt;&lt;a href=&quot;#cut-命令使用方法&quot; class=&quot;headerlink&quot; title=&quot;cut 命令使用方法&quot;&gt;&lt;/a&gt;cut 命令使用方法&lt;/h4&gt;&lt;p&gt;cut 命令可以基于字节（-b选项）、字符（-c）或者字段（-f）提取部分输入（从标准输入或者文件中）并且将结果输出到标准输出。在最后一种情况下（基于字段），默认的字段分隔符是一个制表符，但可以由 -d 选项来指定不同的分隔符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;样例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从 /etc/passwd 中提取用户账户和他们被分配的默认 shell（-d 选项允许我们指定分界符，-f 选项指定那些字段将被提取）。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;cat&lt;/span&gt; /etc/passwd | cut -&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt;: -f1,7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055322pgyrzp6irfm299fj.jpg&quot; alt=&quot;提取用户账户&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;提取用户账户&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将以上命令结合起来，我们将使用 last 命令的输出中第一和第三个非空文件创建一个文本流。我们将使用 grep 作为第一过滤器来检查用户 gacanepa 的会话，然后将分隔符压缩至一个空格（tr -s ‘ ‘)。下一步，我们将使用 cut 来提取第一和第三个字段，最后使用第二个字段（本样例中，指的是IP地址）来排序之后，再用 uniq 去重。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;last&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; gacanepa | &lt;span class=&quot;keyword&quot;&gt;tr&lt;/span&gt; -s ‘ ‘ | cut -d’ ‘ -f1,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;sort&lt;/span&gt; -k2 | uniq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-linuxcn.qbox.me/data/attachment/album/201603/28/055322bio7q6dxhoioeo6q.png&quot; alt=&quot;last 命令样例&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;last 命令样例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上面的命令显示了如何将多个命令和管道结合起来，以便根据我们的要求得到过滤后的数据。你也可以逐步地使用它以帮助你理解输出是如何从一个命令传输到下一个命令的（顺便说一句，这是一个非常好的学习经验！）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;处理-Linux-中的文本流&quot;&gt;&lt;a href=&quot;#处理-Linux-中的文本流&quot; class=&quot;headerlink&quot; title=&quot;处理 Linux 中的文本流&quot;&gt;&lt;/a&gt;处理 Linux 中的文本流&lt;/h3&gt;&lt;p&gt;Linux 将程序中的输入和输出当成字符流或
    
    </summary>
    
      <category term="转载" scheme="http://qiankun.space/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="lfcs" scheme="http://qiankun.space/tags/lfcs/"/>
    
  </entry>
  
  <entry>
    <title>方向选择和埋头苦干</title>
    <link href="http://qiankun.space/2016/05/20/orientation-is-more-important-than-hardwork/"/>
    <id>http://qiankun.space/2016/05/20/orientation-is-more-important-than-hardwork/</id>
    <published>2016-05-20T08:23:50.000Z</published>
    <updated>2016-05-20T09:22:42.297Z</updated>
    
    <content type="html">&lt;p&gt;勤奋努力是一个人的优良品质，对于这一点我深信不疑。可是如果就一件事、一个结果而言，选择“方向”的重要性就显得格外突出。&lt;/p&gt;
&lt;p&gt;近一段时间尝试在系统中实现一个显示备份还原百分比的功能，自己想了好多种办法，然后从中择取一个自己比较满意的方案。为了实现该功能我老老实实地坐工位上调试了将近两天，快要完成的时候我将写的代码邮件给老大进行查看，没想到老大提出了一种通过添加一个参数就可以直接获取百分比的方案，我按照该方案实施了一遍，确实要比我原有的方案要简单，而且获取的百分比数据也比我自己通过代码计算出来的要准确。尽管在自己实现该功能的过程中我不断地调试代码有助于我学习及巩固相关知识，但是对于实现该功能这个结果来说，我做了太多的无用功。一个方案的变化，一次思考角度的转化都是选择“方向”的具体体现。&lt;/p&gt;
&lt;p&gt;生活是一个体验的过程，但是体验一个什么样的生活状态就是一个比较具体的结果，也是我们每个人所奋斗的方向。我常听到一句这样的话“怎么忙不重要，忙什么才重要”，南辕北辙、缘木求鱼等类似的行为在生活中并不少见，忙忙碌碌的人群中又有几人真正知道自己所奋斗的生活方向？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;勤奋努力是一个人的优良品质，对于这一点我深信不疑。可是如果就一件事、一个结果而言，选择“方向”的重要性就显得格外突出。&lt;/p&gt;
&lt;p&gt;近一段时间尝试在系统中实现一个显示备份还原百分比的功能，自己想了好多种办法，然后从中择取一个自己比较满意的方案。为了实现该功能我老老实实地坐
    
    </summary>
    
      <category term="随笔" scheme="http://qiankun.space/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>马后炮</title>
    <link href="http://qiankun.space/2016/05/13/monday-morning-quarterback/"/>
    <id>http://qiankun.space/2016/05/13/monday-morning-quarterback/</id>
    <published>2016-05-13T08:48:53.000Z</published>
    <updated>2016-05-13T10:22:51.394Z</updated>
    
    <content type="html">&lt;p&gt;“马后炮”常用来比喻不及时的举动，贬义。如果要是用来形容某个人的话至少能充分表达鄙夷的态度。可是如今我却越来却喜欢这个词了，而且我希望人们都能向“马后炮”的方向靠拢。&lt;/p&gt;
&lt;p&gt;以前信息传播的比较慢，当你获取到某个信息时围绕这个信息的相关事情都已经差不多明晰，稍加思考便可以推断出结果，此时如果需要自己采取有一些提前量的措施或表态而没有及时去做当然会被大家鄙视为没脑子的行为；可如今时代变了，信息量如此之大、传播如此迅速等都是以前没有的，如果风闻一件事情并且立马采取措施或表态，我认为是不负责任的，是没过脑子的行为，不可取。&lt;/p&gt;
&lt;p&gt;在信息传播方式如此便捷的今天，提供更加准确的信息尤为重要。可如今我根本看不到这一点，媒体为了吸引大众的视线，在信息未经考证的情况下就发布了，更有甚者为了迎合大众的心理不惜对信息添油加醋、歪曲事实，然后再将围绕信息的相关状况一点一点进行披露以达到长时间消费该信息的目的。&lt;/p&gt;
&lt;p&gt;其实我对于媒体的态度还是比较复杂的。毕竟以前下面发生什么事情根本传不乡镇，好多冤情也得不到伸张，如今有媒体介入这种状况会改善很多，可在彰显媒体力量的同时部分媒体却又没能恪守媒道德底线混淆视听哗众取宠。媒体的发展需要时间，我只希望越来越健全的法制能够更好地约束他们的行为。但对于个人而言没有一个明辨是非的能力，听风就是雨任人摆布而且以讹传讹更不能让我接受。&lt;/p&gt;
&lt;p&gt;我承认如今的社会矛盾很尖锐，也能感受到政府公信力的丧失，可我不愿人们都失去理智被一个又一个媒体添加标签后所谓的“事件”左右，而是自己去思考一下，然后给“事件”打上属于自己的标签。&lt;/p&gt;
&lt;p&gt;社会风气是浮躁的，做一个“马后炮”给自己更多的时间思考。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;“马后炮”常用来比喻不及时的举动，贬义。如果要是用来形容某个人的话至少能充分表达鄙夷的态度。可是如今我却越来却喜欢这个词了，而且我希望人们都能向“马后炮”的方向靠拢。&lt;/p&gt;
&lt;p&gt;以前信息传播的比较慢，当你获取到某个信息时围绕这个信息的相关事情都已经差不多明晰，稍加思考便
    
    </summary>
    
      <category term="随笔" scheme="http://qiankun.space/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>浅析Linux初始化init系统</title>
    <link href="http://qiankun.space/2016/05/10/introduce-the-linux-system-init/"/>
    <id>http://qiankun.space/2016/05/10/introduce-the-linux-system-init/</id>
    <published>2016-05-10T07:07:01.000Z</published>
    <updated>2016-05-10T07:36:20.207Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是-Init-系统-init-系统的历史和现状&quot;&gt;&lt;a href=&quot;#什么是-Init-系统-init-系统的历史和现状&quot; class=&quot;headerlink&quot; title=&quot;什么是 Init 系统,init 系统的历史和现状&quot;&gt;&lt;/a&gt;什么是 Init 系统,init 系统的历史和现状&lt;/h3&gt;&lt;p&gt;Linux 操作系统的启动首先从 BIOS 开始，接下来进入 bootloader，由 bootloader 载入内核，进行内核初始化。内核初始化的最后一步就是启动 pid 为 1 的 init 进程。这个进程是系统的第一个进程。它负责产生其他所有用户进程。&lt;/p&gt;
&lt;p&gt;init 以守护进程方式存在，是所有其他进程的祖先。init 进程非常独特，能够完成其他进程无法完成的任务。&lt;/p&gt;
&lt;p&gt;Init 系统能够定义、管理和控制 init 进程的行为。它负责组织和运行许多独立的或相关的始化工作(因此被称为 init 系统)，从而让计算机系统进入某种用户预订的运行模式。&lt;/p&gt;
&lt;p&gt;仅仅将内核运行起来是毫无实际用途的，必须由 init 系统将系统代入可操作状态。比如启动外壳 shell 后，便有了人机交互，这样就可以让计算机执行一些预订程序完成有实际意义的任务。或者启动 X 图形系统以便提供更佳的人机界面，更加高效的完成任务。这里，字符界面的 shell 或者 X 系统都是一种预设的运行模式。&lt;/p&gt;
&lt;p&gt;大多数 Linux 发行版的 init 系统是和 System V 相兼容的，被称为 sysvinit。这是人们最熟悉的 init 系统。一些发行版如 Slackware 采用的是 BSD 风格 Init 系统，这种风格使用较少，本文不再涉及。其他的发行版如 Gentoo 是自己定制的。Ubuntu 和 RHEL 采用 upstart 替代了传统的 sysvinit。而 Fedora 从版本 15 开始使用了一个被称为 systemd 的新 init 系统。&lt;/p&gt;
&lt;p&gt;可以看到不同的发行版采用了不同的 init 实现，本系列文章就是打算讲述三个主要的 Init 系统：sysvinit，UpStart 和 systemd。了解它们各自的设计特点，并简要介绍它们的使用。&lt;/p&gt;
&lt;p&gt;在 Linux 主要应用于服务器和 PC 机的时代，SysVinit 运行非常良好，概念简单清晰。它主要依赖于 Shell 脚本，这就决定了它的&lt;strong&gt;最大弱点：启动太慢&lt;/strong&gt;。在很少重新启动的 Server 上，这个缺点并不重要。而当 Linux 被应用到移动终端设备的时候，启动慢就成了一个大问题。为了更快地启动，人们开始改进 sysvinit，先后出现了 upstart 和 systemd 这两个主要的新一代 init 系统。Upstart 已经开发了 8 年多，在不少系统中已经替换 sysvinit。Systemd 出现较晚，但发展更快，大有取代 upstart 的趋势。&lt;/p&gt;
&lt;h3 id=&quot;Sysvinit-概况&quot;&gt;&lt;a href=&quot;#Sysvinit-概况&quot; class=&quot;headerlink&quot; title=&quot;Sysvinit 概况&quot;&gt;&lt;/a&gt;Sysvinit 概况&lt;/h3&gt;&lt;p&gt;Sysvinit 就是 system V 风格的 init 系统，顾名思义，它源于 System V 系列 UNIX。它提供了比 BSD 风格 init 系统更高的灵活性。是已经风行了几十年的 UNIX init 系统，一直被各类 Linux 发行版所采用。&lt;/p&gt;
&lt;h3 id=&quot;运行级别&quot;&gt;&lt;a href=&quot;#运行级别&quot; class=&quot;headerlink&quot; title=&quot;运行级别&quot;&gt;&lt;/a&gt;运行级别&lt;/h3&gt;&lt;p&gt;Sysvinit 用术语 runlevel 来定义”预订的运行模式”。Sysvinit 检查 ‘/etc/inittab’ 文件中是否含有 ‘initdefault’ 项。 这告诉 init 系统是否有一个默认运行模式。如果没有默认的运行模式，那么用户将进入系统控制台，手动决定进入何种运行模式。&lt;/p&gt;
&lt;p&gt;sysvinit 中运行模式描述了系统各种预订的运行模式。通常会有 8 种运行模式，即运行模式 0 到 6 和 S 或者 s。&lt;/p&gt;
&lt;p&gt;每种 Linux 发行版对运行模式的定义都不太一样。但 0，1，6 却得到了大家的一致赞同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 关机&lt;/li&gt;
&lt;li&gt;1 单用户模式&lt;/li&gt;
&lt;li&gt;6 重启&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常在 /etc/inittab 文件中定义了各种运行模式的工作范围。比如 RedHat 定义了 runlevel 3 和 5。运行模式 3 将系统初始化为字符界面的 shell 模式；运行模式 5 将系统初始化为 GUI 模式。无论是命令行界面还是 GUI，运行模式 3 和 5 相对于其他运行模式而言都是完整的正式的运行状态，计算机可以完成用户需要的任务。而模式 1，S 等往往用于系统故障之后的排错和恢复。&lt;/p&gt;
&lt;p&gt;很显然，这些不同的运行模式下系统需要初始化运行的进程和需要进行的初始化准备都是不同的。比如运行模式 3 不需要启动 X 系统。用户只需要指定需要进入哪种模式，sysvinit 将负责执行所有该模式所必须的初始化工作。&lt;/p&gt;
&lt;h3 id=&quot;sysvinit-运行顺序&quot;&gt;&lt;a href=&quot;#sysvinit-运行顺序&quot; class=&quot;headerlink&quot; title=&quot;sysvinit 运行顺序&quot;&gt;&lt;/a&gt;sysvinit 运行顺序&lt;/h3&gt;&lt;p&gt;Sysvinit 巧妙地用脚本，文件命名规则和软链接来实现不同的 runlevel。首先，sysvinit 需要读取/etc/inittab 文件。分析这个文件的内容，它获得以下一些配置信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统需要进入的 runlevel&lt;/li&gt;
&lt;li&gt;捕获组合键的定义&lt;/li&gt;
&lt;li&gt;定义电源 fail/restore 脚本&lt;/li&gt;
&lt;li&gt;启动 getty 和虚拟控制台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到配置信息后，sysvinit 顺序地执行以下这些步骤，从而将系统初始化为预订的 runlevel X。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/etc/rc.d/rc.sysinit&lt;/li&gt;
&lt;li&gt;/etc/rc.d/rc 和/etc/rc.d/rcX.d/ (X 代表运行级别 0-6)&lt;/li&gt;
&lt;li&gt;/etc/rc.d/rc.local&lt;/li&gt;
&lt;li&gt;X Display Manager（如果需要的话）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，运行 rc.sysinit 以便执行一些重要的系统初始化任务。在 RedHat 公司的 RHEL5 中(RHEL6 已经使用 upstart 了)，rc.sysinit 主要完成以下这些工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;激活 udev 和 selinux&lt;/li&gt;
&lt;li&gt;设置定义在/etc/sysctl.conf 中的内核参数&lt;/li&gt;
&lt;li&gt;设置系统时钟&lt;/li&gt;
&lt;li&gt;加载 keymaps&lt;/li&gt;
&lt;li&gt;使能交换分区&lt;/li&gt;
&lt;li&gt;设置主机名(hostname)&lt;/li&gt;
&lt;li&gt;根分区检查和 remount&lt;/li&gt;
&lt;li&gt;激活 RAID 和 LVM 设备&lt;/li&gt;
&lt;li&gt;开启磁盘配额&lt;/li&gt;
&lt;li&gt;检查并挂载所有文件系统&lt;/li&gt;
&lt;li&gt;清除过期的 locks 和 PID 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成了以上这些工作之后，sysvinit 开始运行/etc/rc.d/rc 脚本。根据不同的 runlevel，rc 脚本将打开对应该 runlevel 的 rcX.d 目录(X 就是 runlevel)，找到并运行存放在该目录下的所有启动脚本。每个 runlevel X 都有一个这样的目录，目录名为/etc/rc.d/rcX.d。&lt;/p&gt;
&lt;p&gt;在这些目录下存放着很多不同的脚本。文件名以 S 开头的脚本就是启动时应该运行的脚本，S 后面跟的数字定义了这些脚本的执行顺序。在/etc/rc.d/rcX.d 目录下的脚本其实都是一些软链接文件，真实的脚本文件存放在/etc/init.d 目录下。如下所示：&lt;/p&gt;
&lt;h4 id=&quot;rc5-d-目录下的脚本&quot;&gt;&lt;a href=&quot;#rc5-d-目录下的脚本&quot; class=&quot;headerlink&quot; title=&quot;rc5.d 目录下的脚本&quot;&gt;&lt;/a&gt;rc5.d 目录下的脚本&lt;/h4&gt;&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@www ~]# ll /etc/rc5.d/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 16 Sep 4 2008 K02dhcdbd -&amp;gt;&lt;/span&gt; ../init.d/dhcdbd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....(中间省略)....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 14 Sep 4 2008 K91capi -&amp;gt;&lt;/span&gt; ../init.d/capi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 23 Sep 4 2008 S00microcode_ctl -&amp;gt;&lt;/span&gt; ../init.d/microcode_ctl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 22 Sep 4 2008 S02lvm2-monitor -&amp;gt;&lt;/span&gt; ../init.d/lvm2-monitor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....(中间省略)....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 17 Sep 4 2008 S10network -&amp;gt;&lt;/span&gt; ../init.d/network&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....(中间省略)....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 11 Sep 4 2008 S99local -&amp;gt;&lt;/span&gt; ../rc.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lrwxrwxrwx&lt;/span&gt; 1 root root 16 Sep 4 2008 S99smartd -&amp;gt;&lt;/span&gt; ../init.d/smartd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....(底下省略)....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当所有的初始化脚本执行完毕。Sysvinit 运行/etc/rc.d/rc.local 脚本。&lt;/p&gt;
&lt;p&gt;rc.local 是 Linux 留给用户进行个性化设置的地方。您可以把自己私人想设置和启动的东西放到这里，一台 Linux Server 的用户一般不止一个，所以才有这样的考虑。&lt;/p&gt;
&lt;h3 id=&quot;Sysvinit-和系统关闭&quot;&gt;&lt;a href=&quot;#Sysvinit-和系统关闭&quot; class=&quot;headerlink&quot; title=&quot;Sysvinit 和系统关闭&quot;&gt;&lt;/a&gt;Sysvinit 和系统关闭&lt;/h3&gt;&lt;p&gt;Sysvinit 不仅需要负责初始化系统，还需要负责关闭系统。在系统关闭时，为了保证数据的一致性，需要小心地按顺序进行结束和清理工作。&lt;/p&gt;
&lt;p&gt;比如应该先停止对文件系统有读写操作的服务，然后再 umount 文件系统。否则数据就会丢失。&lt;/p&gt;
&lt;p&gt;这种顺序的控制这也是依靠/etc/rc.d/rcX.d/目录下所有脚本的命名规则来控制的，在该目录下所有以 K 开头的脚本都将在关闭系统时调用，字母 K 之后的数字定义了它们的执行顺序。&lt;/p&gt;
&lt;p&gt;这些脚本负责安全地停止服务或者其他的关闭工作。&lt;/p&gt;
&lt;h3 id=&quot;Sysvinit-的管理和控制功能&quot;&gt;&lt;a href=&quot;#Sysvinit-的管理和控制功能&quot; class=&quot;headerlink&quot; title=&quot;Sysvinit 的管理和控制功能&quot;&gt;&lt;/a&gt;Sysvinit 的管理和控制功能&lt;/h3&gt;&lt;p&gt;此外，在系统启动之后，管理员还需要对已经启动的进程进行管理和控制。原始的 sysvinit 软件包包含了一系列的控制启动，运行和关闭所有其他程序的工具。&lt;br&gt;&lt;strong&gt; halt &lt;/strong&gt;&lt;br&gt;停止系统。&lt;br&gt;&lt;strong&gt; init &lt;/strong&gt;&lt;br&gt;这个就是 sysvinit 本身的 init 进程实体，以 pid1 身份运行，是所有用户进程的父进程。最主要的作用是在启动过程中使用/etc/inittab 文件创建进程。&lt;br&gt;&lt;strong&gt; killall5 &lt;/strong&gt;&lt;br&gt;就是 SystemV 的 killall 命令。向除自己的会话(session)进程之外的其它进程发出信号，所以不能杀死当前使用的 shell。&lt;br&gt;&lt;strong&gt; last &lt;/strong&gt;&lt;br&gt;回溯/var/log/wtmp 文件(或者-f 选项指定的文件)，显示自从这个文件建立以来，所有用户的登录情况。&lt;br&gt;&lt;strong&gt; lastb &lt;/strong&gt;&lt;br&gt;作用和 last 差不多，默认情况下使用/var/log/btmp 文件，显示所有失败登录企图。&lt;br&gt;&lt;strong&gt; mesg &lt;/strong&gt;&lt;br&gt;控制其它用户对用户终端的访问。&lt;br&gt;&lt;strong&gt; pidof &lt;/strong&gt;&lt;br&gt;找出程序的进程识别号(pid)，输出到标准输出设备。&lt;br&gt;&lt;strong&gt; poweroff &lt;/strong&gt;&lt;br&gt;等于 shutdown -h –p，或者 telinit 0。关闭系统并切断电源。&lt;br&gt;&lt;strong&gt; reboot &lt;/strong&gt;&lt;br&gt;等于 shutdown –r 或者 telinit 6。重启系统。&lt;br&gt;&lt;strong&gt; runlevel &lt;/strong&gt;&lt;br&gt;读取系统的登录记录文件(一般是/var/run/utmp)把以前和当前的系统运行级输出到标准输出设备。&lt;br&gt;&lt;strong&gt; shutdown &lt;/strong&gt;&lt;br&gt;以一种安全的方式终止系统，所有正在登录的用户都会收到系统将要终止通知，并且不准新的登录。&lt;br&gt;&lt;strong&gt; sulogin &lt;/strong&gt;&lt;br&gt;当系统进入单用户模式时，被 init 调用。当接收到启动加载程序传递的-b 选项时，init 也会调用 sulogin。&lt;br&gt;&lt;strong&gt; telinit &lt;/strong&gt;&lt;br&gt;实际是 init 的一个连接，用来向 init 传送单字符参数和信号。&lt;br&gt;&lt;strong&gt; utmpdump &lt;/strong&gt;&lt;br&gt;以一种用户友好的格式向标准输出设备显示/var/run/utmp 文件的内容。&lt;br&gt;&lt;strong&gt; wall &lt;/strong&gt;&lt;br&gt;向所有有信息权限的登录用户发送消息。&lt;/p&gt;
&lt;p&gt;不同的 Linux 发行版在这些 sysvinit 的基本工具基础上又开发了一些辅助工具用来简化 init 系统的管理工作。比如 RedHat 的 RHEL 在 sysvinit 的基础上开发了 initscripts 软件包，包含了大量的启动脚本 (如 rc.sysinit) ，还提供了 service，chkconfig 等命令行工具，甚至一套图形化界面来管理 init 系统。其他的 Linux 发行版也有各自的 initscript 或其他名字的 init 软件包来简化 sysvinit 的管理。&lt;/p&gt;
&lt;p&gt;只要您理解了 sysvinit 的机制，在一个最简的仅有 sysvinit 的系统下，您也可以直接调用脚本启动和停止服务，手动创建 inittab 和创建软连接来完成这些任务。因此理解 sysvinit 的基本原理和命令是最重要的。您甚至也可以开发自己的一套管理工具。&lt;/p&gt;
&lt;h3 id=&quot;Sysvinit-的小结&quot;&gt;&lt;a href=&quot;#Sysvinit-的小结&quot; class=&quot;headerlink&quot; title=&quot;Sysvinit 的小结&quot;&gt;&lt;/a&gt;Sysvinit 的小结&lt;/h3&gt;&lt;p&gt;Sysvinit 的优点是概念简单。Service 开发人员只需要编写启动和停止脚本，概念非常清楚；将 service 添加/删除到某个 runlevel 时，只需要执行一些创建/删除软连接文件的基本操作；这些都不需要学习额外的知识或特殊的定义语法(UpStart 和 Systemd 都需要用户学习新的定义系统初始化行为的语言)。&lt;/p&gt;
&lt;p&gt;其次，sysvinit 的另一个重要优点是确定的执行顺序：脚本严格按照启动数字的大小顺序执行，一个执行完毕再执行下一个，这非常有益于错误排查。UpStart 和 systemd 支持并发启动，导致没有人可以确定地了解具体的启动顺序，排错不易。&lt;/p&gt;
&lt;p&gt;但是串行地执行脚本导致 sysvinit 运行效率较慢，在新的 IT 环境下，启动快慢成为一个重要问题。此外动态设备加载等 Linux 新特性也暴露出 sysvinit 设计的一些问题。针对这些问题，人们开始想办法改进 sysvinit，以便加快启动时间，并解决 sysvinit 自身的设计问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Upstart-简介&quot;&gt;&lt;a href=&quot;#Upstart-简介&quot; class=&quot;headerlink&quot; title=&quot;Upstart 简介&quot;&gt;&lt;/a&gt;Upstart 简介&lt;/h3&gt;&lt;p&gt;假如您使用的 Linux 发行版是 Ubuntu，很可能会发现在您的计算机上找不到/etc/inittab 文件了，这是因为 Ubuntu 使用了一种被称为 upstart 的新型 init 系统。&lt;/p&gt;
&lt;h3 id=&quot;开发-Upstart-的缘由&quot;&gt;&lt;a href=&quot;#开发-Upstart-的缘由&quot; class=&quot;headerlink&quot; title=&quot;开发 Upstart 的缘由&quot;&gt;&lt;/a&gt;开发 Upstart 的缘由&lt;/h3&gt;&lt;p&gt;大约在 2006 年或者更早的时候， Ubuntu 开发人员试图将 Linux 安装在笔记本电脑上。在这期间技术人员发现经典的 sysvinit 存在一些问题：它不适合笔记本环境。这促使程序员 Scott James Remnant 着手开发 upstart。&lt;/p&gt;
&lt;p&gt;当 Linux 内核进入 2.6 时代时，内核功能有了很多新的更新。新特性使得 Linux 不仅是一款优秀的服务器操作系统，也可以被用于桌面系统，甚至嵌入式设备。桌面系统或便携式设备的一个特点是经常重启，而且要频繁地使用硬件热插拔技术。 在现代计算机系统中，硬件繁多、接口有限，人们并非将所有设备都始终连接在计算机上，比如 U 盘平时并不连接电脑，使用时才插入 USB 插口。因此，当系统上电启动时，一些外设可能并没有连接。而是在启动后当需要的时候才连接这些设备。在 2.6 内核支持下，一旦新外设连接到系统，内核便可以自动实时地发现它们，并初始化这些设备，进而使用它们。这为便携式设备用户提供了很大的灵活性。&lt;/p&gt;
&lt;p&gt;可是这些特性为 sysvinit 带来了一些挑战。当系统初始化时，需要被初始化的设备并没有连接到系统上；比如打印机。为了管理打印任务，系统需要启动 CUPS 等服务，而如果打印机没有接入系统的情况下，启动这些服务就是一种浪费。Sysvinit 没有办法处理这类需求，它必须一次性把所有可能用到的服务都启动起来，即使打印机并没有连接到系统，CUPS 服务也必须启动。&lt;/p&gt;
&lt;p&gt;还有网络共 享盘的挂载问题。在/etc/fstab 中，可以指定系统自动挂载一个网络盘，比如 NFS，或者 iSCSI 设备。在本文的第一部分 sysvinit 的简介中可以看到，sysvinit 分析/etc/fstab 挂载文件系统这个步骤是在网络启动之前。可是如果网络没有启动，NFS 或者 iSCSI 都不可访问，当然也无法进行挂载操作。Sysvinit 采用 netdev 的方式来解决这个问题，即/etc/fstab 发现 netdev 属性挂载点的时候，不尝试挂载它，在网络初始化并使能之后，还有一个专门的 netfs 服务来挂载所有这些网络盘。这是一个不得已的补救方法，给管理员带来不便。部分新手管理员甚至从来也没有听说过 netdev 选项，因此经常成为系统管理的一个陷阱。&lt;/p&gt;
&lt;p&gt;针对以上种种情况，Ubuntu 开发人员在评估了当时的几个可选 init 系统之后，决定重新设计和开发一个全新的 init 系统，即 UpStart。UpStart 基于事件机制，比如 U 盘插入 USB 接口后，udev 得到内核通知，发现该设备，这就是一个新的事件。UpStart 在感知到该事件之后触发相应的等待任务，比如处理/etc/fstab 中存在的挂载点。采用这种事件驱动的模式，upstart 完美地解决了即插即用设备带来的新问题。&lt;/p&gt;
&lt;p&gt;此外，采用事件驱动机制也带来了一些其它有益的变化，比如加快了系统启动时间。sysvinit 运行时是同步阻塞的。一个脚本运行的时候，后续脚本必须等待。这意味着所有的初始化步骤都是串行执行的，而实际上很多服务彼此并不相关，完全可以并行启 动，从而减小系统的启动时间。在 Linux 大量应用于服务器的时代，系统启动时间也许还不那么重要；然而对于桌面系统和便携式设备，启动时间的长短对用户体验影响很大。此外云计算等新的 Server 端技术也往往需要单个设备可以更加快速地启动。&lt;/p&gt;
&lt;p&gt;UpStart 满足了这些需求，目前不仅桌面系统 Ubuntu 采用了 UpStart，甚至企业级服务器级的 RHEL 也默认采用 UpStart 来替换 sysvinit 作为 init 系统。&lt;/p&gt;
&lt;h3 id=&quot;Upstart-的特点&quot;&gt;&lt;a href=&quot;#Upstart-的特点&quot; class=&quot;headerlink&quot; title=&quot;Upstart 的特点&quot;&gt;&lt;/a&gt;Upstart 的特点&lt;/h3&gt;&lt;p&gt;UpStart 解决了之前提到的 sysvinit 的缺点。采用事件驱动模型，UpStart 可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快地启动系统&lt;/li&gt;
&lt;li&gt;当新硬件被发现时动态启动服务&lt;/li&gt;
&lt;li&gt;硬件被拔除时动态停止服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些特点使得 UpStart 可以很好地应用在桌面或者便携式系统中，处理这些系统中的动态硬件插拔特性。&lt;/p&gt;
&lt;h3 id=&quot;Upstart-概念和术语&quot;&gt;&lt;a href=&quot;#Upstart-概念和术语&quot; class=&quot;headerlink&quot; title=&quot;Upstart 概念和术语&quot;&gt;&lt;/a&gt;Upstart 概念和术语&lt;/h3&gt;&lt;p&gt;Upstart 的基本概念和设计清晰明确。UpStart 主要的概念是 job 和 event。Job 就是一个工作单元，用来完成一件工作，比如启动一个后台服务，或者运行一个配置命令。每个 Job 都等待一个或多个事件，一旦事件发生，upstart 就触发该 job 完成相应的工作。&lt;/p&gt;
&lt;h4 id=&quot;Job&quot;&gt;&lt;a href=&quot;#Job&quot; class=&quot;headerlink&quot; title=&quot;Job&quot;&gt;&lt;/a&gt;Job&lt;/h4&gt;&lt;p&gt;Job 就是一个工作的单元，一个任务或者一个服务。可以理解为 sysvinit 中的一个服务脚本。有三种类型的工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;task job；&lt;/li&gt;
&lt;li&gt;service job；&lt;/li&gt;
&lt;li&gt;abstract job；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;task job 代表在一定时间内会执行完毕的任务，比如删除一个文件；&lt;/p&gt;
&lt;p&gt;service job 代表后台服务进程，比如 apache httpd。这里进程一般不会退出，一旦开始运行就成为一个后台精灵进程，由 init 进程管理，如果这类进程退出，由 init 进程重新启动，它们只能由 init 进程发送信号停止。它们的停止一般也是由于所依赖的停止事件而触发的，不过 upstart 也提供命令行工具，让管理人员手动停止某个服务；&lt;/p&gt;
&lt;p&gt;Abstract job 仅由 upstart 内部使用，仅对理解 upstart 内部机理有所帮助。我们不用关心它。&lt;/p&gt;
&lt;p&gt;除了以上的分类之外，还有另一种工作（Job）分类方法。Upstart 不仅可以用来为整个系统的初始化服务，也可以为每个用户会话（session）的初始化服务。系统的初始化任务就叫做 system job，比如挂载文件系统的任务就是一个 system job；用户会话的初始化服务就叫做 session job。&lt;/p&gt;
&lt;h4 id=&quot;Job-生命周期&quot;&gt;&lt;a href=&quot;#Job-生命周期&quot; class=&quot;headerlink&quot; title=&quot;Job 生命周期&quot;&gt;&lt;/a&gt;Job 生命周期&lt;/h4&gt;&lt;p&gt;Upstart 为每个工作都维护一个生命周期。一般来说，工作有开始，运行和结束这几种状态。为了更精细地描述工作的变化，Upstart 还引入了一些其它的状态。比如开始就有开始之前(pre-start)，即将开始(starting)和已经开始了(started)几种不同的状态，这 样可以更加精确地描述工作的当前状态。&lt;/p&gt;
&lt;p&gt;工作从某种初始状态开始，逐渐变化，或许要经历其它几种不同的状态，最终进入另外一种状态，形成一个状态机。在这个过程中，当工作的状态即将发生变化的时候，init 进程会发出相应的事件（event）。&lt;/p&gt;
&lt;p&gt;表 1.Upstart 中 Job 的可能状态&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态名&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Waiting&lt;/td&gt;
&lt;td&gt;初始状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Starting&lt;/td&gt;
&lt;td&gt;Job 即将开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pre-start&lt;/td&gt;
&lt;td&gt;执行 pre-start 段，即任务开始前应该完成的工作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spawned&lt;/td&gt;
&lt;td&gt;准备执行 script 或者 exec 段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;post-start&lt;/td&gt;
&lt;td&gt;执行 post-start 动作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Running&lt;/td&gt;
&lt;td&gt;interim state set after post-start section processed denoting job is running (But it may have no associated PID!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pre-stop&lt;/td&gt;
&lt;td&gt;执行 pre-stop 段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stopping&lt;/td&gt;
&lt;td&gt;interim state set after pre-stop section processed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Killed&lt;/td&gt;
&lt;td&gt;任务即将被停止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;post-stop&lt;/td&gt;
&lt;td&gt;执行 post-stop 段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下图展示了 Job 的状态机。&lt;/p&gt;
&lt;p&gt;Job’s life cycle&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init2/image003.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中有四个状态会引起 init 进程发送相应的事件，表明该工作的相应变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Starting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Started&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stopping&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stopped&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而其它的状态变化不会发出事件。那么我们接下来就来看看事件的详细含义吧。&lt;/p&gt;
&lt;h4 id=&quot;事件-Event&quot;&gt;&lt;a href=&quot;#事件-Event&quot; class=&quot;headerlink&quot; title=&quot;事件 Event&quot;&gt;&lt;/a&gt;事件 Event&lt;/h4&gt;&lt;p&gt;顾名思义，Event 就是一个事件。事件在 upstart 中以通知消息的形式具体存在。一旦某个事件发生了，Upstart 就向整个系统发送一个消息。没有任何手段阻止事件消息被 upstart 的其它部分知晓，也就是说，事件一旦发生，整个 upstart 系统中所有工作和其它的事件都会得到通知。&lt;/p&gt;
&lt;p&gt;Event 可以分为三类: signal，methods 或者 hooks。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Signals &lt;/strong&gt;&lt;br&gt;Signal 事件是非阻塞的，异步的。发送一个信号之后控制权立即返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Methods &lt;/strong&gt;&lt;br&gt;Methods 事件是阻塞的，同步的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Hooks &lt;/strong&gt;&lt;br&gt;Hooks 事件是阻塞的，同步的。它介于 Signals 和 Methods 之间，调用发出 Hooks 事件的进程必须等待事件完成才可以得到控制权，但不检查事件是否成功。&lt;/p&gt;
&lt;p&gt;事件是个非常抽象的概念，下面我罗列出一些常见的事件，希望可以帮助您进一步了解事件的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统上电启动，init 进程会发送”start”事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根文件系统可写时，相应 job 会发送文件系统就绪的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个块设备被发现并初始化完成，发送相应的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;某个文件系统被挂载，发送相应的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似 atd 和 cron，可以在某个时间点，或者周期的时间点发送事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另外一个 job 开始或结束时，发送相应的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个磁盘文件被修改时，可以发出相应的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个网络设备被发现时，可以发出相应的事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺省路由被添加或删除时，可以发出相应的事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的 Linux 发行版对 upstart 有不同的定制和实现，实现和支持的事件也有所不同，可以用man 7 upstart-events来查看事件列表。&lt;/p&gt;
&lt;h4 id=&quot;Job-和-Event-的相互协作&quot;&gt;&lt;a href=&quot;#Job-和-Event-的相互协作&quot; class=&quot;headerlink&quot; title=&quot;Job 和 Event 的相互协作&quot;&gt;&lt;/a&gt;Job 和 Event 的相互协作&lt;/h4&gt;&lt;p&gt;Upstart 就是由事件触发工作运行的一个系统，每一个程序的运行都由其依赖的事件发生而触发的。&lt;/p&gt;
&lt;p&gt;系统初始化的过程是在工作和事件的相互协作下完成的，可以大致描述如下：系统初始化时，init 进程开始运行，init 进程自身会发出不同的事件，这些最初的事件会触发一些工作运行。每个工作运行过程中会释放不同的事件，这些事件又将触发新的工作运行。如此反复，直到整个 系统正常运行起来。&lt;/p&gt;
&lt;p&gt;究竟哪些事件会触发某个工作的运行？这是由工作配置文件定义的。&lt;/p&gt;
&lt;h4 id=&quot;工作配置文件&quot;&gt;&lt;a href=&quot;#工作配置文件&quot; class=&quot;headerlink&quot; title=&quot;工作配置文件&quot;&gt;&lt;/a&gt;工作配置文件&lt;/h4&gt;&lt;p&gt;任何一个工作都是由一个工作配置文件（Job Configuration File）定义的。这个文件是一个文本文件，包含一个或者多个小节（stanza）。每个小节是一个完整的定义模块，定义了工作的一个方面，比如 author 小节定义了工作的作者。工作配置文件存放在/etc/init 下面，是以.conf 作为文件后缀的文件。&lt;/p&gt;
&lt;h5 id=&quot;一个最简单的工作配置文件&quot;&gt;&lt;a href=&quot;#一个最简单的工作配置文件&quot; class=&quot;headerlink&quot; title=&quot;一个最简单的工作配置文件&quot;&gt;&lt;/a&gt;一个最简单的工作配置文件&lt;/h5&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#This is a simple demo of Job Configure file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#This line is comment, start with #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Stanza 1, The author&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;author “Liu Ming”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Stanza 2, Description&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description “This &lt;span class=&quot;keyword&quot;&gt;job &lt;/span&gt;only has author &lt;span class=&quot;keyword&quot;&gt;and &lt;/span&gt;description, so no use, &lt;span class=&quot;keyword&quot;&gt;just &lt;/span&gt;a demo”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的例子不会产生任何作用，一个真正的工作配置文件会包含很多小节，其中比较重要的小节有以下几个：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; “expect” Stanza &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Upstart 除了负责系统的启动过程之外，和 SysVinit 一样，Upstart 还提供一系列的管理工具。当系统启动之后，管理员可能还需要进行维护和调整，比如启动或者停止某项系统服务。或者将系统切换到其它的工作状态，比如改变运 行级别。本文后续将详细介绍 Upstart 的管理工具的使用。&lt;/p&gt;
&lt;p&gt;为了启动，停止，重启和查询某个系统服务。Upstart 需要跟踪该服务所对应的进程。比如 httpd 服务的进程 PID 为 1000。当用户需要查询 httpd 服务是否正常运行时，Upstart 就可以利用 ps 命令查询进程 1000，假如它还在正常运行，则表明服务正常。当用户需要停止 httpd 服务时，Upstart 就使用 kill 命令终止该进程。为此，Upstart 必须跟踪服务进程的进程号。&lt;/p&gt;
&lt;p&gt;部分服务进程为了将自己变成后台精灵进程(daemon)， 会采用两次派生(fork)的技术，另外一些服务则不会这样做。假如一个服务派生了两次，那么 UpStart 必须采用第二个派生出来的进程号作为服务的 PID。但是，UpStart 本身无法判断服务进程是否会派生两次，为此在定义该服务的工作配置文件中必须写明 expect 小节，告诉 UpStart 进程是否会派生两次。&lt;/p&gt;
&lt;p&gt;Expect 有两种，”expect fork”表示进程只会 fork 一次；”expect daemonize”表示进程会 fork 两次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; “exec” Stanza 和”script” Stanza &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个 UpStart 工作一定需要做些什么，可能是运行一条 shell 命令，或者运行一段脚本。用”exec”关键字配置工作需要运行的命令；用”script”关键字定义需要运行的脚本。&lt;/p&gt;
&lt;h5 id=&quot;显示了-exec-和-script-的用法：&quot;&gt;&lt;a href=&quot;#显示了-exec-和-script-的用法：&quot; class=&quot;headerlink&quot; title=&quot;显示了 exec 和 script 的用法：&quot;&gt;&lt;/a&gt;显示了 exec 和 script 的用法：&lt;/h5&gt;&lt;p&gt;script 例子&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mountall.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description “Mount filesystems &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; boot”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; startup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stop &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; starting rcS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  . /etc/default/rcS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [ -f /forcefsck ] &amp;amp;&amp;amp; force_fsck=”&lt;span class=&quot;comment&quot;&gt;--force-fsck”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [ “$FSCKFIX”=”yes” ] &amp;amp;&amp;amp; fsck_fix=”&lt;span class=&quot;comment&quot;&gt;--fsck-fix”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  exec mountall –daemon $force_fsck $fsck_fix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是 mountall 的例子，该工作在系统启动时运行，负责挂载所有的文件系统。该工作需要执行复杂的脚本，由”script”关键字定义；在脚本中，使用了 exec 来执行 mountall 命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; “start on” Stanza 和”stop on” Stanza &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“start on”定义了触发工作的所有事件。”start on”的语法很简单，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;start on EVENT [[KEY=]VALUE]... [and|or...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;EVENT 表示事件的名字，可以在 start on 中指定多个事件，表示该工作的开始需要依赖多个事件发生。多个事件之间可以用 and 或者 or 组合，”表示全部都必须发生”或者”其中之一发生即可”等不同的依赖条件。除了事件发生之外，工作的启动还可以依赖特定的条件，因此在 start on 的 EVENT 之后，可以用 KEY=VALUE 来表示额外的条件，一般是某个环境变量(KEY)和特定值(VALUE)进行比较。如果只有一个变量，或者变量的顺序已知，则 KEY 可以省略。&lt;/p&gt;
&lt;p&gt;“stop on”和”start on”非常类似，只不过是定义工作在什么情况下需要停止。&lt;/p&gt;
&lt;h5 id=&quot;“start-on”和”stop-on”的一个例子。&quot;&gt;&lt;a href=&quot;#“start-on”和”stop-on”的一个例子。&quot; class=&quot;headerlink&quot; title=&quot;“start on”和”stop on”的一个例子。&quot;&gt;&lt;/a&gt;“start on”和”stop on”的一个例子。&lt;/h5&gt;&lt;p&gt;start on/ stop on 例子&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#dbus.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description     “D-Bus &lt;span class=&quot;keyword&quot;&gt;system&lt;/span&gt; message bus”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;local-filesystems&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deconfiguring-networking&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;D-Bus 是一个系统消息服务，上面的配置文件表明当系统发出 local-filesystems 事件时启动 D-Bus；当系统发出 deconfiguring-networking 事件时，停止 D-Bus 服务。&lt;/p&gt;
&lt;h4 id=&quot;Session-Init&quot;&gt;&lt;a href=&quot;#Session-Init&quot; class=&quot;headerlink&quot; title=&quot;Session Init&quot;&gt;&lt;/a&gt;Session Init&lt;/h4&gt;&lt;p&gt;UpStart 还可以用于管理用户会话的初始化。在我写这篇文章的今天，多数 Linux 发行版还没有使用 UpStart 管理会话。只有在 Ubuntu Raring 版本中，使用 UpStart 管理用户会话的初始化过程。&lt;/p&gt;
&lt;p&gt;首先让我们了解一下 Session 的概念。Session 就是一个用户会话，即用户从远程或者本地登入系统开始工作，直到用户退出。这整个过程就构成一个会话。&lt;/p&gt;
&lt;p&gt;每个用户的使用习惯和使用方法都不相同，因此用户往往需要为自己的会话做一个定制，比如添加特定的命令别名，启动特殊的应用程序或者服务，等等。这些工作都属于对特定会话的初始化操作，因此可以被称为 Session Init。&lt;/p&gt;
&lt;p&gt;用 户使用 Linux 可以有两种模式：字符模式和图形界面。在字符模式下，会话初始化相对简单。用户登录后只能启动一个 Shell，通过 shell 命令使用系统。各种 shell 程序都支持一个自动运行的启动脚本，比如~/.bashrc。用户在这些脚本中加入需要运行的定制化命令。字符会话需求简单，因此这种现有的机制工作的很 好。&lt;/p&gt;
&lt;p&gt;在图形界面下，事情就变得复杂一些。用户登录后看到的并不是一个 shell 提示符，而是一个桌面。一个完整的桌面环境由很多组件组成。&lt;/p&gt;
&lt;p&gt;一 个桌面环境包括 window manager，panel 以及其它一些定义在/usr/share/gnome-session/sessions/下面的基本组件；此外还有一些辅助的应用程序，共同帮助构成一 个完整的方便的桌面，比如 system monitors，panel applets，NetworkManager，Bluetooth，printers 等。当用户登录之后，这些组件都需要被初始化，这个过程比字符界面要复杂的多。目前启动各种图形组件和应用的工作由 gnome-session 完成。过程如下：&lt;/p&gt;
&lt;p&gt;以 Ubuntu 为例，当用户登录 Ubuntu 图形界面后，显示管理器(Display Manager)lightDM 启动 Xsession。Xsession 接着启动 gnome-session，gnome-session 负责其它的初始化工作，然后就开始了一个 desktop session。&lt;/p&gt;
&lt;p&gt;传统 desktop session 启动过程&lt;br&gt;&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |&lt;span class=&quot;string&quot;&gt;- lightdm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;   &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- Xorg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;   &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- lightdm ---session-child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- gnome-session --session=ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- compiz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- gwibber&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- nautilus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- nm-applet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |&lt;span class=&quot;string&quot;&gt;- dbus-daemon --session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; :&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个过程有一些缺点（和 sysVInit 类似）。一些应用和组件其实并不需要在会话初始化过程中启动，更好的选择是在需要它们的时候才启动。比如 update-notifier 服务，该服务不停地监测几个文件系统路径，一旦这些路径上发现可以更新的软件包，就提醒用户。这些文件系统路径包括新插入的 DVD 盘等。Update-notifier 由 gnome-session 启动并一直运行着，在多数情况下，用户并不会插入新的 DVD，此时 update-notifier 服务一直在后台运行并消耗系统资源。更好的模式是当用户插入 DVD 的时候再运行 update-notifier。这样可以加快启动时间，减小系统运行过程中的内存等系统资源的开销。对于移动，嵌入式等设备等这还意味着省电。除了 Update-notifier 服务之外，还有其它一些类似的服务。比如 Network Manager，一天之内用户很少切换网络设备，所以大部分时间 Network Manager 服务仅仅是在浪费系统资源；再比如 backup manager 等其它常驻内存，后台不间断运行却很少真正被使用的服务。&lt;/p&gt;
&lt;p&gt;用 UpStart 的基于事件的按需启动的模式就可以很好地解决这些问题，比如用户插入网线的时候才启动 Network Manager，因为用户插入网线表明需要使用网络，这可以被称为按需启动。&lt;/p&gt;
&lt;p&gt;下图描述了采用 UpStart 之后的会话初始化过程。&lt;/p&gt;
&lt;p&gt;采用 Upstart 的 Desktop session init 过程&lt;br&gt;&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |&lt;span class=&quot;string&quot;&gt;- lightdm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;   &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- Xorg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;   &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- lightdm ---session-child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- session-init # &amp;lt;-- upstart running as normal user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- dbus-daemon --session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- gnome-session --session=ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- compiz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- gwibber&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- nautilus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;- nm-applet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;             :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; :&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;UpStart-使用&quot;&gt;&lt;a href=&quot;#UpStart-使用&quot; class=&quot;headerlink&quot; title=&quot;UpStart 使用&quot;&gt;&lt;/a&gt;UpStart 使用&lt;/h3&gt;&lt;p&gt;有两种人员需要了解 Upstart 的使用。第一类是系统开发人员，比如 MySQL 的开发人员。它们需要了解如何编写工作配置文件，以便用 UpStart 来管理服务。比如启动，停止 MySQL 服务。&lt;/p&gt;
&lt;p&gt;另外一种情况是系统管理员，它们需要掌握 Upstart 的管理命令以便配置和管理系统的初始化，管理系统服务。&lt;/p&gt;
&lt;h4 id=&quot;系统开发人员需要了解的-UpStart-知识&quot;&gt;&lt;a href=&quot;#系统开发人员需要了解的-UpStart-知识&quot; class=&quot;headerlink&quot; title=&quot;系统开发人员需要了解的 UpStart 知识&quot;&gt;&lt;/a&gt;系统开发人员需要了解的 UpStart 知识&lt;/h4&gt;&lt;p&gt;系统开发人员不仅需要掌握工作配置文件的写法，还需要了解一些针对服务进程编程上的要求。本文仅列出了少数工作配置文件的语法。要全面掌握工作配置文件的写 法，需要详细阅读 Upstart 的手册。这里让我们来分析一下如何用 Upstart 来实现传统的运行级别，进而了解如何灵活使用工作配置文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Upstart 系统中的运行级别 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Upstart 的运作完全是基于工作和事件的。工作的状态变化和运行会引起事件，进而触发其它工作和事件。&lt;/p&gt;
&lt;p&gt;而传统的 Linux 系统初始化是基于运行级别的，即 SysVInit。因为历史的原因，Linux 上的多数软件还是采用传统的 SysVInit 脚本启动方式，并没有为 UpStart 开发新的启动脚本，因此即便在 Debian 和 Ubuntu 系统上，还是必须模拟老的 SysVInit 的运行级别模式，以便和多数现有软件兼容。&lt;/p&gt;
&lt;p&gt;虽然 Upstart 本身并没有运行级别的概念，但完全可以用 UpStart 的工作模拟出来。让我们完整地考察一下 UpStart 机制下的系统启动过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 系统启动过程 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下图描述了 UpStart 的启动过程。&lt;/p&gt;
&lt;p&gt;UpStart 启动过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init2/image004.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;系统上电后运行 GRUB 载入内核。内核执行硬件初始化和内核自身初始化。在内核初始化的最后，内核将启动 pid 为 1 的 init 进程，即 UpStart 进程。&lt;/p&gt;
&lt;p&gt;Upstart 进程在执行了一些自身的初始化工作后，立即发出”startup”事件。上图中用红色方框加红色箭头表示事件，可以在左上方看到”startup”事件。&lt;/p&gt;
&lt;p&gt;所有依赖于”startup”事件的工作被触发，其中最重要的是 mountall。mountall 任务负责挂载系统中需要使用的文件系统，完成相应工作后，mountall 任务会发出以下事件：local-filesystem，virtual-filesystem，all-swaps，&lt;/p&gt;
&lt;p&gt;其中 virtual-filesystem 事件触发 udev 任务开始工作。任务 udev 触发 upstart-udev-bridge 的工作。Upstart-udev-bridge 会发出 net-device-up IFACE=lo 事件，表示本地回环 IP 网络已经准备就绪。同时，任务 mountall 继续执行，最终会发出 filesystem 事件。&lt;/p&gt;
&lt;p&gt;此时，任务 rc-sysinit 会被触发，因为 rc-sysinit 的 start on 条件如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;start on filesystem and net-device-up IFACE=lo&lt;/code&gt;&lt;br&gt;任务 rc-sysinit 调用 telinit。Telinit 任务会发出 runlevel 事件，触发执行/etc/init/rc.conf。&lt;/p&gt;
&lt;p&gt;rc.conf 执行/etc/rc$.d/目录下的所有脚本，和 SysVInit 非常类似，读者可以参考本文第一部分的描述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 程序开发时需要注意的事项 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为程序开发人员，在编写系统服务时，需要了解 UpStart 的一些特殊要求。只有符合这些要求的软件才可以被 UpStart 管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 规则一，派生次数需声明。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多 Linux 后台服务都通过派生两次的技巧将自己变成后台服务程序。如果您编写的服务也采用了这个技术，就必须通过文档或其它的某种方式明确地让 UpStart 的维护人员知道这一点，这将影响 UpStart 的 expect stanza，我们在前面已经详细介绍过这个 stanza 的含义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 规则二，派生后即可用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后台程序在完成第二次派生的时候，必须保证服务已经可用。因为 UpStart 通过派生计数来决定服务是否处于就绪状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 规则三，遵守 SIGHUP 的要求。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UpStart 会给精灵进程发送 SIGHUP 信号，此时，UpStart 希望该精灵进程做以下这些响应工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完成所有必要的重新初始化工作，比如重新读取配置文件。这是因为 UpStart 的命令”initctl reload”被设计为可以让服务在不重启的情况下更新配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;精灵进程必须继续使用现有的 PID，即收到 SIGHUP 时不能调用 fork。如果服务必须在这里调用 fork，则等同于派生两次，参考上面的规则一的处理。这个规则保证了 UpStart 可以继续使用 PID 管理本服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 规则四，收到 SIGTEM 即 shutdown。 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当收到 SIGTERM 信号后，UpStart 希望精灵进程进程立即干净地退出，释放所有资源。如果一个进程在收到 SIGTERM 信号后不退出，Upstart 将对其发送 SIGKILL 信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;系统管理员需要了解的 Upstart 命令 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作为系统管理员，一个重要的职责就是管理系统服务。比如系统服务的监控，启动，停止和配置。UpStart 提供了一系列的命令来完成这些工作。其中的核心是initctl，这是一个带子命令风格的命令行工具。&lt;/p&gt;
&lt;p&gt;比如可以用 initctl list 来查看所有工作的概况：&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$initctl list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alsa-mixer-save &lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt;/waiting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;avahi-daemon start/&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;690&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mountall-net &lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt;/waiting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rc &lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt;/waiting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rsyslog start/&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;482&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;screen-cleanup &lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt;/waiting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tty4 start/&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;859&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udev start/&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;334&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;upstart-udev-bridge start/&lt;span class=&quot;built_in&quot;&gt;running&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;304&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ureadahead-other &lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt;/waiting&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是在 Ubuntu10.10 系统上的输出，其它的 Linux 发行版上的输出会有所不同。第一列是工作名，比如 rsyslog。第二列是工作的目标；第三列是工作的状态。&lt;/p&gt;
&lt;p&gt;此外还可以用 initctl stop 停止一个正在运行的工作；用 initctl start 开始一个工作；还可以用 initctl status 来查看一个工作的状态；initctl restart 重启一个工作；initctl reload 可以让一个正在运行的服务重新载入配置文件。这些命令和传统的 service 命令十分相似。&lt;/p&gt;
&lt;p&gt;service 命令和 initctl 命令对照表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service 命令&lt;/th&gt;
&lt;th&gt;UpStart initctl 命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;service start&lt;/td&gt;
&lt;td&gt;initctl start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service stop&lt;/td&gt;
&lt;td&gt;initctl stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service restart&lt;/td&gt;
&lt;td&gt;initctl restart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service reload&lt;/td&gt;
&lt;td&gt;initctl reload&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;很多情况下管理员并不喜欢子命令风格，因为需要手动键入的字符太多。UpStart 还提供了一些快捷命令来简化 initctl，实际上这些命令只是在内部调用相应的 initctl 命令。比如 reload，restart，start，stop 等等。启动一个服务可以简单地调用&lt;br&gt;&lt;code&gt;start &amp;lt;job&amp;gt;&lt;/code&gt;&lt;br&gt;这和执行 &lt;code&gt;initctl start &amp;lt;job&amp;gt;&lt;/code&gt; 是一样的效果。&lt;/p&gt;
&lt;p&gt;一些命令是为了兼容其它系统(主要是 sysvinit)，比如显示 runlevel 用/sbin/runlevel 命令：&lt;br&gt;&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;$runlevel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个输出说明当前系统的运行级别为 2。而且系统没有之前的运行级别，也就是说在系统上电启动进入预定运行级别之后没有再修改过运行级别。&lt;/p&gt;
&lt;p&gt;那么如何修改系统上电之后的默认运行级别呢？&lt;/p&gt;
&lt;p&gt;在 Upstart 系统中，需要修改/etc/init/rc-sysinti.conf 中的 DEFAULT_RUNLEVEL 这个参数，以便修改默认启动运行级别。这一点和 sysvinit 的习惯有所不同，大家需要格外留意。&lt;/p&gt;
&lt;p&gt;还有一些随 UpStart 发布的小工具，用来帮助开发 UpStart 或者诊断 UpStart 的问题。比如 init-checkconf 和 upstart-monitor&lt;/p&gt;
&lt;p&gt;还可以使用 initctl 的 emit 命令从命令行发送一个事件。&lt;br&gt;&lt;code&gt;#initctl emit &amp;lt;event&amp;gt;&lt;/code&gt;&lt;br&gt;这一般是用于 UpStart 本身的排错。&lt;/p&gt;
&lt;h3 id=&quot;Upstart-小结&quot;&gt;&lt;a href=&quot;#Upstart-小结&quot; class=&quot;headerlink&quot; title=&quot;Upstart 小结&quot;&gt;&lt;/a&gt;Upstart 小结&lt;/h3&gt;&lt;p&gt;可以看到，UpStart 的设计比 SysVInit 更加先进。多数 Linux 发行版上已经不再使用 SysVInit，一部分发行版采用了 UpStart，比如 Ubuntu；而另外一些比如 Fedora，采用了一种被称为 systemd 的 init 系统。Systemd 出现的比 UpStart 更晚，但发展迅速，虽然 UpStart 也还在积极开发并被越来越多地应用，但 systemd 似乎发展更快，我将在下一篇文章中再介绍 systemd。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Systemd-的简介和特点&quot;&gt;&lt;a href=&quot;#Systemd-的简介和特点&quot; class=&quot;headerlink&quot; title=&quot;Systemd 的简介和特点&quot;&gt;&lt;/a&gt;Systemd 的简介和特点&lt;/h3&gt;&lt;p&gt;Systemd 是 Linux 系统中最新的初始化系统（init），它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。systemd 和 ubuntu 的 upstart 是竞争对手，预计会取代 UpStart，实际上在作者写作本文时，已经有消息称 Ubuntu 也将采用 systemd 作为其标准的系统初始化系统。&lt;/p&gt;
&lt;p&gt;Systemd 的很多概念来源于苹果 Mac OS 操作系统上的 launchd，不过 launchd 专用于苹果系统，因此长期未能获得应有的广泛关注。Systemd 借鉴了很多 launchd 的思想，它的重要特性如下：&lt;/p&gt;
&lt;h4 id=&quot;同-SysVinit-和-LSB-init-scripts-兼容&quot;&gt;&lt;a href=&quot;#同-SysVinit-和-LSB-init-scripts-兼容&quot; class=&quot;headerlink&quot; title=&quot;同 SysVinit 和 LSB init scripts 兼容&quot;&gt;&lt;/a&gt;同 SysVinit 和 LSB init scripts 兼容&lt;/h4&gt;&lt;p&gt;Systemd 是一个”新来的”，Linux 上的很多应用程序并没有来得及为它做相应的改变。和 UpStart 一样，systemd 引入了新的配置方式，对应用程序的开发也有一些新的要求。如果 systemd 想替代目前正在运行的初始化系统，就必须和现有程序兼容。任何一个 Linux 发行版都很难为了采用 systemd 而在短时间内将所有的服务代码都修改一遍。&lt;/p&gt;
&lt;p&gt;Systemd 提供了和 Sysvinit 以及 LSB initscripts 兼容的特性。系统中已经存在的服务和进程无需修改。这降低了系统向 systemd 迁移的成本，使得 systemd 替换现有初始化系统成为可能。&lt;/p&gt;
&lt;h4 id=&quot;更快的启动速度&quot;&gt;&lt;a href=&quot;#更快的启动速度&quot; class=&quot;headerlink&quot; title=&quot;更快的启动速度&quot;&gt;&lt;/a&gt;更快的启动速度&lt;/h4&gt;&lt;p&gt;Systemd 提供了比 UpStart 更激进的并行启动能力，采用了 socket / D-Bus activation 等技术启动服务。一个显而易见的结果就是：更快的启动速度。&lt;/p&gt;
&lt;p&gt;为了减少系统启动时间，systemd 的目标是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;尽可能启动更少的进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能将更多进程并行启动&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样地，UpStart 也试图实现这两个目标。UpStart 采用事件驱动机制，服务可以暂不启动，当需要的时候才通过事件触发其启动，这符合第一个设计目标；此外，不相干的服务可以并行启动，这也实现了第二个目标。&lt;/p&gt;
&lt;p&gt;下面的图形演示了 UpStart 相对于 SysVInit 在并发启动这个方面的改进：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; UpStart 对 SysVinit 的改进 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/image003.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;假设有 7 个不同的启动项目， 比如 JobA、Job B 等等。在 SysVInit 中，每一个启动项目都由一个独立的脚本负责，它们由 sysVinit 顺序地，串行地调用。因此总的启动时间为 T1+T2+T3+T4+T5+T6+T7。其中一些任务有依赖关系，比如 A,B,C,D。&lt;/p&gt;
&lt;p&gt;而 Job E 和 F 却和 A,B,C,D 无关。这种情况下，UpStart 能够并发地运行任务{E，F，(A,B,C,D)}，使得总的启动时间减少为 T1+T2+T3。&lt;/p&gt;
&lt;p&gt;这无疑增加了系统启动的并行性，从而提高了系统启动速度。但是在 UpStart 中，有依赖关系的服务还是必须先后启动。比如任务 A,B,(C,D)因为存在依赖关系，所以在这个局部，还是串行执行。&lt;/p&gt;
&lt;p&gt;让我们例举一些例子， Avahi 服务需要 D-Bus 提供的功能，因此 Avahi 的启动依赖于 D-Bus，UpStart 中，Avahi 必须等到 D-Bus 启动就绪之后才开始启动。类似的，livirtd 和 X11 都需要 HAL 服务先启动，而所有这些服务都需要 syslog 服务记录日志，因此它们都必须等待 syslog 服务先启动起来。然而 httpd 和他们都没有关系，因此 httpd 可以和 Avahi 等服务并发启动。&lt;/p&gt;
&lt;p&gt;Systemd 能够更进一步提高并发性，即便对于那些 UpStart 认为存在相互依赖而必须串行的服务，比如 Avahi 和 D-Bus 也可以并发启动。从而实现如下图所示的并发启动过程：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; systemd 的并发启动 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/image005.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有的任务都同时并发执行，总的启动时间被进一步降低为 T1。&lt;/p&gt;
&lt;p&gt;可见 systemd 比 UpStart 更进一步提高了并行启动能力，极大地加速了系统启动时间。&lt;/p&gt;
&lt;h4 id=&quot;systemd-提供按需启动能力&quot;&gt;&lt;a href=&quot;#systemd-提供按需启动能力&quot; class=&quot;headerlink&quot; title=&quot;systemd 提供按需启动能力&quot;&gt;&lt;/a&gt;systemd 提供按需启动能力&lt;/h4&gt;&lt;p&gt;当 sysvinit 系统初始化的时候，它会将所有可能用到的后台服务进程全部启动运行。并且系统必须等待所有的服务都启动就绪之后，才允许用户登录。这种做法有两个缺点：首先是启动时间过长；其次是系统资源浪费。&lt;/p&gt;
&lt;p&gt;某些服务很可能在很长一段时间内，甚至整个服务器运行期间都没有被使用过。比如 CUPS，打印服务在多数服务器上很少被真正使用到。您可能没有想到，在很多服务器上 SSHD 也是很少被真正访问到的。花费在启动这些服务上的时间是不必要的；同样，花费在这些服务上的系统资源也是一种浪费。&lt;/p&gt;
&lt;p&gt;Systemd 可以提供按需启动的能力，只有在某个服务被真正请求的时候才启动它。当该服务结束，systemd 可以关闭它，等待下次需要时再次启动它。&lt;/p&gt;
&lt;h4 id=&quot;Systemd-采用-Linux-的-Cgroup-特性跟踪和管理进程的生命周期&quot;&gt;&lt;a href=&quot;#Systemd-采用-Linux-的-Cgroup-特性跟踪和管理进程的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Systemd 采用 Linux 的 Cgroup 特性跟踪和管理进程的生命周期&quot;&gt;&lt;/a&gt;Systemd 采用 Linux 的 Cgroup 特性跟踪和管理进程的生命周期&lt;/h4&gt;&lt;p&gt;init 系统的一个重要职责就是负责跟踪和管理服务进程的生命周期。它不仅可以启动一个服务，也必须也能够停止服务。这看上去没有什么特别的，然而在真正用代码实现的时候，您或许会发现停止服务比一开始想的要困难。&lt;/p&gt;
&lt;p&gt;服务进程一般都会作为精灵进程（daemon）在后台运行，为此服务程序有时候会派生(fork)两次。在 UpStart 中，需要在配置文件中正确地配置 expect 小节。这样 UpStart 通过对 fork 系统调用进行计数，从而获知真正的精灵进程的 PID 号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 找到正确 pid &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/image007.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果 UpStart 找错了，将 p1作为服务进程的 Pid，那么停止服务的时候，UpStart 会试图杀死 p1进程，而真正的 p1进程则继续执行。换句话说该服务就失去控制了。&lt;/p&gt;
&lt;p&gt;还有更加特殊的情况。比如，一个 CGI 程序会派生两次，从而脱离了和 Apache 的父子关系。当 Apache 进程被停止后，该 CGI 程序还在继续运行。而我们希望服务停止后，所有由它所启动的相关进程也被停止。&lt;/p&gt;
&lt;p&gt;为了处理这类问题，UpStart 通过 strace 来跟踪 fork、exit 等系统调用，但是这种方法很笨拙，且缺乏可扩展性。systemd 则利用了 Linux 内核的特性即 CGroup 来完成跟踪的任务。当停止服务时，通过查询 CGroup，systemd 可以确保找到所有的相关进程，从而干净地停止服务。&lt;/p&gt;
&lt;p&gt;CGroup 已经出现了很久，它主要用来实现系统资源配额管理。CGroup 提供了类似文件系统的接口，使用方便。当进程创建子进程时，子进程会继承父进程的 CGroup。因此无论服务如何启动新的子进程，所有的这些相关进程都会属于同一个 CGroup，systemd 只需要简单地遍历指定的 CGroup 即可正确地找到所有的相关进程，将它们一一停止即可。&lt;/p&gt;
&lt;h4 id=&quot;启动挂载点和自动挂载的管理&quot;&gt;&lt;a href=&quot;#启动挂载点和自动挂载的管理&quot; class=&quot;headerlink&quot; title=&quot;启动挂载点和自动挂载的管理&quot;&gt;&lt;/a&gt;启动挂载点和自动挂载的管理&lt;/h4&gt;&lt;p&gt;传统的 Linux 系统中，用户可以用/etc/fstab 文件来维护固定的文件系统挂载点。这些挂载点在系统启动过程中被自动挂载，一旦启动过程结束，这些挂载点就会确保存在。这些挂载点都是对系统运行至关重要 的文件系统，比如 HOME 目录。和 sysvinit 一样，Systemd 管理这些挂载点，以便能够在系统启动时自动挂载它们。Systemd 还兼容/etc/fstab 文件，您可以继续使用该文件管理挂载点。&lt;/p&gt;
&lt;p&gt;有时候用户还需要动态挂载点，比如打算访问 DVD 内容时，才临时执行挂载以便访问其中的内容，而不访问光盘时该挂载点被取消(umount)，以便节约资源。传统地，人们依赖 autofs 服务来实现这种功能。&lt;/p&gt;
&lt;p&gt;Systemd 内建了自动挂载服务，无需另外安装 autofs 服务，可以直接使用 systemd 提供的自动挂载管理能力来实现 autofs 的功能。&lt;/p&gt;
&lt;h4 id=&quot;实现事务性依赖关系管理&quot;&gt;&lt;a href=&quot;#实现事务性依赖关系管理&quot; class=&quot;headerlink&quot; title=&quot;实现事务性依赖关系管理&quot;&gt;&lt;/a&gt;实现事务性依赖关系管理&lt;/h4&gt;&lt;p&gt;系统启动过程是由很多的独立工作共同组成的，这些工作之间可能存在依赖关系，比如挂载一个 NFS 文件系统必须依赖网络能够正常工作。Systemd 虽然能够最大限度地并发执行很多有依赖关系的工作，但是类似”挂载 NFS”和”启动网络”这样的工作还是存在天生的先后依赖关系，无法并发执行。对于这些任务，systemd 维护一个”事务一致性”的概念，保证所有相关的服务都可以正常启动而不会出现互相依赖，以至于死锁的情况。&lt;/p&gt;
&lt;h4 id=&quot;能够对系统进行快照和恢复&quot;&gt;&lt;a href=&quot;#能够对系统进行快照和恢复&quot; class=&quot;headerlink&quot; title=&quot;能够对系统进行快照和恢复&quot;&gt;&lt;/a&gt;能够对系统进行快照和恢复&lt;/h4&gt;&lt;p&gt;systemd 支持按需启动，因此系统的运行状态是动态变化的，人们无法准确地知道系统当前运行了哪些服务。Systemd 快照提供了一种将当前系统运行状态保存并恢复的能力。&lt;/p&gt;
&lt;p&gt;比如系统当前正运行服务 A 和 B，可以用 systemd 命令行对当前系统运行状况创建快照。然后将进程 A 停止，或者做其他的任意的对系统的改变，比如启动新的进程 C。在这些改变之后，运行 systemd 的快照恢复命令，就可立即将系统恢复到快照时刻的状态，即只有服务 A，B 在运行。一个可能的应用场景是调试：比如服务器出现一些异常，为了调试用户将当前状态保存为快照，然后可以进行任意的操作，比如停止服务等等。等调试结 束，恢复快照即可。&lt;/p&gt;
&lt;p&gt;这个快照功能目前在 systemd 中并不完善，似乎开发人员也没有特别关注它，因此有报告指出它还存在一些使用上的问题，使用时尚需慎重。&lt;/p&gt;
&lt;h4 id=&quot;日志服务&quot;&gt;&lt;a href=&quot;#日志服务&quot; class=&quot;headerlink&quot; title=&quot;日志服务&quot;&gt;&lt;/a&gt;日志服务&lt;/h4&gt;&lt;p&gt;systemd 自带日志服务 journald，该日志服务的设计初衷是克服现有的 syslog 服务的缺点。比如：&lt;/p&gt;
&lt;p&gt;syslog 不安全，消息的内容无法验证。每一个本地进程都可以声称自己是 Apache PID 4711，而 syslog 也就相信并保存到磁盘上。&lt;/p&gt;
&lt;p&gt;数据没有严格的格式，非常随意。自动化的日志分析器需要分析人类语言字符串来识别消息。一方面此类分析困难低效；此外日志格式的变化会导致分析代码需要更新甚至重写。&lt;/p&gt;
&lt;p&gt;Systemd Journal 用二进制格式保存所有日志信息，用户使用 journalctl 命令来查看日志信息。无需自己编写复杂脆弱的字符串分析处理程序。&lt;/p&gt;
&lt;p&gt;Systemd Journal 的优点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单性：代码少，依赖少，抽象开销最小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;零维护：日志是除错和监控系统的核心功能，因此它自己不能再产生问题。举例说，自动管理磁盘空间，避免由于日志的不断产生而将磁盘空间耗尽。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移植性：日志 文件应该在所有类型的 Linux 系统上可用，无论它使用的何种 CPU 或者字节序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能：添加和浏览 日志 非常快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最小资源占用：日志 数据文件需要较小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统一化：各种不同的日志存储技术应该统一起来，将所有的可记录事件保存在同一个数据存储中。所以日志内容的全局上下文都会被保存并且可供日后查询。例如一条 固件记录后通常会跟随一条内核记录，最终还会有一条用户态记录。重要的是当保存到硬盘上时这三者之间的关系不会丢失。Syslog 将不同的信息保存到不同的文件中，分析的时候很难确定哪些条目是相关的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩展性：日志的适用范围很广，从嵌入式设备到超级计算机集群都可以满足需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安全性：日志 文件是可以验证的，让无法检测的修改不再可能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Systemd-的基本概念&quot;&gt;&lt;a href=&quot;#Systemd-的基本概念&quot; class=&quot;headerlink&quot; title=&quot;Systemd 的基本概念&quot;&gt;&lt;/a&gt;Systemd 的基本概念&lt;/h3&gt;&lt;h4 id=&quot;单元的概念&quot;&gt;&lt;a href=&quot;#单元的概念&quot; class=&quot;headerlink&quot; title=&quot;单元的概念&quot;&gt;&lt;/a&gt;单元的概念&lt;/h4&gt;&lt;p&gt;系统初始化需要做的事情非常多。需要启动后台服务，比如启动 SSHD 服务；需要做配置工作，比如挂载文件系统。这个过程中的每一步都被 systemd 抽象为一个配置单元，即 unit。可以认为一个服务是一个配置单元；一个挂载点是一个配置单元；一个交换分区的配置是一个配置单元；等等。systemd 将配置单元归纳为以下一些不同的类型。然而，systemd 正在快速发展，新功能不断增加。所以配置单元类型可能在不久的将来继续增加。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;service ：代表一个后台服务进程，比如 mysqld。这是最常用的一类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;socket ：此类配置单元封装系统和互联网中的一个 套接字 。当下，systemd 支持流式、数据报和连续包的 AF_INET、AF_INET6、AF_UNIX socket 。每一个套接字配置单元都有一个相应的服务配置单元 。相应的服务在第一个”连接”进入套接字时就会启动(例如：nscd.socket 在有新连接后便启动 nscd.service)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;device ：此类配置单元封装一个存在于 Linux 设备树中的设备。每一个使用 udev 规则标记的设备都将会在 systemd 中作为一个设备配置单元出现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mount ：此类配置单元封装文件系统结构层次中的一个挂载点。Systemd 将对这个挂载点进行监控和管理。比如可以在启动时自动将其挂载；可以在某些条件下自动卸载。Systemd 会将/etc/fstab 中的条目都转换为挂载点，并在开机时处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;automount ：此类配置单元封装系统结构层次中的一个自挂载点。每一个自挂载配置单元对应一个挂载配置单元 ，当该自动挂载点被访问时，systemd 执行挂载点中定义的挂载行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;swap: 和挂载配置单元类似，交换配置单元用来管理交换分区。用户可以用交换配置单元来定义系统中的交换分区，可以让这些交换分区在启动时被激活。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;target ：此类配置单元为其他配置单元进行逻辑分组。它们本身实际上并不做什么，只是引用其他配置单元而已。这样便可以对配置单元做一个统一的控制。这样就可以实 现大家都已经非常熟悉的运行级别概念。比如想让系统进入图形化模式，需要运行许多服务和配置命令，这些操作都由一个个的配置单元表示，将所有这些配置单元 组合为一个目标(target)，就表示需要将这些配置单元全部执行一遍以便进入目标所代表的系统运行状态。 (例如：multi-user.target 相当于在传统使用 SysV 的系统中运行级别 5)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;timer：定时器配置单元用来定时触发用户定义的操作，这类配置单元取代了 atd、crond 等传统的定时服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;snapshot ：与 target 配置单元相似，快照是一组配置单元。它保存了系统当前的运行状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个配置单元都有一个对应的配置文件，系统管理员的任务就是编写和维护这些不同的配置文件，比如一个 MySQL 服务对应一个 mysql.service 文件。这种配置文件的语法非常简单，用户不需要再编写和维护复杂的系统 5 脚本了。&lt;/p&gt;
&lt;h4 id=&quot;依赖关系&quot;&gt;&lt;a href=&quot;#依赖关系&quot; class=&quot;headerlink&quot; title=&quot;依赖关系&quot;&gt;&lt;/a&gt;依赖关系&lt;/h4&gt;&lt;p&gt;虽然 systemd 将大量的启动工作解除了依赖，使得它们可以并发启动。但还是存在有些任务，它们之间存在天生的依赖，不能用”套接字激活”(socket activation)、D-Bus activation 和 autofs 三大方法来解除依赖（三大方法详情见后续描述）。比如：挂载必须等待挂载点在文件系统中被创建；挂载也必须等待相应的物理设备就绪。为了解决这类依赖问 题，systemd 的配置单元之间可以彼此定义依赖关系。&lt;/p&gt;
&lt;p&gt;Systemd 用配置单元定义文件中的关键字来描述配置单元之间的依赖关系。比如：unit A 依赖 unit B，可以在 unit B 的定义中用”require A”来表示。这样 systemd 就会保证先启动 A 再启动 B。&lt;/p&gt;
&lt;h4 id=&quot;Systemd-事务&quot;&gt;&lt;a href=&quot;#Systemd-事务&quot; class=&quot;headerlink&quot; title=&quot;Systemd 事务&quot;&gt;&lt;/a&gt;Systemd 事务&lt;/h4&gt;&lt;p&gt;Systemd 能保证事务完整性。Systemd 的事务概念和数据库中的有所不同，主要是为了保证多个依赖的配置单元之间没有环形引用。比如 unit A、B、C，假如它们的依赖关系为:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Unit 的循环依赖 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/image009.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;存在循环依赖，那么 systemd 将无法启动任意一个服务。此时 systemd 将会尝试解决这个问题，因为配置单元之间的依赖关系有两种：required 是强依赖；want 则是弱依赖，systemd 将去掉 wants 关键字指定的依赖看看是否能打破循环。如果无法修复，systemd 会报错。&lt;/p&gt;
&lt;p&gt;Systemd 能够自动检测和修复这类配置错误，极大地减轻了管理员的排错负担。&lt;/p&gt;
&lt;h4 id=&quot;Target-和运行级别&quot;&gt;&lt;a href=&quot;#Target-和运行级别&quot; class=&quot;headerlink&quot; title=&quot;Target 和运行级别&quot;&gt;&lt;/a&gt;Target 和运行级别&lt;/h4&gt;&lt;p&gt;systemd 用目标（target）替代了运行级别的概念，提供了更大的灵活性，如您可以继承一个已有的目标，并添加其它服务，来创建自己的目标。下表列举了 systemd 下的目标和常见 runlevel 的对应关系：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Sysvinit 运行级别和 systemd 目标的对应表 &lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sysvinit 运行级别&lt;/th&gt;
&lt;th&gt;Systemd 目标&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;runlevel0.target, poweroff.target&lt;/td&gt;
&lt;td&gt;关闭系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1, s, single&lt;/td&gt;
&lt;td&gt;runlevel1.target, rescue.target&lt;/td&gt;
&lt;td&gt;单用户模式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2, 4&lt;/td&gt;
&lt;td&gt;runlevel2.target, runlevel4.target, multi-user.target&lt;/td&gt;
&lt;td&gt;用户定义/域特定运行级别。默认等同于 3。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;runlevel3.target, multi-user.target&lt;/td&gt;
&lt;td&gt;多用户，非图形化。用户可以通过多个控制台或网络登录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;runlevel5.target, graphical.target&lt;/td&gt;
&lt;td&gt;多用户，图形化。通常为所有运行级别 3 的服务外加图形化登录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;runlevel6.target, reboot.target&lt;/td&gt;
&lt;td&gt;重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emergency&lt;/td&gt;
&lt;td&gt;emergency.target&lt;/td&gt;
&lt;td&gt;紧急 Shell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Systemd-的并发启动原理&quot;&gt;&lt;a href=&quot;#Systemd-的并发启动原理&quot; class=&quot;headerlink&quot; title=&quot;Systemd 的并发启动原理&quot;&gt;&lt;/a&gt;Systemd 的并发启动原理&lt;/h3&gt;&lt;p&gt;如前所述，在 Systemd 中，所有的服务都并发启动，比如 Avahi、D-Bus、livirtd、X11、HAL 可以同时启动。乍一看，这似乎有点儿问题，比如 Avahi 需要 syslog 的服务，Avahi 和 syslog 同时启动，假设 Avahi 的启动比较快，所以 syslog 还没有准备好，可是 Avahi 又需要记录日志，这岂不是会出现问题？&lt;/p&gt;
&lt;p&gt;Systemd 的开发人员仔细研究了服务之间相互依赖的本质问题，发现所谓依赖可以分为三个具体的类型，而每一个类型实际上都可以通过相应的技术解除依赖关系。&lt;/p&gt;
&lt;h4 id=&quot;并发启动原理之一：解决-socket-依赖&quot;&gt;&lt;a href=&quot;#并发启动原理之一：解决-socket-依赖&quot; class=&quot;headerlink&quot; title=&quot;并发启动原理之一：解决 socket 依赖&quot;&gt;&lt;/a&gt;并发启动原理之一：解决 socket 依赖&lt;/h4&gt;&lt;p&gt;绝大多数的服务依赖是套接字依赖。比如服务 A 通过一个套接字端口 S1 提供自己的服务，其他的服务如果需要服务 A，则需要连接 S1。因此如果服务 A 尚未启动，S1 就不存在，其他的服务就会得到启动错误。所以传统地，人们需要先启动服务 A，等待它进入就绪状态，再启动其他需要它的服务。Systemd 认为，只要我们预先把 S1 建立好，那么其他所有的服务就可以同时启动而无需等待服务 A 来创建 S1 了。如果服务 A 尚未启动，那么其他进程向 S1 发送的服务请求实际上会被 Linux 操作系统缓存，其他进程会在这个请求的地方等待。一旦服务 A 启动就绪，就可以立即处理缓存的请求，一切都开始正常运行。&lt;/p&gt;
&lt;p&gt;那么服务如何使用由 init 进程创建的套接字呢？&lt;/p&gt;
&lt;p&gt;Linux 操作系统有一个特性，当进程调用 fork 或者 exec 创建子进程之后，所有在父进程中被打开的文件句柄 (file descriptor) 都被子进程所继承。套接字也是一种文件句柄，进程 A 可以创建一个套接字，此后当进程 A 调用 exec 启动一个新的子进程时，只要确保该套接字的 close_on_exec 标志位被清空，那么新的子进程就可以继承这个套接字。子进程看到的套接字和父进程创建的套接字是同一个系统套接字，就仿佛这个套接字是子进程自己创建的一 样，没有任何区别。&lt;/p&gt;
&lt;p&gt;这个特性以前被一个叫做 inetd 的系统服务所利用。Inetd 进程会负责监控一些常用套接字端口，比如 Telnet，当该端口有连接请求时，inetd 才启动 telnetd 进程，并把有连接的套接字传递给新的 telnetd 进程进行处理。这样，当系统没有 telnet 客户端连接时，就不需要启动 telnetd 进程。Inetd 可以代理很多的网络服务，这样就可以节约很多的系统负载和内存资源，只有当有真正的连接请求时才启动相应服务，并把套接字传递给相应的服务进程。&lt;/p&gt;
&lt;p&gt;和 inetd 类似，systemd 是所有其他进程的父进程，它可以先建立所有需要的套接字，然后在调用 exec 的时候将该套接字传递给新的服务进程，而新进程直接使用该套接字进行服务即可。&lt;/p&gt;
&lt;h4 id=&quot;并发启动原理之二：解决-D-Bus-依赖&quot;&gt;&lt;a href=&quot;#并发启动原理之二：解决-D-Bus-依赖&quot; class=&quot;headerlink&quot; title=&quot;并发启动原理之二：解决 D-Bus 依赖&quot;&gt;&lt;/a&gt;并发启动原理之二：解决 D-Bus 依赖&lt;/h4&gt;&lt;p&gt;D-Bus 是 desktop-bus 的简称，是一个低延迟、低开销、高可用性的进程间通信机制。它越来越多地用于应用程序之间通信，也用于应用程序和操作系统内核之间的通信。很多现代的服务 进程都使用D-Bus 取代套接字作为进程间通信机制，对外提供服务。比如简化 Linux 网络配置的 NetworkManager 服务就使用 D-Bus 和其他的应用程序或者服务进行交互：邮件客户端软件 evolution 可以通过 D-Bus 从 NetworkManager 服务获取网络状态的改变，以便做出相应的处理。&lt;/p&gt;
&lt;p&gt;D-Bus 支持所谓”bus activation”功能。如果服务 A 需要使用服务 B 的 D-Bus 服务，而服务 B 并没有运行，则 D-Bus 可以在服务 A 请求服务 B 的 D-Bus 时自动启动服务 B。而服务 A 发出的请求会被 D-Bus 缓存，服务 A 会等待服务 B 启动就绪。利用这个特性，依赖 D-Bus 的服务就可以实现并行启动。&lt;/p&gt;
&lt;h4 id=&quot;并发启动原理之三：解决文件系统依赖&quot;&gt;&lt;a href=&quot;#并发启动原理之三：解决文件系统依赖&quot; class=&quot;headerlink&quot; title=&quot;并发启动原理之三：解决文件系统依赖&quot;&gt;&lt;/a&gt;并发启动原理之三：解决文件系统依赖&lt;/h4&gt;&lt;p&gt;系统启动过程中，文件系统相关的活动是最耗时的，比如挂载文件系统，对文件系统进行磁盘检查（fsck），磁盘配额检查等都是非常耗时的操作。在等待这些工 作完成的同时，系统处于空闲状态。那些想使用文件系统的服务似乎必须等待文件系统初始化完成才可以启动。但是 systemd 发现这种依赖也是可以避免的。&lt;/p&gt;
&lt;p&gt;Systemd 参考了 autofs 的设计思路，使得依赖文件系统的服务和文件系统本身初始化两者可以并发工作。autofs 可以监测到某个文件系统挂载点真正被访问到的时候才触发挂载操作，这是通过内核 automounter 模块的支持而实现的。比如一个 open()系统调用作用在”/misc/cd/file1”的时候，/misc/cd 尚未执行挂载操作，此时 open()调用被挂起等待，Linux 内核通知 autofs，autofs 执行挂载。这时候，控制权返回给 open()系统调用，并正常打开文件。&lt;/p&gt;
&lt;p&gt;Systemd 集成了 autofs 的实现，对于系统中的挂载点，比如/home，当系统启动的时候，systemd 为其创建一个临时的自动挂载点。在这个时刻/home 真正的挂载设备尚未启动好，真正的挂载操作还没有执行，文件系统检测也还没有完成。可是那些依赖该目录的进程已经可以并发启动，他们的 open()操作被内建在 systemd 中的 autofs 捕获，将该  open()调用挂起（可中断睡眠状态）。然后等待真正的挂载操作完成，文件系统检测也完成后，systemd 将该自动挂载点替换为真正的挂载点，并让 open()调用返回。由此，实现了那些依赖于文件系统的服务和文件系统本身同时并发启动。&lt;/p&gt;
&lt;p&gt;当然对于”/“根目录的依赖实际上一定还是要串行执行，因为 systemd 自己也存放在/之下，必须等待系统根目录挂载检查好。&lt;/p&gt;
&lt;p&gt;不过对于类似/home 等挂载点，这种并发可以提高系统的启动速度，尤其是当/home 是远程的 NFS 节点，或者是加密盘等，需要耗费较长的时间才可以准备就绪的情况下，因为并发启动，这段时间内，系统并不是完全无事可做，而是可以利用这段空余时间做更多 的启动进程的事情，总的来说就缩短了系统启动时间。&lt;/p&gt;
&lt;h3 id=&quot;Systemd-的使用&quot;&gt;&lt;a href=&quot;#Systemd-的使用&quot; class=&quot;headerlink&quot; title=&quot;Systemd 的使用&quot;&gt;&lt;/a&gt;Systemd 的使用&lt;/h3&gt;&lt;p&gt;下面针对技术人员的不同角色来简单地介绍一下 systemd 的使用。本文只打算给出简单的描述，让您对 systemd 的使用有一个大概的理解。具体的细节内容太多，即无法在一篇短文内写全，本人也没有那么强大的能力。还需要读者自己去进一步查阅 systemd 的文档。&lt;/p&gt;
&lt;h4 id=&quot;系统软件开发人员&quot;&gt;&lt;a href=&quot;#系统软件开发人员&quot; class=&quot;headerlink&quot; title=&quot;系统软件开发人员&quot;&gt;&lt;/a&gt;系统软件开发人员&lt;/h4&gt;&lt;p&gt;开发人员需要了解 systemd 的更多细节。比如您打算开发一个新的系统服务，就必须了解如何让这个服务能够被 systemd 管理。这需要您注意以下这些要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;后台服务进程代码不需要执行两次派生来实现后台精灵进程，只需要实现服务本身的主循环即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要调用 setsid()，交给 systemd 处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不再需要维护 pid 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Systemd 提供了日志功能，服务进程只需要输出到 stderr 即可，无需使用 syslog。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理信号 SIGTERM，这个信号的唯一正确作用就是停止当前服务，不要做其他的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SIGHUP 信号的作用是重启服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要套接字的服务，不要自己创建套接字，让 systemd 传入套接字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 sd_notify()函数通知 systemd 服务自己的状态改变。一般地，当服务初始化结束，进入服务就绪状态时，可以调用它。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; Unit 文件的编写 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于开发者来说，工作量最大的部分应该是编写配置单元文件，定义所需要的单元。&lt;/p&gt;
&lt;p&gt;举例来说，开发人员开发了一个新的服务程序，比如 httpd，就需要为其编写一个配置单元文件以便该服务可以被 systemd 管理，类似 UpStart 的工作配置文件。在该文件中定义服务启动的命令行语法，以及和其他服务的依赖关系等。&lt;/p&gt;
&lt;p&gt;此外我们之前已经了解到，systemd 的功能繁多，不仅用来管理服务，还可以管理挂载点，定义定时任务等。这些工作都是由编辑相应的配置单元文件完成的。我在这里给出几个配置单元文件的例子。&lt;/p&gt;
&lt;p&gt;下面是 SSH 服务的配置单元文件，服务配置单元文件以.service 为文件名后缀。&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#cat /etc/system/system/sshd.service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Unit]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Description&lt;/span&gt;=OpenSSH server daemon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;EnvironmentFile&lt;/span&gt;=/etc/sysconfig/sshd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecStartPre&lt;/span&gt;=/usr/sbin/sshd-keygen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecStart&lt;/span&gt;=/usrsbin/sshd –D &lt;span class=&quot;variable&quot;&gt;$OPTIONS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecReload&lt;/span&gt;=/bin/kill –HUP &lt;span class=&quot;variable&quot;&gt;$MAINPID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;KillMode&lt;/span&gt;=process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Restart&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt;-failure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;RestartSec&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Install]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;文件分为三个小节。第一个是[Unit]部分，这里仅仅有一个 描述信息。第二部分是 Service 定义，其中，ExecStartPre 定义启动服务之前应该运行的命令；ExecStart 定义启动服务的具体命令行语法。第三部分是[Install]，WangtedBy 表明这个服务是在多用户模式下所需要的。&lt;/p&gt;
&lt;p&gt;那我们就来看下 multi-user.target 吧：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#cat&lt;/span&gt; multi-user&lt;span class=&quot;selector-class&quot;&gt;.target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description=Multi-User System&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Documentation=man&lt;span class=&quot;selector-class&quot;&gt;.systemd&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.special&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requires=basic&lt;span class=&quot;selector-class&quot;&gt;.target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Conflicts=rescue&lt;span class=&quot;selector-class&quot;&gt;.service&lt;/span&gt; rescure&lt;span class=&quot;selector-class&quot;&gt;.target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After=basic&lt;span class=&quot;selector-class&quot;&gt;.target&lt;/span&gt; rescue&lt;span class=&quot;selector-class&quot;&gt;.service&lt;/span&gt; rescue&lt;span class=&quot;selector-class&quot;&gt;.target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AllowIsolate=yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Alias=default.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一部分中的 Requires 定义表明 multi-user.target 启动的时候 basic.target 也必须被启动；另外 basic.target 停止的时候，multi-user.target 也必须停止。如果您接着查看 basic.target 文件，会发现它又指定了 sysinit.target 等其他的单元必须随之启动。同样 sysinit.target 也会包含其他的单元。采用这样的层层链接的结构，最终所有需要支持多用户模式的组件服务都会被初始化启动好。&lt;/p&gt;
&lt;p&gt;在[Install]小节中有 Alias 定义，即定义本单元的别名，这样在运行 systemctl 的时候就可以使用这个别名来引用本单元。这里的别名是 default.target，比 multi-user.target 要简单一些。。。&lt;/p&gt;
&lt;p&gt;此外在/etc/systemd/system 目录下还可以看到诸如*.wants 的目录，放在该目录下的配置单元文件等同于在[Unit]小节中的 wants 关键字，即本单元启动时，还需要启动这些单元。比如您可以简单地把您自己写的 foo.service 文件放入 multi-user.target.wants 目录下，这样每次都会被默认启动了。&lt;/p&gt;
&lt;p&gt;最后，让我们来看看 sys-kernel-debug.mout 文件，这个文件定义了一个文件挂载点：&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#cat sys-kernel-debug.mount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Unit]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Description&lt;/span&gt;=Debug File Syste&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;DefaultDependencies&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ConditionPathExists&lt;/span&gt;=/sys/kernel/debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Before&lt;/span&gt;=sysinit.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Mount]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;What&lt;/span&gt;=debugfs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Where&lt;/span&gt;=/sys/kernel/debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Type&lt;/span&gt;=debugfs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个配置单元文件定义了一个挂载点。挂载配置单元文件有一个[Mount]配置小节，里面配置了 What，Where 和 Type 三个数据项。这都是挂载命令所必须的，例子中的配置等同于下面这个挂载命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mount –t debugfs /sys/kernel/debug debugfs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置单元文件的编写需要很多的学习，必须参考 systemd 附带的 man 等文档进行深入学习。希望通过上面几个小例子，大家已经了解配置单元文件的作用和一般写法了。&lt;/p&gt;
&lt;h4 id=&quot;系统管理员&quot;&gt;&lt;a href=&quot;#系统管理员&quot; class=&quot;headerlink&quot; title=&quot;系统管理员&quot;&gt;&lt;/a&gt;系统管理员&lt;/h4&gt;&lt;p&gt;systemd 的主要命令行工具是 systemctl。&lt;/p&gt;
&lt;p&gt;多数管理员应该都已经非常熟悉系统服务和 init 系统的管理，比如 service、chkconfig 以及 telinit 命令的使用。systemd 也完成同样的管理任务，只是命令工具 systemctl 的语法有所不同而已，因此用表格来对比 systemctl 和传统的系统管理命令会非常清晰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Systemd 命令和 sysvinit 命令的对照表 &lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sysvinit 命令&lt;/th&gt;
&lt;th&gt;Systemd 命令&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;service foo start&lt;/td&gt;
&lt;td&gt;systemctl start foo.service&lt;/td&gt;
&lt;td&gt;用来启动一个服务 (并不会重启现有的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo stop&lt;/td&gt;
&lt;td&gt;systemctl stop foo.service&lt;/td&gt;
&lt;td&gt;用来停止一个服务 (并不会重启现有的)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo restart&lt;/td&gt;
&lt;td&gt;systemctl restart foo.service&lt;/td&gt;
&lt;td&gt;用来停止并启动一个服务。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo reload&lt;/td&gt;
&lt;td&gt;systemctl reload foo.service&lt;/td&gt;
&lt;td&gt;当支持时，重新装载配置文件而不中断等待操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo condrestart&lt;/td&gt;
&lt;td&gt;systemctl condrestart foo.service&lt;/td&gt;
&lt;td&gt;如果服务正在运行那么重启它。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo status&lt;/td&gt;
&lt;td&gt;systemctl status foo.service&lt;/td&gt;
&lt;td&gt;汇报服务是否正在运行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ls /etc/rc.d/init.d/&lt;/td&gt;
&lt;td&gt;systemctl list-unit-files –type=service&lt;/td&gt;
&lt;td&gt;用来列出可以启动或停止的服务列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo on&lt;/td&gt;
&lt;td&gt;systemctl enable foo.service&lt;/td&gt;
&lt;td&gt;在下次启动时或满足其他触发条件时设置服务为启用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo off&lt;/td&gt;
&lt;td&gt;systemctl disable foo.service&lt;/td&gt;
&lt;td&gt;在下次启动时或满足其他触发条件时设置服务为禁用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo&lt;/td&gt;
&lt;td&gt;systemctl is-enabled foo.service&lt;/td&gt;
&lt;td&gt;用来检查一个服务在当前环境下被配置为启用还是禁用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig –list&lt;/td&gt;
&lt;td&gt;systemctl list-unit-files –type=service&lt;/td&gt;
&lt;td&gt;输出在各个运行级别下服务的启用和禁用情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo –list&lt;/td&gt;
&lt;td&gt;ls /etc/systemd/system/*.wants/foo.service&lt;/td&gt;
&lt;td&gt;用来列出该服务在哪些运行级别下启用和禁用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo –add&lt;/td&gt;
&lt;td&gt;systemctl daemon-reload&lt;/td&gt;
&lt;td&gt;当您创建新服务文件或者变更设置时使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;telinit 3&lt;/td&gt;
&lt;td&gt;systemctl isolate multi-user.target (OR systemctl isolate runlevel3.target OR telinit 3)&lt;/td&gt;
&lt;td&gt;改变至多用户运行级别。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表中列出的常见用法，系统管理员还需要了解其他一些系统配置和管理任务的改变。&lt;/p&gt;
&lt;p&gt;首先我们了解 systemd 如何处理电源管理，命令如下表所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; systemd 电源管理命令 &lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;systemctl reboot&lt;/td&gt;
&lt;td&gt;重启机器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl poweroff&lt;/td&gt;
&lt;td&gt;关机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl suspend&lt;/td&gt;
&lt;td&gt;待机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl hibernate&lt;/td&gt;
&lt;td&gt;休眠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl hybrid-sleep    混合休眠模式（同时休眠到硬盘并待机）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关机不是每个登录用户在任何情况下都可以执行的，一般只有管理员才可以关机。正常情况下系统 不应该允许 SSH 远程登录的用户执行关机命令。否则其他用户正在工作，一个用户把系统关了就不好了。为了解决这个问题，传统的 Linux 系统使用 ConsoleKit 跟踪用户登录情况，并决定是否赋予其关机的权限。现在 ConsoleKit 已经被 systemd 的 logind 所替代。&lt;/p&gt;
&lt;p&gt;logind 不是 pid-1 的 init 进程。它的作用和 UpStart 的 session init 类似，但功能要丰富很多，它能够管理几乎所有用户会话(session)相关的事情。logind 不仅是 ConsoleKit 的替代，它可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;维护，跟踪会话和用户登录情况。如上所述，为了决定关机命令是否可行，系统需要了解当前用户登录情况，如果用户从 SSH 登录，不允许其执行关机命令；如果普通用户从本地登录，且该用户是系统中的唯一会话，则允许其执行关机命令；这些判断都需要 logind 维护所有的用户会话和登录情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logind 也负责统计用户会话是否长时间没有操作，可以执行休眠/关机等相应操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为用户会话的所有进程创建 CGroup。这不仅方便统计所有用户会话的相关进程，也可以实现会话级别的系统资源控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;负责电源管理的组合键处理，比如用户按下电源键，将系统切换至睡眠状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多席位(multi-seat) 管理。如今的电脑，即便一台笔记本电脑，也完全可以提供多人同时使用的计算能力。多席位就是一台电脑主机管理多个外设，比如两个屏幕和两个鼠标/键盘。席 位一使用屏幕 1 和键盘 1；席位二使用屏幕 2 和键盘 2，但他们都共享一台主机。用户会话可以自由在多个席位之间切换。或者当插入新的键盘，屏幕等物理外设时，自动启动 gdm 用户登录界面等。所有这些都是多席位管理的内容。ConsoleKit 始终没有实现这个功能，systemd 的 logind 能够支持多席位。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上描述的这些管理功能仅仅是 systemd 的部分功能，除此之外，systemd 还负责系统其他的管理配置，比如配置网络，Locale 管理，管理系统内核模块加载等，完整地描述它们已经超出了本人的能力。&lt;/p&gt;
&lt;h3 id=&quot;systemd-小结&quot;&gt;&lt;a href=&quot;#systemd-小结&quot; class=&quot;headerlink&quot; title=&quot;systemd 小结&quot;&gt;&lt;/a&gt;systemd 小结&lt;/h3&gt;&lt;p&gt;作为系统初始化系统，systemd 的最大特点有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;令人惊奇的激进的并发启动能力，极大地提高了系统启动速度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 CGroup 统计跟踪子进程，干净可靠。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，和其前任不同的地方在于，systemd 已经不仅仅是一个初始化系统了。&lt;/p&gt;
&lt;p&gt;Systemd 出色地替代了 sysvinit 的所有功能，但它并未就此自满。因为 init 进程是系统所有进程的父进程这样的特殊性，systemd 非常适合提供曾经由其他服务提供的功能，比如定时任务 (以前由 crond 完成) ；会话管理 (以前由 ConsoleKit/PolKit 等管理) 。仅仅从本文皮毛一样的介绍来看，Systemd 已经管得很多了，可它还在不断发展。它将逐渐成为一个多功能的系统环境，能够处理非常多的系统管理任务，有人甚至将它看作一个操作系统。&lt;/p&gt;
&lt;p&gt;好 的一点是，这非常有助于标准化 Linux 的管理！从前，不同的 Linux 发行版各行其事，使用不同方法管理系统，从来也不会互相妥协。比如如何将系统进入休眠状态，不同的系统有不同的解决方案，即便是同一个 Linux 系统，也存在不同的方法，比如一个有趣的讨论：如何让 ubuntu 系统休眠， 可以使用底层的/sys/power/state 接口，也可以使用诸如 pm-utility 等高层接口。存在这么多种不同的方法做一件事情对像我这样的普通用户而言可不是件有趣的事情。systemd 提供统一的电源管理命令接口，这件事情的意义就类似全世界的人都说统一的语言，我们再也不需要学习外语了，多么美好！&lt;/p&gt;
&lt;p&gt;如果所有的 Linux 发行版都采纳了 systemd，那么系统管理任务便可以很大程度上实现标准化。此外 systemd 有个很棒的承诺：接口保持稳定，不会再轻易改动。对于软件开发人员来说，这是多么体贴又让人感动的承诺啊！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h3&gt;&lt;p&gt;文章从古老却简明稳定的 sysvinit 说起，接着简要描述了 UpStart 带来的清新改变，最后看到了充满野心和活力的新生代 systemd 系统逐渐统治 Linux 的各个版本。就好像在看我们这个世界，一代人老去，新的一代带着横扫一切的气概登上舞台，还没有喊出他们最有力的口号，更猛的一代已经把聚光灯和所有的目 光带走。Systemd 之后也许还有更新的 init 系统出现吧，让我们继续期待。。。&lt;/p&gt;
&lt;p&gt;整理文档链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/1407_liuming_init1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ibm.com/developerworks/cn/linux/1407_liuming_init1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/1407_liuming_init2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ibm.com/developerworks/cn/linux/1407_liuming_init2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-Init-系统-init-系统的历史和现状&quot;&gt;&lt;a href=&quot;#什么是-Init-系统-init-系统的历史和现状&quot; class=&quot;headerlink&quot; title=&quot;什么是 Init 系统,init 系统的历史和现状&quot;&gt;&lt;/a&gt;什么是 Init 系统
    
    </summary>
    
      <category term="技术" scheme="http://qiankun.space/categories/technology/"/>
    
    
  </entry>
  
  <entry>
    <title>罪己</title>
    <link href="http://qiankun.space/2016/05/01/thinking-in-international-labour-day/"/>
    <id>http://qiankun.space/2016/05/01/thinking-in-international-labour-day/</id>
    <published>2016-05-01T06:46:33.000Z</published>
    <updated>2016-05-09T05:15:54.953Z</updated>
    
    <content type="html">&lt;p&gt;严重的拖延症患者终于想起来五一创建的“罪己”文档还没有写，趁着罪过还不是特别深重赶紧过来“赎罪”。&lt;/p&gt;
&lt;p&gt;我时常反省自己，总怕身上的毛病太多引来别人的耻笑。一个人生活在外，如果真发生什么当局者迷的事情，连一个提点的人都没有，岂不是天天像小丑一样暴露在大庭广众之下。脸皮没那么厚，又怕自己受伤害，所以只好选择在孤单的日子里多看看自己。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“君子博学而日参省乎己，则知明而行无过矣”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话出自于《荀子》的首篇《劝学》，其意义可想而知。上学的时候理解这句话就单纯地以为两个条件独立的对应着两个结果，比如“博学”的结果是“知明”、“省乎己”的结果是“无过矣”。不过自己根本没有按照胡适先生“做学问要在不疑处犹疑”的要求，甚至于有疑处也不疑，只是大致了解全文意思然后粗暴地填到脑海中去应付考试了。现在想想古人真是大智慧啊，只怪自己太傻太天真。&lt;/p&gt;
&lt;p&gt;“博学”和“省乎己”是相辅相成缺一不可的。如今的社会节奏比较快，更多的人将重点放在了“博学”上面，依靠“博学”可以很直接地获取被这个浮躁社会高看的“利益”，很少有人肯花时间去审视自己。当大家都不去解读自己的内心，而是将目光投射到周围人的身上，整个社会就会呈现出一种你追我赶末日狂奔的景象，哪怕自己跑掉了身上的衣衫也来不及去整理，更有甚者为了自己能够在这条道路上跑得更快甚至脱掉衣衫裸奔于世而毫无羞耻。某某博士论文剽窃、某某机构骗取国家科研经费等等屡见报端，当这些“博学”之流干下这等龌龊之事成为一种社会常态后，我时常有一种国之大厦将倾的担忧。阿列克谢耶维奇在她的《切尔诺贝利的回忆》中描述一位曾在“二战”期间的德国纳粹集中营中遭受过非人折磨的幸存者见到的情境：毒气室由学有专长的工程师建造；儿童被学识渊博的医生毒死；幼儿被训练有素的护士杀害；妇女和婴儿被受到高中或大学教育的士兵枪杀。“流氓不可怕，就怕流氓有文化”，不反省自我肆无忌惮地放纵内心换来的不一定是自由，也可能是可怕的杀戮和伤害。我有自知之明没有把自己归类到“博学”的一类，可是“省乎己”却同样为自己带来困扰。没有“博学”的支撑，“省乎己”变的单薄，即使自己发现了毛病也没有能力去修正，从而陷入了郁郁寡欢的无知之流。&lt;/p&gt;
&lt;p&gt;多读书多看报，开阔自己的眼界，放宽自己的心胸。向“博学”靠近，不断地砥砺自身，变成更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;严重的拖延症患者终于想起来五一创建的“罪己”文档还没有写，趁着罪过还不是特别深重赶紧过来“赎罪”。&lt;/p&gt;
&lt;p&gt;我时常反省自己，总怕身上的毛病太多引来别人的耻笑。一个人生活在外，如果真发生什么当局者迷的事情，连一个提点的人都没有，岂不是天天像小丑一样暴露在大庭广众之下。脸
    
    </summary>
    
      <category term="随笔" scheme="http://qiankun.space/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>shell脚本调用的三种不同方式</title>
    <link href="http://qiankun.space/2016/04/28/the-method-called-shell-script/"/>
    <id>http://qiankun.space/2016/04/28/the-method-called-shell-script/</id>
    <published>2016-04-28T13:30:55.000Z</published>
    <updated>2016-04-28T14:42:39.813Z</updated>
    
    <content type="html">&lt;p&gt;bash的命令分为两类：外部命令和内部命令。外部命令是通过系统调用或独立的程序实现的，如sed、awk等；内部命令是由特殊的文件格式（.def）所实现，如cd、history、exec等。shell脚本调用有三种不同方法：&lt;code&gt;fork&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;。其中fork是linux的系统调用，用来创建子进程。exec和source都属于bash内部命令（builtins commands）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fork&lt;/strong&gt; (/directory/script.sh)：在子命令执行完后再执行父级命令，&lt;strong&gt;子级的环境变量不会影响到父级&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;fork是最常用的，就是直接在脚本里面用/directory/script.sh来调用script.sh这个脚本。运行的时候开一个sub-shell执行调用的脚本，sub-shell执行的时候， parent-shell还在。sub-shell执行完毕后返回parent-shell。 sub-shell从parent-shell继承环境变量，但是sub-shell中的环境变量不会带回parent-shell。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子进程是父进程(parent process)的一个副本，从父进程那里获得一定的资源分配以及继承父进程的环境。子进程与父进程唯一不同的地方在于pid（process id）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;exec&lt;/strong&gt;(exec /directory/script.sh)：&lt;strong&gt; 执行子级的命令后，不再执行父级命令&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exec命令在执行时会把当前的shell process关闭，然后换到后面的命令继续执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exec与fork不同，不需要新开一个sub-shell来执行被调用的脚本。被调用的脚本与父脚本在同一个shell内执行。但是使用exec调用一个新脚本以后，父脚本中exec行之后的内容就不会再执行了。这是exec和source的区别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt;(source /directory/script.sh)：&lt;strong&gt; 执行子级命令后继续执行父级命令，同时子级设置的环境变量会影响到父级的环境变量&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;source命令即点(.)命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与fork的区别是不新开一个sub-shell来执行被调用的脚本，而是在同一个shell中执行。所以被调用的脚本中声明的变量和环境变量, 都可以在主脚本中得到和使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过下面这两个脚本来体会三种调用方式的不同:&lt;/p&gt;
&lt;p&gt;1.sh&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A=B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;PID for 1.sh before exec/source/fork:$$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.sh: \$A is &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;using exec…&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; ./2.sh ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;using source…&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                . ./2.sh ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;using fork by default…&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ./2.sh ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;esac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;PID for 1.sh after exec/source/fork:$$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.sh: \$A is &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.sh&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;PID for 2.sh: $$&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2.sh get \$A=&lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; from 1.sh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A=C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;2.sh: \$A is &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行情况：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; before exec/source/fork:&lt;span class=&quot;number&quot;&gt;5845364&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using fork by default…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5242940&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; get &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt;=B from &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; after exec/source/fork:&lt;span class=&quot;number&quot;&gt;5845364&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; exec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; before exec/source/fork:&lt;span class=&quot;number&quot;&gt;5562668&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using exec…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5562668&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; get &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt;=B from &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; before exec/source/fork:&lt;span class=&quot;number&quot;&gt;5156894&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using source…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5156894&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; get &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt;=B from &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PID &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt; after exec/source/fork:&lt;span class=&quot;number&quot;&gt;5156894&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sh&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$A&lt;/span&gt; is C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;br&gt;系统调用exec是以新的进程去代替原来的进程，但进程的PID保持不变。因此可以这样认为，exec系统调用并没有创建新的进程，只是替换了原来进程上下文的内容。原进程的代码段，数据段，堆栈段被新的进程所代替。&lt;/p&gt;
&lt;p&gt;整理本文参考链接：&lt;br&gt;&lt;a href=&quot;http://mindream.wang.blog.163.com/blog/static/2325122220084624318692/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mindream.wang.blog.163.com/blog/static/2325122220084624318692/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;bash的命令分为两类：外部命令和内部命令。外部命令是通过系统调用或独立的程序实现的，如sed、awk等；内部命令是由特殊的文件格式（.def）所实现，如cd、history、exec等。shell脚本调用有三种不同方法：&lt;code&gt;fork&lt;/code&gt;, &lt;code&gt;e
    
    </summary>
    
      <category term="技术" scheme="http://qiankun.space/categories/technology/"/>
    
    
      <category term="shell" scheme="http://qiankun.space/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>咕咚来了</title>
    <link href="http://qiankun.space/2016/04/28/a-short-story-before-writing/"/>
    <id>http://qiankun.space/2016/04/28/a-short-story-before-writing/</id>
    <published>2016-04-28T01:34:40.564Z</published>
    <updated>2016-04-28T08:56:02.304Z</updated>
    
    <content type="html">&lt;p&gt;就像 &lt;code&gt;helloworld&lt;/code&gt; 作为所有编程语言的起始阶段占据着无法改变的地位一样，这个小故事也是我开始写些东西前必不可少的部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;湖边有一棵树，树上结满了木瓜。一个木瓜熟了，从树上掉进湖里，咕咚一声，溅起了白色的水花。&lt;/p&gt;
&lt;p&gt;兔子听见吓坏了，拔腿就跑，边跑边叫：“快逃哇，咕咚来了！”&lt;/p&gt;
&lt;p&gt;猴子听见了，也跟着跑，边跑边叫：“大家快逃哇，咕咚来了！”&lt;/p&gt;
&lt;p&gt;这下子可热闹了。动物们全跟着跑起来，边跑边喊：“快逃命啊，咕咚来了！”&lt;/p&gt;
&lt;p&gt;大象走来了，拦住了大伙儿：“咕咚在哪儿，你们看见了吗？”&lt;/p&gt;
&lt;p&gt;“没看见，是兔子说的！”&lt;/p&gt;
&lt;p&gt;大象追问兔子：“你看见咕咚了？”&lt;/p&gt;
&lt;p&gt;兔子摇摇头说：“没有，我是在湖边听见的。”&lt;/p&gt;
&lt;p&gt;大家悄悄来到湖边，正巧一个木瓜又落到了湖里。咕咚一声，溅起了白色的水花。&lt;/p&gt;
&lt;p&gt;大伙儿你看看我，我看看你，都哈哈地笑了！&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;就像 &lt;code&gt;helloworld&lt;/code&gt; 作为所有编程语言的起始阶段占据着无法改变的地位一样，这个小故事也是我开始写些东西前必不可少的部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;湖边有一棵树，树上结满了木瓜。一个木瓜熟了，从树上掉进湖里，咕咚一声，溅起了白色
    
    </summary>
    
      <category term="随笔" scheme="http://qiankun.space/categories/essay/"/>
    
    
  </entry>
  
</feed>
